,desired_answer,student_answer,label
0,To simulate the behaviour of portions of the desired software product.,High risk problems are address in the prototype program to make sure that the program is feasible.  A prototype may also be used to show a company that the software can be possibly programmed.,1
1,To simulate the behaviour of portions of the desired software product.,To simulate portions of the desired final product with a quick and easy program that does a small specific job. It is a way to help see what the problem is and how you may solve it in the final project.,2
2,To simulate the behaviour of portions of the desired software product.,A prototype program simulates the behaviors of portions of the desired software product to allow for error checking.,1
3,To simulate the behaviour of portions of the desired software product.,"Defined in the Specification phase a prototype stimulates the behavior of portions of the desired software product.  Meaning, the role of a prototype is a temporary solution until the program itself is refined to be used extensively in problem solving.",2
4,To simulate the behaviour of portions of the desired software product.,It is used to let the users have a first idea of the completed program and allow the clients to evaluate the program. This can generate much feedback including software specifications and project estimations of the total project.,1
5,To simulate the behaviour of portions of the desired software product.,To find problem and errors in a program before it is finalized,1
6,To simulate the behaviour of portions of the desired software product.,"To address major issues in the creation of the program. There is no way to account for all possible bugs in the program, but it is possible to prove the program is tangible. ",1
7,To simulate the behaviour of portions of the desired software product.,you can break the whole program into prototype programs to simulate parts of the final program,2
8,To simulate the behaviour of portions of the desired software product.,#NAME?,0
9,To simulate the behaviour of portions of the desired software product.,Simulating the behavior of only a portion of the desired software product.,2
10,To simulate the behaviour of portions of the desired software product.,A program that stimulates the behavior of portions of the desired software product.,2
11,To simulate the behaviour of portions of the desired software product.,A program that simulates the behavior of portions of the desired software product.,2
12,To simulate the behaviour of portions of the desired software product.,To lay out the basics and give you a starting point in the actual problem solving.,1
13,To simulate the behaviour of portions of the desired software product.,To simulate problem solving for parts of the problem,1
14,To simulate the behaviour of portions of the desired software product.,A prototype program provides a basic groundwork from which to further enhance and improve a solution to a problem.,1
15,To simulate the behaviour of portions of the desired software product.,"A prototype program is a part of the Specification phase of Software Problem Solvin.  It's employed to illustrate how the key problem or problems will be solved in a program, and sometimes serves as a base program to expand upon.",1
16,To simulate the behaviour of portions of the desired software product.,Program that simulates the behavior of portions of the desired software product,2
17,To simulate the behaviour of portions of the desired software product.,it provides a limited proof of concept to verify with the client before actually programming the whole application.,1
18,To simulate the behaviour of portions of the desired software product.,It tests the main function of the program while leaving out the finer details.,1
19,To simulate the behaviour of portions of the desired software product.,To get early feedback from users in early stages of development.  To show users a first idea of what the program will do/look like.  To make sure the program will meet requirements before intense programming begins.,1
20,To simulate the behaviour of portions of the desired software product.,it simulates the behavior of portions of the desired software product,2
21,To simulate the behaviour of portions of the desired software product.,It simulates the behavior of portions of the desired software product.,2
22,To simulate the behaviour of portions of the desired software product.,A prototype program is used in problem solving to collect data for the problem.,0
23,To simulate the behaviour of portions of the desired software product.,To ease the understanding of problem under discussion and to ease the understanding of the program itself,1
24,To simulate the behaviour of portions of the desired software product.,The role of a prototype program is to help spot key problems that may arise during the actual programing.,1
25,To simulate the behaviour of portions of the desired software product.,"the prototype program gives a general idea of what the end product will do,   without the time and effort to write out the entire program.",1
26,To simulate the behaviour of portions of the desired software product.,to show that a certain part of the program works as it is supposed to,1
27,To simulate the behaviour of portions of the desired software product.,"Prototype programming is an approach to programming that enables one to take an organized approach to developing an effective program with minimal errors and a strategic pattern when solving a problem. i.e. book gave an example of a costumer withdrawing money from a bank, the approach that was taking on a pseudo code level during the OOA/Design lvl before proceeding into creating a solution. ",1
28,The testing stage can influence both the coding stage (phase 5) and the solution refinement stage (phase 7),Refining and possibly the design if the testing phase reveals problems in the design. Production can be affected if the program is unworkable in its current form which will lead to a later production time than originally estimated. Also affects coding because after testing you may need to rewrite the code for the program to remove errors.,1
29,The testing stage can influence both the coding stage (phase 5) and the solution refinement stage (phase 7),The implementation phase and the maintenance phase are effected,1
30,The testing stage can influence both the coding stage (phase 5) and the solution refinement stage (phase 7),"Verification, coding, refining the solution and maintenance are all influenced by the testing stage.",1
31,The testing stage can influence both the coding stage (phase 5) and the solution refinement stage (phase 7),"In RUP the stages in the software life cycle are influenced by the testing stage is:  Elaboration phase- refined progject vision, iterative devilopment of core system, development of system requirements, more accurate time and cost estimates.  Construction phase- iterative development of remaining system.  Transition phase-testing and deployment of the system.",1
32,The testing stage can influence both the coding stage (phase 5) and the solution refinement stage (phase 7),"Refining the solution, Production and Maintenance are all influenced by the Testing stage. ",1
33,The testing stage can influence both the coding stage (phase 5) and the solution refinement stage (phase 7),"Elaboration, Construction, and Transition are all affected by testing",1
34,The testing stage can influence both the coding stage (phase 5) and the solution refinement stage (phase 7),"Refining, Production, Maintenance",1
35,The testing stage can influence both the coding stage (phase 5) and the solution refinement stage (phase 7),Refining the solution,1
36,The testing stage can influence both the coding stage (phase 5) and the solution refinement stage (phase 7),Refining and Coding,2
37,The testing stage can influence both the coding stage (phase 5) and the solution refinement stage (phase 7),"The second half of the Elaboration phase, Construction phase, and the Transition phase. ",1
38,The testing stage can influence both the coding stage (phase 5) and the solution refinement stage (phase 7),"The refining step, the production step, and the maintenance stage.  ",1
39,The testing stage can influence both the coding stage (phase 5) and the solution refinement stage (phase 7),"Elaboration, Construction, Transition",1
40,The testing stage can influence both the coding stage (phase 5) and the solution refinement stage (phase 7),Refining.,1
41,The testing stage can influence both the coding stage (phase 5) and the solution refinement stage (phase 7),"The testing stage has a direct influence on the final version of a program, being as it is the debugging and finalization of a software revision.",0
42,The testing stage can influence both the coding stage (phase 5) and the solution refinement stage (phase 7),"Directly: Refining, coding.  Because Refining is right before the Testing Phase and Coding is right after the Testing Phase.  Indirectly: Production, Maintenance.  Because Refining occurs before these last two stages in the Software Life Cycle.",2
43,The testing stage can influence both the coding stage (phase 5) and the solution refinement stage (phase 7),"Testing, refining, production, and maintenance.",1
44,The testing stage can influence both the coding stage (phase 5) and the solution refinement stage (phase 7),"Depending on how the work is done, Testing is spread throughout the  process as to prevent errors from showing up later on due to lack of foresight. ",0
45,The testing stage can influence both the coding stage (phase 5) and the solution refinement stage (phase 7),"Elaboration, construction, and transition.",1
46,The testing stage can influence both the coding stage (phase 5) and the solution refinement stage (phase 7),"All stages are influenced except setting the program requirements.  If a test fails, it can change the whole design, implementation, etc of a program as well as the final outcome.",0
47,The testing stage can influence both the coding stage (phase 5) and the solution refinement stage (phase 7),"Refining, production, and maintenance",1
48,The testing stage can influence both the coding stage (phase 5) and the solution refinement stage (phase 7),coding and refining,2
49,The testing stage can influence both the coding stage (phase 5) and the solution refinement stage (phase 7),"refining, production, maintenance.",1
50,The testing stage can influence both the coding stage (phase 5) and the solution refinement stage (phase 7),"Removing logical errors, testing for valid data, random data and actual data.",0
51,The testing stage can influence both the coding stage (phase 5) and the solution refinement stage (phase 7),1- specification 2- design 3- risk analysis 4- verification 5- coding 6- testing 7- refining 8- production 9- maintenance,1
52,The testing stage can influence both the coding stage (phase 5) and the solution refinement stage (phase 7),"Refining stage, Production stage, and Maintenance stage.  ",1
53,The testing stage can influence both the coding stage (phase 5) and the solution refinement stage (phase 7),Testing could affect all parts of the life cycle; it could make you go back   to specification if it does not test well.,1
54,The testing stage can influence both the coding stage (phase 5) and the solution refinement stage (phase 7),coding,1
55,The testing stage can influence both the coding stage (phase 5) and the solution refinement stage (phase 7),"The Individual components and steps such as  analysis, design, and implementing code  as well as the entire system are tested for execution of the requirements identified during the analysis stage. i.e. Main output ",0
56,Abstraction and reusability.,"Modularability, the ability to reuse parts of the program later in another program sometimes with completely different goals for the program. Also it makes it easier to debug code by dividing up the code into classes that each do a specific job and when the program fails at one job you only have one class to debug. Good for security purposes because it allows you to let someone use a program which sorts lists without having to give them access to the source code. ALso allows you to use inheritance and polymorphism.",1
57,Abstraction and reusability.,"This type of programming is more flexible, making it easier to add and modify the program.  It is also a type of a fail safe program, you check each individual module.  This eliminates redundant code and makes the program easier to read for other programmers.  When debugging the program it is easier to track down the source of a problem within a module rather than a 2 million line program.",2
58,Abstraction and reusability.,The main advantages to object-oriented programming are that existing classes can be reused and program maintenance and verification are easier.,1
59,Abstraction and reusability.,The advantages is that OOP allows us to build classes of objects.  Three principles that make up OOP are:  Encapsulation- Objects combine data and operations.  Inheritance- Classes can inherit properties from other classes.  Polymorphism- Objects can determine appropriate operations at execution time.,1
60,Abstraction and reusability.,Some advantages are existing classes can be reused and program maintenance and verification are easier to accomplish.,1
61,Abstraction and reusability.,Object oriented programming allows programmers to use an object with classes that can be changed and manipulated while not affecting the entire object at once. The classes all hold attrubutes that affect the object.,0
62,Abstraction and reusability.,"Reusable components, Extensibility, Maintainability, it reduces large problems into smaller more manageable problems.",1
63,Abstraction and reusability.,Encapsulation-objects combine data and operations Inheritance- classes can inherit properties from other classes Polymorphism- Objects can determine appropriate operations at execution time,1
64,Abstraction and reusability.,Re-usability  and ease of maintenance,1
65,Abstraction and reusability.,"One of the main advantages is you can hide inner details a technique known by encapsulation. Objects combine the data and operations but you cannot see how it works.   Another advantage is you can reuse classes that have been defined earlier in the program, a method known as inheritance.   Finally another advantage is objects can determine appropriate operations at execution time a technique known as polymorphism. ",2
66,Abstraction and reusability.,"Existing classes can be reused, and program maintenance and verification are easier.",1
67,Abstraction and reusability.,Using different modules allows for easier debugging,1
68,Abstraction and reusability.,"Data encapsulation concept,the use of functions or methods to manipulate data.",1
69,Abstraction and reusability.,"Modular, reusable code, allowing faster deployment of solutions, and a more general view of a solution.",1
70,Abstraction and reusability.,"Coding and Debugging programs are usually easier, as either the compiler will specify the object that is working incorrectly, or the function an object was assigned to will be easier to identify.  The code itself also looks more organized and is easier to read and will help to avoid redundant coding.  Post-programming maintenance is also easier.  Also, modules can be reused several times in other programs without too much hassle.   Abstraction is the art of breaking down one big problem into smaller, simpler problems and solving them.  Many of the smaller problems are shared between unique complex problems, and creating modules to these solve these smaller repeated problems can save time when you encounter them again.",2
71,Abstraction and reusability.,"Variables can remain private. The code is easily modified and reusable, as well as easily implemented. Not to mention easier to read and follow along as an observer.",1
72,Abstraction and reusability.,Data Abstraction and control... it is possible to isolate elements from other elements a lot easier and prevent tampering of data.,1
73,Abstraction and reusability.,Encapsulation - Objects use operations without knowing how the operation works. Inheritance - cuts redundancy by reusing earlier classes. Polymorphism - objects select the correct operation to use in the situation.,1
74,Abstraction and reusability.,"They make it easier to reuse and adapt previously written code and they separate complex programs into smaller, easier to understand classes.",1
75,Abstraction and reusability.,"Existing classes can be reused, Program maintenance and verification are easier ",1
76,Abstraction and reusability.,"Existing classes can be feused, Program maintenance and verification are easier",1
77,Abstraction and reusability.,"the main advantages to object-oriented programming  is data abstraction, easier maintenance, and re-usability.",2
78,Abstraction and reusability.,Existing classes can be reused Program maintenance and verifications are easy,1
79,Abstraction and reusability.,1- Existing classes can be reused 2- Program maintenance and verification are easier,1
80,Abstraction and reusability.,Information can be hidden. It is easier to debug. Programming is easier and more manageable.,1
81,Abstraction and reusability.,"Existing classes can be reused, program maintenance and verification are   easier.",1
82,Abstraction and reusability.,existing classes can be reused program maintenance and verification are easier,1
83,Abstraction and reusability.,"Well for one encapsulation the values of the variables inside an object are private, unless methods are written to pass info outside of the object. As well as Inheritance where each subclass inherits all variables and methods of its super class.  Example in the book included obj clock and how obj alarm would still use clock from the first class. ",1
84,At the main function.,At function ‘int main ()’,2
85,At the main function.,the Function main().,2
86,At the main function.,c++ programs begin to execute in the main method.,2
87,At the main function.,A C++ program will begin to execute at the main() function.,2
88,At the main function.,They begin in the main() function.,2
89,At the main function.,Int main(),2
90,At the main function.,main method,2
91,At the main function.,in the testing phase,0
92,At the main function.,main,2
93,At the main function.,They begin to execute at the funcion main().,2
94,At the main function.,The main method.,2
95,At the main function.,At the root,1
96,At the main function.,In the main() function.,2
97,At the main function.,C++ programs begin execution at main.,2
98,At the main function.,In the Main function..?,2
99,At the main function.,"At the ""main()"" function",2
100,At the main function.,The main function.,2
101,At the main function.,The function main,2
102,At the main function.,"After loading the required include statements and libraries, the main method begins the execution.",2
103,At the main function.,main function,2
104,At the main function.,C++ programs begin execution at the main function.,2
105,At the main function.,At main,2
106,At the main function.,they beging to excute at main,2
107,At the main function.,at the main function  int main() {},2
108,At the main function.,"in the ""main"" function",2
109,At the main function.,Within the main function,2
110,A location in memory that can store a value.,Variable can be a integer or a string in a program.,1
111,A location in memory that can store a value.,"In programming, a structure that holds data and is uniquely named by the programmer. It holds the data assigned to it until a new value is assigned or the program is finished. ",1
112,A location in memory that can store a value.,A variable is a location in memory where a value can be stored.,2
113,A location in memory that can store a value.," Variable is a location in the computer's memory, in which a value can be stored and later can retrieve that value.",2
114,A location in memory that can store a value.,"A variable is a location in the computer's memory where a value can be stored for use by a program. Each variable has a name, a value, a type and a size.",2
115,A location in memory that can store a value.,A named object that can hold a numerical or letter value,1
116,A location in memory that can store a value.,"It's a sybol or name for a value/number. Example: 'a_used_number' can stand for any given number, and the programmer can refer to that number by using the variable name.",1
117,A location in memory that can store a value.,A variable is a location in the computers memory where a value can be stored for use by a program,2
118,A location in memory that can store a value.,a block of memory that holds a specific type of data,2
119,A location in memory that can store a value.,It is a location in the computer's memory where it can be stored for use by a program.,2
120,A location in memory that can store a value.,A location in memory where value can be stored.,2
121,A location in memory that can store a value.,a value/word that can assume any of a set of values,1
122,A location in memory that can store a value.,A pointer to a location in memory.,1
123,A location in memory that can store a value.,"A variable is the memory address for a specific type of stored data, or from a mathematical perspective, a symbol representing a fixed definition with changing values.",2
124,A location in memory that can store a value.,A variable is a value that is subject to change in a computer's memory that can be used by programs.  Programs can change the value of the variable and recall it later or act on it directly.,2
125,A location in memory that can store a value.,a symbol that stands in for a value that may or may not change depending on the program.,1
126,A location in memory that can store a value.,"a placeholder to hold information used in the program... for example: int can hold: 1, 2, 3, 4, 68, 72, 256, etc. float can hold: 1.54, 55.55, 1.24, 5.657, 8.8123, et. char can hold: A, B, C, D, E, F, !, 4, 5, 6, P, etc. ",1
127,A location in memory that can store a value.,a stored value used by the program,1
128,A location in memory that can store a value.,"A way to store different values into the program, such as numbers, words, letters, etc.",1
129,A location in memory that can store a value.,An object with a location in memory where value can be stored,1
130,A location in memory that can store a value.,location in memory where a value can be stored,2
131,A location in memory that can store a value.,a variable is an object where data is stored.,1
132,A location in memory that can store a value.,Location in memory where a value can be stored.,2
133,A location in memory that can store a value.,it is a location in memory where value can be stored,2
134,A location in memory that can store a value.,A variable is the location in a computer's memory where a value can be stored for use by a program.,2
135,A location in memory that can store a value.,A variable is a location in a computers memory where a value can be stored   for use by a program.,2
136,A location in memory that can store a value.,a location in memory where data can be stored and retrieved,2
137,A location in memory that can store a value.,"Is a method or identifier I would say,  we use to bind a data object to memory location; which is then stored in a location that can be accessed when and manipulated later when the variable name is called. ",2
138,Variables can be declared anywhere in a program. They can be declared inside a function (local variables) or outside the functions (global variables),"They can be declared right before they are used, but it is a good practice to declare them at the beginning of the program and label what they are food.",1
139,Variables can be declared anywhere in a program. They can be declared inside a function (local variables) or outside the functions (global variables),In the Function main() before using the variable.,1
140,Variables can be declared anywhere in a program. They can be declared inside a function (local variables) or outside the functions (global variables),"Local variables are declared inside the method or function they will be used in at the beginning of the method. Global variables are declared outside of any function or method, generally before functions are defined.",2
141,Variables can be declared anywhere in a program. They can be declared inside a function (local variables) or outside the functions (global variables),Variables are declared where ever it is defined either inside a block locally or outside a block globally.,1
142,Variables can be declared anywhere in a program. They can be declared inside a function (local variables) or outside the functions (global variables),Variables are declared before they are actually used. They can be declared before main() to use globally,1
143,Variables can be declared anywhere in a program. They can be declared inside a function (local variables) or outside the functions (global variables),"For good programing practice they should be declared before main(), but should at least be declared before they are used.",1
144,Variables can be declared anywhere in a program. They can be declared inside a function (local variables) or outside the functions (global variables),"They can be declared globally just before the main method (but also outside of it)... or variables can be subject to only the method they're scoped within, but would still be declared at the beginning of that method (but inside of it).",2
145,Variables can be declared anywhere in a program. They can be declared inside a function (local variables) or outside the functions (global variables),local variables are declared inside the method while global variables are declared in the body.,2
146,Variables can be declared anywhere in a program. They can be declared inside a function (local variables) or outside the functions (global variables),"Globally for an entire program, and locally for individual functions (including FOR statements)",1
147,Variables can be declared anywhere in a program. They can be declared inside a function (local variables) or outside the functions (global variables),They are usually declared at the beginning before they can be used in the program. They always contain a name and a data type.,1
148,Variables can be declared anywhere in a program. They can be declared inside a function (local variables) or outside the functions (global variables),Inside the method.,1
149,Variables can be declared anywhere in a program. They can be declared inside a function (local variables) or outside the functions (global variables),at the top,0
150,Variables can be declared anywhere in a program. They can be declared inside a function (local variables) or outside the functions (global variables),Global variables are declared in the body of the code. Local variables are declared in the function they are to be used (unless the function is being passed a variable). Variables should always be declared before use.,2
151,Variables can be declared anywhere in a program. They can be declared inside a function (local variables) or outside the functions (global variables),Variables are usually declared at the beginning of a module of C++ code.,1
152,Variables can be declared anywhere in a program. They can be declared inside a function (local variables) or outside the functions (global variables),"In the main function, usually at the top of code.  They can be declared almost anywhere, but must be declared before the code can use or act upon them.",1
153,Variables can be declared anywhere in a program. They can be declared inside a function (local variables) or outside the functions (global variables),in the very beginning of the program. Before the main() starts.,1
154,Variables can be declared anywhere in a program. They can be declared inside a function (local variables) or outside the functions (global variables),"In the declaration of Functions, for statements, and while statements. in the body of If, For, while, do while, statements, in namespaces, headers, etc  ( almost anywhere. ) anywhere in the program, as long as it is on it's own line.",1
155,Variables can be declared anywhere in a program. They can be declared inside a function (local variables) or outside the functions (global variables),After declaration of the variable's data type.,0
156,Variables can be declared anywhere in a program. They can be declared inside a function (local variables) or outside the functions (global variables),"anywhere in the code, can be at the top, or in the middle of the code, or anywhere.",1
157,Variables can be declared anywhere in a program. They can be declared inside a function (local variables) or outside the functions (global variables),Before they are used.,1
158,Variables can be declared anywhere in a program. They can be declared inside a function (local variables) or outside the functions (global variables),Anywhere in the same scope before they are used,1
159,Variables can be declared anywhere in a program. They can be declared inside a function (local variables) or outside the functions (global variables),variables can be declared in classes and methods.,1
160,Variables can be declared anywhere in a program. They can be declared inside a function (local variables) or outside the functions (global variables),inside the function scope and outside of the function scope in case of global variables,2
161,Variables can be declared anywhere in a program. They can be declared inside a function (local variables) or outside the functions (global variables),global variables are declared in the main function local variables are declared in any other function,1
162,Variables can be declared anywhere in a program. They can be declared inside a function (local variables) or outside the functions (global variables),"Variables are usually declared at the very beginning of a C++ program, but can be declared any in the program as long as they appear before they are called upon.",1
163,Variables can be declared anywhere in a program. They can be declared inside a function (local variables) or outside the functions (global variables),"Variables are declared in the main function, before any operation is   attempted with the variables.",1
164,Variables can be declared anywhere in a program. They can be declared inside a function (local variables) or outside the functions (global variables),"anywhere, but where you declare them depends on where you want them to be accessible (their scope)",1
165,Variables can be declared anywhere in a program. They can be declared inside a function (local variables) or outside the functions (global variables),It depends if it’s a global then they have to be declared out side the source code to be used in every scope however a local variable is one declared in a local function etc. which obviously doesn’t need to be declared outside the variable seeing how it is used for the function or block its being called for.,1
166,The block inside a do...while statement will execute at least once.,"""The “do” statement first evaluates the condition and then executes the lines of code in the statement 0 or more times. 	The “do while” statement executes the lines of code and then it evaluates the condition. """,1
167,The block inside a do...while statement will execute at least once.,do...while statements evaluate whether or not to loop after running the block contained within it at least once. So the main differance is that while statements have a possibility of never being used. Do ... while statements on the other hand are always run at least once before evaluating whether to run again.,2
168,The block inside a do...while statement will execute at least once.,"The main difference between a while and a do...while loop is that the do...while loop always cycles through the loop at least once, but the while loop does not always do so.",2
169,The block inside a do...while statement will execute at least once.,While loop used to execute a block of code as long as some condition is true.  A do...while loop used to execute a block of code as long as some condition is satisfied.  The difference between while and do...while is while loop tests its condition before the execution of its contents and the do...while loop tests its condition after the execution of its contents at least once.,2
170,The block inside a do...while statement will execute at least once.,"The termination condition of a do...while statement is usually at the end of the loop so it will run at least once. As for the while statement, if the condition is false to begin with, then the loop will never run.",2
171,The block inside a do...while statement will execute at least once.,A while loop will check the statement to make sure it is true before executing. A do while loop will execute before checking the statement to see if it should run again.,2
172,The block inside a do...while statement will execute at least once.,"A while statement will test the condition of the while loop FIRST - there is a chance the loop will never run. A do...while loop will ALWAYS run once, and then the while test will determine if it will run again.",2
173,The block inside a do...while statement will execute at least once.,a do while loop always executes once. A while loop's conditional statement has to be true for it to run.,2
174,The block inside a do...while statement will execute at least once.,"while statements will evaluate the statement BEFORE executing a cycle of the loop, including the first cycle, meaning that a while loop will not always execute. A do...while will run evaluate the statement AFTER running through a cycle of the loop, ensuring that the loop always executes at least one time.",2
175,The block inside a do...while statement will execute at least once.,The main difference between a do and a do...while statement is in a do...while statement is the statements in a do block are always executed atleast once.   The while statement will only execute if its condition is true.,2
176,The block inside a do...while statement will execute at least once.,The loop of a do...while statement always executes once.,1
177,The block inside a do...while statement will execute at least once.,"a while statement will only process if the statement is met, while a do...while will always process once, then only continue if the statement is met.",2
178,The block inside a do...while statement will execute at least once.,"Do ...while runs the embedded code at least once, the do command does not necessarily",1
179,The block inside a do...while statement will execute at least once.,"While tests for true first before running, do...while runs once first before checking.",2
180,The block inside a do...while statement will execute at least once.,A do...while statement's body always executes at least once.  Where as a while statement will not execute at all unless the condition for the while is true.,2
181,The block inside a do...while statement will execute at least once.,The statements within the block of the do while loop will always be executed at least once regardless of the conditions. Whereas the while loops may never be executed if the conditions are not met.,2
182,The block inside a do...while statement will execute at least once.,"a do... while loop will always run through once, while an while loop performs a test before running through the loop.",2
183,The block inside a do...while statement will execute at least once.,A while statement tests the condition before it can start. A do...while statement loops through once before the condition is tested.,2
184,The block inside a do...while statement will execute at least once.,"A while loop terminates at the beginning of the loop, a do/while terminates at the end of the loop.",1
185,The block inside a do...while statement will execute at least once.,the loop body always executes at least once,1
186,The block inside a do...while statement will execute at least once.,"While loop evaluates its expression at the top of its loop and decides if it needs to execute, and the do-while always executes at least once and then evaluates its expression at the bottom of its loop.",2
187,The block inside a do...while statement will execute at least once.,"A do...while statement will always execute the ""do"" piece of code at least once before checking the condition. A while statement will always check the condition first.",2
188,The block inside a do...while statement will execute at least once.,"A do-while passes atleast 1 time before checking the condition, however, a while would fail to enter the loop if the condition fails in its first place.",2
189,The block inside a do...while statement will execute at least once.,"a while loop checks if the condition is true or not first, if it was true, it excutes the statement. a do.. while loop executes the statement before it checks the condition. if the condition was true it would excute the statement again. so a do...while loop would excute the statement atleast once.",2
190,The block inside a do...while statement will execute at least once.,NO ANSWER,0
191,The block inside a do...while statement will execute at least once.,"A do...while loop will always execute atleast once, a while loop may never   execute depending on teh conditions.",2
192,The block inside a do...while statement will execute at least once.,"a while loop is pre-check (it checks the condition statement before it executes the code within the while block)  a do while loop is post-check (it checks the condition AFTER the block executes, it runs at least once no matter what the condition statement is)",2
193,The block inside a do...while statement will execute at least once.,"))     What is the main difference between a while and a do...while statement? The do while construct consists of a block of code and a condition. First, the code within the block is executed, and then the condition is evaluated, this is done until it is proven false. The difference between the While loop is it tests the condition before the code within the block is executed. ",2
194,Data members (attributes) and member functions.,"For us it is usually a set, get, and displayMessge or other messages that tell you what properties a class has but does not reveal its implementations. You could have anything you want in your own class definition.",1
195,Data members (attributes) and member functions.,The attributes of said class. Also whether or not it is a subclass. Also whether it is public private or protected.,1
196,Data members (attributes) and member functions.,Information telling the compiler what data members and member functions belong to the class.,2
197,Data members (attributes) and member functions.,"Since class is user defined, the body of the declaration can contain members, that can be either data or function declarations, and optionally access specifiers.  Example for specifiers would be public, private, and protected.  There is the keyword Class and the Class body is enclosed with brackets ({}). ",2
198,Data members (attributes) and member functions.,An object and data.,1
199,Data members (attributes) and member functions.,"It's specific class name, includes only information defined by that class... implementation details... etc.",1
200,Data members (attributes) and member functions.,data members and member functions.,2
201,Data members (attributes) and member functions.,A class definition usually contains the function and its data members,2
202,Data members (attributes) and member functions.,Data members and member functions,2
203,Data members (attributes) and member functions.,member functions,1
204,Data members (attributes) and member functions.,Member functions and data members belonging to the class.,2
205,Data members (attributes) and member functions.,a public and private area that includes the functions and variables that are used in the class,1
206,Data members (attributes) and member functions.,"the keyword class followed by they class name, on the inside you declare public and private declarations of your class",1
207,Data members (attributes) and member functions.,A class definition typically includes function definitions.,1
208,Data members (attributes) and member functions.,"It begins with Class, followed by the class name, then usually a constructor, data members and member functions that delineates the class is included in any class's definition.",2
209,Data members (attributes) and member functions.,the data and methods,1
210,Data members (attributes) and member functions.,"A constructor, functions, and variables that are accessible to by that class, and possibly other classes depending on how they are done.",1
211,Data members (attributes) and member functions.,Member functions and data members.,2
212,Data members (attributes) and member functions.,"public section and private section, and there must be a semicolon to set the end",1
213,Data members (attributes) and member functions.,member funtions and data members,2
214,Data members (attributes) and member functions.,Data members and Member functions,2
215,Data members (attributes) and member functions.,data members and member functions,2
216,Data members (attributes) and member functions.,"the class name and its public data types such as constructors, methods, functions.",1
217,Data members (attributes) and member functions.,"a constructor and several data members, and at least one public data member or method",1
218,Data members (attributes) and member functions.,"class name, two curly prenthesis, public and private",1
219,Data members (attributes) and member functions.,Data and functions,1
220,Data members (attributes) and member functions.,functions and data members that belong to the class,2
221,Data members (attributes) and member functions.,"class variables, function definitions for the class",2
222,Data members (attributes) and member functions.,"A class is an expanded concept of a data structure, it holds both the data and the functions being executed ",1
223,Data members can be accessed from any member functions inside the class defintion. Local variables can only be accessed inside the member function that defines them.,Data members are the data components of a particular class.  A member function are the functioning components of the class.,1
224,Data members can be accessed from any member functions inside the class defintion. Local variables can only be accessed inside the member function that defines them.,A field variable is a variable that is declared as a member of a class. A local variable is avariable that isdeclared local to a method.,1
225,Data members can be accessed from any member functions inside the class defintion. Local variables can only be accessed inside the member function that defines them.,"Data members are declared inside the class, but outside of any member functions. Unlike with local variables, each object of the class keeps its own copy of the data members stored in memory.",1
226,Data members can be accessed from any member functions inside the class defintion. Local variables can only be accessed inside the member function that defines them.,Data member are variables that represent an attribute in a class definition.  Local variables declared in a function body cannot be used outside of that function body.  When a function terminates the values of its local variables are lost.,1
227,Data members can be accessed from any member functions inside the class defintion. Local variables can only be accessed inside the member function that defines them.,A local variable cannot be accessed outside the function in which it is declared. Data members normally are private. Variables of functions declared private are accessible only to member functions of the class in which they are declared.,2
228,Data members can be accessed from any member functions inside the class defintion. Local variables can only be accessed inside the member function that defines them.,"A data member is part of a C++ class or structure that stores data of a certain type... A local variable inside a member function is only available inside that function, and can be used to derive a desired outcome.",1
229,Data members can be accessed from any member functions inside the class defintion. Local variables can only be accessed inside the member function that defines them.,A local variable can only be accessed within the scope of its declaration.,1
230,Data members can be accessed from any member functions inside the class defintion. Local variables can only be accessed inside the member function that defines them.,Data members are the atributes of the function and can be used outside the function. Local variable can not be used outside the function and the value is lost after the function terminates.,1
231,Data members can be accessed from any member functions inside the class defintion. Local variables can only be accessed inside the member function that defines them.,"data members are permanent attributes of the class, local variables inside a member function are lost when the scope of the member function ends.",1
232,Data members can be accessed from any member functions inside the class defintion. Local variables can only be accessed inside the member function that defines them.,data members are declared in a class definition but outside the bodies of a class's member-function definitions. Local variables are declared in a function definition's body,1
233,Data members can be accessed from any member functions inside the class defintion. Local variables can only be accessed inside the member function that defines them.,"A data member is globally accessible, while a local variable is only accessible inside the member function.",1
234,Data members can be accessed from any member functions inside the class defintion. Local variables can only be accessed inside the member function that defines them.,A variable inside a member function can only be accessed inside that member and a data member can be accessed throughought the program.,2
235,Data members can be accessed from any member functions inside the class defintion. Local variables can only be accessed inside the member function that defines them.,Local variables are used only within the scope of its declaration,1
236,Data members can be accessed from any member functions inside the class defintion. Local variables can only be accessed inside the member function that defines them.,"A data member is a more general term describing all objects instantiated within a member function.  ""Local"" in local variables refers more to the scope of a variable, which may be located in anything from a control structure to a class.  Local variables whose scope are in a member function are the same as data members of member functions.",1
237,Data members can be accessed from any member functions inside the class defintion. Local variables can only be accessed inside the member function that defines them.,A data member exists permanently in that program's memory as long as it's run.  A local variable inside a member function is temporal and only used to operate in the function and exists as long as the function is run.,1
238,Data members can be accessed from any member functions inside the class defintion. Local variables can only be accessed inside the member function that defines them.,"local variables can only be used within the function, where as data members can be set to public access and can be used throughout",2
239,Data members can be accessed from any member functions inside the class defintion. Local variables can only be accessed inside the member function that defines them.,"The local variable is lost once it exits the block of code, while the data member is not.",1
240,Data members can be accessed from any member functions inside the class defintion. Local variables can only be accessed inside the member function that defines them.,Every member function can access and modify a data member. A local variable can only be used from the line of declaration to the next closing } before it is lost from memory.,1
241,Data members can be accessed from any member functions inside the class defintion. Local variables can only be accessed inside the member function that defines them.,"data member is accessible to all functions in the class, where local variable is only available to the member function and value is lost when function closes",2
242,Data members can be accessed from any member functions inside the class defintion. Local variables can only be accessed inside the member function that defines them.,Data members are variables that are declared inside the class definition but outside of the bodies of the class member functions. Local variables can only be used within the function declaration.,1
243,Data members can be accessed from any member functions inside the class defintion. Local variables can only be accessed inside the member function that defines them.,"The data member can be accessed outside of the class, whereas the local variable cannot.",1
244,Data members can be accessed from any member functions inside the class defintion. Local variables can only be accessed inside the member function that defines them.,"Local variables cannot be used outside of that function body. When a function terminates the values of its local variables are lost. Where as data members are variables in a class definition, and they exist throughout the life of the object. ",2
245,Data members can be accessed from any member functions inside the class defintion. Local variables can only be accessed inside the member function that defines them.,a local variable in a member function has to be static. a data member can change its value freely.,1
246,Data members can be accessed from any member functions inside the class defintion. Local variables can only be accessed inside the member function that defines them.,"a local variable is only useable within the function it is defined, whereas a data member is available to any method within its class",2
247,Data members can be accessed from any member functions inside the class defintion. Local variables can only be accessed inside the member function that defines them.,Variable declared in a function defination's body cannot be used outside of that function.  Data members accessible only to member function of that class.,2
248,Data members can be accessed from any member functions inside the class defintion. Local variables can only be accessed inside the member function that defines them.,"data members   local variables are declared in a function definition’s body. they Cannot be used outside of that function body. When a function terminates, the values of its local variables are lost.   ",1
249,Data members can be accessed from any member functions inside the class defintion. Local variables can only be accessed inside the member function that defines them.,local variable is only available in the function.,1
250,Data members can be accessed from any member functions inside the class defintion. Local variables can only be accessed inside the member function that defines them.,local variables are accessed inside member functions only while data members   can be accessed throughout the class,1
251,Data members can be accessed from any member functions inside the class defintion. Local variables can only be accessed inside the member function that defines them.,"A data member is accessible anywhere in the class, while i local variable in a member function is only accessible in that particular function, and is freed after the function exits.",2
252,Data members can be accessed from any member functions inside the class defintion. Local variables can only be accessed inside the member function that defines them.,"a Data member is encapsulated within a class or object,  it is static and can be shared by all instances of that class.  however local variable's are only used from the function or block in which it is declared and not the whole class. other wise they would be called global variables. ",1
253,"A constructor is called whenever an object is created, whereas a function needs to be called explicitely. Constructors do not have return type, but functions have to indicate a return type.",A constructor initializes an object or objects of a class.  A function of a class performs a task such as display a line of text or do some kind of mathematical operations.,1
254,"A constructor is called whenever an object is created, whereas a function needs to be called explicitely. Constructors do not have return type, but functions have to indicate a return type.","all constructors are functions but not all functions are constructors. Also functions can have nearly infinite purposes, while constructors always create an instance of whichever class you are using. You can change how a constructor does something but not what it does. With functions you can change not only the how but also the what.",1
255,"A constructor is called whenever an object is created, whereas a function needs to be called explicitely. Constructors do not have return type, but functions have to indicate a return type.","Unlike regular functions, constructors are only used to initialize an object’s data when it is created. Constructors must also be given the same name as the class and cannot return any values. ",2
256,"A constructor is called whenever an object is created, whereas a function needs to be called explicitely. Constructors do not have return type, but functions have to indicate a return type.","A constructor typically used to intialize data members and allocate resources, for instance memory, files, etc.  Also a constructor cannot return values.  Functions are operations that maybe globally defined.",1
257,"A constructor is called whenever an object is created, whereas a function needs to be called explicitely. Constructors do not have return type, but functions have to indicate a return type.","Constructors cannot return values, so they cannot specify a return type. Normally, constructors are declared public.",1
258,"A constructor is called whenever an object is created, whereas a function needs to be called explicitely. Constructors do not have return type, but functions have to indicate a return type.",A constructor is a method that starts new instances of a class. (Example: Employee employee1(parameters) starts a new instance of object of type Employee). A function is simply a module w/in a program that completes its single desired task.,1
259,"A constructor is called whenever an object is created, whereas a function needs to be called explicitely. Constructors do not have return type, but functions have to indicate a return type.",A constructor is called whenever a new object of that class is made.,1
260,"A constructor is called whenever an object is created, whereas a function needs to be called explicitely. Constructors do not have return type, but functions have to indicate a return type.",A constructor does not return any date and has no return type.  Functions can return date or not return data can have a return type.,1
261,"A constructor is called whenever an object is created, whereas a function needs to be called explicitely. Constructors do not have return type, but functions have to indicate a return type.","A constructor is automatically called whenever an instance of a class is created, a function must be explicitly called by the user. ",1
262,"A constructor is called whenever an object is created, whereas a function needs to be called explicitely. Constructors do not have return type, but functions have to indicate a return type.","constructors cannot return values, so they cannot specify a return type like functions can.",1
263,"A constructor is called whenever an object is created, whereas a function needs to be called explicitely. Constructors do not have return type, but functions have to indicate a return type.",A constructor is a function used to initialize an object's data when it is created.,1
264,"A constructor is called whenever an object is created, whereas a function needs to be called explicitely. Constructors do not have return type, but functions have to indicate a return type.",a constructor initialises everything so that nothing is left empty or with random varioubles and a function modifies those variables with data.,1
265,"A constructor is called whenever an object is created, whereas a function needs to be called explicitely. Constructors do not have return type, but functions have to indicate a return type.",A constructor initialized values at the execution of its instantiation. It provides default values.,1
266,"A constructor is called whenever an object is created, whereas a function needs to be called explicitely. Constructors do not have return type, but functions have to indicate a return type.","A constructor sets up the default values of variables when an object is instantiated, whereas a function allows interaction with that object.",1
267,"A constructor is called whenever an object is created, whereas a function needs to be called explicitely. Constructors do not have return type, but functions have to indicate a return type.","A constructor is used to create an object that can be employed in the main function of a program.  This may or may not execute code along with it.  A function is a set of code that executes when called, but does not create a new object.",1
268,"A constructor is called whenever an object is created, whereas a function needs to be called explicitely. Constructors do not have return type, but functions have to indicate a return type.",a constructor initializes data members but the functions actually perform tasks. Constructors cant return values either.,1
269,"A constructor is called whenever an object is created, whereas a function needs to be called explicitely. Constructors do not have return type, but functions have to indicate a return type.","a constructor does not need a type, and it is used to initialize the variables.",1
270,"A constructor is called whenever an object is created, whereas a function needs to be called explicitely. Constructors do not have return type, but functions have to indicate a return type.",Constructors don't have a return type.,1
271,"A constructor is called whenever an object is created, whereas a function needs to be called explicitely. Constructors do not have return type, but functions have to indicate a return type.",constructor creates the class object into memory where functions perform actions against that object,1
272,"A constructor is called whenever an object is created, whereas a function needs to be called explicitely. Constructors do not have return type, but functions have to indicate a return type.",constructors cannot return values,1
273,"A constructor is called whenever an object is created, whereas a function needs to be called explicitely. Constructors do not have return type, but functions have to indicate a return type.",A constructor initializes values and a function usual performs some sort of operation.,1
274,"A constructor is called whenever an object is created, whereas a function needs to be called explicitely. Constructors do not have return type, but functions have to indicate a return type.",A constructor is a function used to initialize an object's data when it is created. It's call is made implicitly when the object is created and must be defined with the same name as the class. Constructor also cannot return a value like a function can.,2
275,"A constructor is called whenever an object is created, whereas a function needs to be called explicitely. Constructors do not have return type, but functions have to indicate a return type.",A constructor is used to create an instance of a class and has the same name as that class. A function cannot have the same name as a class and computes data.,1
276,"A constructor is called whenever an object is created, whereas a function needs to be called explicitely. Constructors do not have return type, but functions have to indicate a return type.","a constructor is a function that initializes a class instance, a function performs whatever task it is written for",1
277,"A constructor is called whenever an object is created, whereas a function needs to be called explicitely. Constructors do not have return type, but functions have to indicate a return type.","A constructor cannot return values, not even void, but function get a return value.",1
278,"A constructor is called whenever an object is created, whereas a function needs to be called explicitely. Constructors do not have return type, but functions have to indicate a return type.","a constructor cannot return values, its not even void. it is used to initialize an object's data when it is created. whereas, a function is created to do a specific task, and it can return values.",2
279,"A constructor is called whenever an object is created, whereas a function needs to be called explicitely. Constructors do not have return type, but functions have to indicate a return type.",A constructor initializes an object. A function is part of an object.,1
280,"A constructor is called whenever an object is created, whereas a function needs to be called explicitely. Constructors do not have return type, but functions have to indicate a return type.",constructors initialize the data that is then used in the calculations of a   function,1
281,"A constructor is called whenever an object is created, whereas a function needs to be called explicitely. Constructors do not have return type, but functions have to indicate a return type.","a constructor is called when the class is created, a function can be called any time.",1
282,"A constructor is called whenever an object is created, whereas a function needs to be called explicitely. Constructors do not have return type, but functions have to indicate a return type.","constructor is a special block of statements called when an object is created, either when it is declared statically or constructed on the stack. However a function is a portion of code within a larger program, which performs a specific task and independent to the rest of the code. ",1
283,"If no constructor is provided, the compiler provides one by default. If a constructor is defined for a class, the compiler does not create a default constructor.",The compiler creates a default constructor when we do not define one in our class file,2
284,"If no constructor is provided, the compiler provides one by default. If a constructor is defined for a class, the compiler does not create a default constructor.",during compilation,1
285,"If no constructor is provided, the compiler provides one by default. If a constructor is defined for a class, the compiler does not create a default constructor.",When the class does not explicitly include a constructor.,2
286,"If no constructor is provided, the compiler provides one by default. If a constructor is defined for a class, the compiler does not create a default constructor.",When no parameters are set is when a default constructor is used.,1
287,"If no constructor is provided, the compiler provides one by default. If a constructor is defined for a class, the compiler does not create a default constructor.",When a class does not explicitly include a constructor.,2
288,"If no constructor is provided, the compiler provides one by default. If a constructor is defined for a class, the compiler does not create a default constructor.",When there are no arguments passed.,0
289,"If no constructor is provided, the compiler provides one by default. If a constructor is defined for a class, the compiler does not create a default constructor.",when there is not one already for a specific class,2
290,"If no constructor is provided, the compiler provides one by default. If a constructor is defined for a class, the compiler does not create a default constructor.",When it the programs compiles,1
291,"If no constructor is provided, the compiler provides one by default. If a constructor is defined for a class, the compiler does not create a default constructor.",when a constructor is not provided by the programmer of the class,2
292,"If no constructor is provided, the compiler provides one by default. If a constructor is defined for a class, the compiler does not create a default constructor.",In any class that does not explicitly include a constructor.,2
293,"If no constructor is provided, the compiler provides one by default. If a constructor is defined for a class, the compiler does not create a default constructor.",Before the main function of the code.,0
294,"If no constructor is provided, the compiler provides one by default. If a constructor is defined for a class, the compiler does not create a default constructor.",whenevery you dont specifiy your own,2
295,"If no constructor is provided, the compiler provides one by default. If a constructor is defined for a class, the compiler does not create a default constructor.",When non are provided,2
296,"If no constructor is provided, the compiler provides one by default. If a constructor is defined for a class, the compiler does not create a default constructor.",C++ will create a default constructor when no other constructor is present.,2
297,"If no constructor is provided, the compiler provides one by default. If a constructor is defined for a class, the compiler does not create a default constructor.","When no constructor was specified in the constructor's class, but the class is instantiated in a program.",2
298,"If no constructor is provided, the compiler provides one by default. If a constructor is defined for a class, the compiler does not create a default constructor.","When no constructor exists when one is needed, a parameterless default constructor is declared.",2
299,"If no constructor is provided, the compiler provides one by default. If a constructor is defined for a class, the compiler does not create a default constructor.","The Compiler creates this automatically for you, unless you specifically create one.",2
300,"If no constructor is provided, the compiler provides one by default. If a constructor is defined for a class, the compiler does not create a default constructor.",In any class that doesn't explicitly include a constructor.,2
301,"If no constructor is provided, the compiler provides one by default. If a constructor is defined for a class, the compiler does not create a default constructor.",when no user-defined constructor exists,2
302,"If no constructor is provided, the compiler provides one by default. If a constructor is defined for a class, the compiler does not create a default constructor.","If a class does not explicitly include a constructor, the compiler creates one.",2
303,"If no constructor is provided, the compiler provides one by default. If a constructor is defined for a class, the compiler does not create a default constructor.",When you do not provide your own constructor.,2
304,"If no constructor is provided, the compiler provides one by default. If a constructor is defined for a class, the compiler does not create a default constructor.",C++ creates a default constructor during compilation if one is not provided.,2
305,"If no constructor is provided, the compiler provides one by default. If a constructor is defined for a class, the compiler does not create a default constructor.",when a class does not explicitly include a constructor,2
306,"If no constructor is provided, the compiler provides one by default. If a constructor is defined for a class, the compiler does not create a default constructor.",The compiler will provide one when class does not explictly include a consructor.,2
307,"If no constructor is provided, the compiler provides one by default. If a constructor is defined for a class, the compiler does not create a default constructor.",when the programmer does not explicitly include a constructor,2
308,"If no constructor is provided, the compiler provides one by default. If a constructor is defined for a class, the compiler does not create a default constructor.",When one is not explicitly stated.,2
309,"If no constructor is provided, the compiler provides one by default. If a constructor is defined for a class, the compiler does not create a default constructor.",when one is not explicitly included by a class,2
310,"If no constructor is provided, the compiler provides one by default. If a constructor is defined for a class, the compiler does not create a default constructor.",When you dont specify any constructors.,2
311,"If no constructor is provided, the compiler provides one by default. If a constructor is defined for a class, the compiler does not create a default constructor.","at the very beginning when you run a complier, matter a fact in C++ it generates its own default constructor for the class provided if no other constructors have been provided by user",2
312,Unlimited number.,Just one per class.,0
313,Unlimited number.,As many as you want so long as they have different parameters.,2
314,Unlimited number.,"There is no limit to the number of constructors in a class because like functions, constructors can be overloaded.",2
315,Unlimited number.,It depends what type of class is being defined.  Typically you would have a constructor call for each object.,0
316,Unlimited number.,"In C++, the constructor can be overloaded in that there can be more than one constructor for a class, each having different parameters.",2
317,Unlimited number.,1,0
318,Unlimited number.,any number you want,2
319,Unlimited number.,One,0
320,Unlimited number.,"by default just one, but they may be overloaded to create as many constructors as necessary",2
321,Unlimited number.,as many as you want,2
322,Unlimited number.,"As many as you want, with different parameters.",2
323,Unlimited number.,infinite,2
324,Unlimited number.,as many as you need,2
325,Unlimited number.,"As many as are needed, depending on how many variables one wishes to directly modify or leave as default when instantiating an object.",2
326,Unlimited number.,"A very large amount of constructors can be created for any given class through overloading.  When two constructors with a different type or number of parameters are created, they are said to be overloaded, and C++ can recognize which constructor to use based on the type of the variables that are passed/returned.",2
327,Unlimited number.,It depends on the number of objects. Each object should have a constructor.,1
328,Unlimited number.,"Theoretically unlimited, as long as they are defined by the programmer.",2
329,Unlimited number.,As many as needed.,2
330,Unlimited number.,as many as wanted/needed,2
331,Unlimited number.,several,1
332,Unlimited number.,one,0
333,Unlimited number.,There can be infinite constructors as long as the signature is different.,2
334,Unlimited number.,that depends on the number of data members in the class,0
335,Unlimited number.,you can overload constructors as you need,2
336,Unlimited number.,As many as the programmer wants to create.,2
337,Unlimited number.,"as many as you want, as long as they each have a unique argument list",2
338,Unlimited number.,as many as the user decides to use.,2
339,"A function prototype includes the function signature, i.e., the name of the function, the return type, and the parameters' type. The function definition includes the actual body of the function.",A function definition does not require any additional information that needs to be passed inside its parenthesis  to execute. While a definition prototype requires more than one parameters to be passed in order to complete its  task.,1
340,"A function prototype includes the function signature, i.e., the name of the function, the return type, and the parameters' type. The function definition includes the actual body of the function.","The FUNCTION PROTOTYPE is where the programmer declares that he/she is using a function other than main( ). This is like declaring a variable, the programmer knows that he/she will be using in the future, but has yet to say where they are going to use it, or how. This is answers the question who, it gives the function a name and character. The function prototype, by common practice is placed at the beginning of the program after the #includes and before main( ). The FUNCTION DEFINITION is the guts of the function. This is where the programmer decides what the function is going to do and tells it how to do it. It takes whatever information it is given and performs the operations. It works sort of like the brain, the brain takes in input and based upon that input performs in some way producing an output. The function defintion is placed outside of main( ) and any other functions. A function is its own entity and should be thought of as such.",1
341,"A function prototype includes the function signature, i.e., the name of the function, the return type, and the parameters' type. The function definition includes the actual body of the function.","A function prototype tells the compiler the function name, return type and the number and type of parameters without revealing the implementations contained in the function definition.",2
342,"A function prototype includes the function signature, i.e., the name of the function, the return type, and the parameters' type. The function definition includes the actual body of the function.",Function prototype is a declaration.  Function definitions (w/multiple parameters) often require more than one piece of information. to perform their tasks.,1
343,"A function prototype includes the function signature, i.e., the name of the function, the return type, and the parameters' type. The function definition includes the actual body of the function.","A function prototype is a declaration of a function that tells the compiler the function's name, its return type and the types of its parameters.",2
344,"A function prototype includes the function signature, i.e., the name of the function, the return type, and the parameters' type. The function definition includes the actual body of the function.",A prototype shows only return types and necessary parameters. The definition includes names for those parameters and defines what the object is actually capable of doing.,1
345,"A function prototype includes the function signature, i.e., the name of the function, the return type, and the parameters' type. The function definition includes the actual body of the function.",prototype only tells the user what data types go into a function and what type is returned.,1
346,"A function prototype includes the function signature, i.e., the name of the function, the return type, and the parameters' type. The function definition includes the actual body of the function.",Function prototype is located in the .h file and only contains the access function name and paramater type.  Function definition contains the code for the function to perform its activity.,1
347,"A function prototype includes the function signature, i.e., the name of the function, the return type, and the parameters' type. The function definition includes the actual body of the function.","a function prototype is used to reference the compiler to a function that will be defined later on, a function definition is the actual function itself, complete with return type, parameters, etc...",1
348,"A function prototype includes the function signature, i.e., the name of the function, the return type, and the parameters' type. The function definition includes the actual body of the function.",A function prototype describes a class's public interface without revealing the class's member function implementations,1
349,"A function prototype includes the function signature, i.e., the name of the function, the return type, and the parameters' type. The function definition includes the actual body of the function.","Function definitions are just that, the definition. The prototype is what the compiler uses to check that calls to function are correct.",1
350,"A function prototype includes the function signature, i.e., the name of the function, the return type, and the parameters' type. The function definition includes the actual body of the function.",a prototype does not include any actual code where the function has all the code that is executed in the program.,1
351,"A function prototype includes the function signature, i.e., the name of the function, the return type, and the parameters' type. The function definition includes the actual body of the function.",a prototype declares what will be used in the program and the definition,1
352,"A function prototype includes the function signature, i.e., the name of the function, the return type, and the parameters' type. The function definition includes the actual body of the function.","A function prototype lays out the name, return type, and the number and types of parameters the function expects to receive in a certain order.  The details for function prototypes are in the function definition.",2
353,"A function prototype includes the function signature, i.e., the name of the function, the return type, and the parameters' type. The function definition includes the actual body of the function.","A function definition is the code that defines the function placed in the {} brackets that determines that function's operation.  A function prototype shows the function's public interface without exposing implementation.  It shows name, return type and type of paramaters.",2
354,"A function prototype includes the function signature, i.e., the name of the function, the return type, and the parameters' type. The function definition includes the actual body of the function.","A function prototype is just a declaration of the function existing, and cant be used as an actual function. A function has to be created with a definition within to tell the compiler what the function does.",1
355,"A function prototype includes the function signature, i.e., the name of the function, the return type, and the parameters' type. The function definition includes the actual body of the function.",the Prototype creates a framework to call the function definition. While a function definition is where the function is actually programmed out and created into a final product.,1
356,"A function prototype includes the function signature, i.e., the name of the function, the return type, and the parameters' type. The function definition includes the actual body of the function.",A function prototype describes the class's public interface without providing how the function works. A function definition contains the inner workings of the function.,1
357,"A function prototype includes the function signature, i.e., the name of the function, the return type, and the parameters' type. The function definition includes the actual body of the function.","prototype states all functions in that class before compilation, where the definition actually holds the source for the functions",1
358,"A function prototype includes the function signature, i.e., the name of the function, the return type, and the parameters' type. The function definition includes the actual body of the function.","Function prototypes tell the compiler the function names, its return type, and the types of its parameters where as, function definitions actually implement the member functions.",2
359,"A function prototype includes the function signature, i.e., the name of the function, the return type, and the parameters' type. The function definition includes the actual body of the function.",A function prototype just specifies parameters.  A function definition includes parameters and a code body.,1
360,"A function prototype includes the function signature, i.e., the name of the function, the return type, and the parameters' type. The function definition includes the actual body of the function.",Function prototypes describe the class's public interface,1
361,"A function prototype includes the function signature, i.e., the name of the function, the return type, and the parameters' type. The function definition includes the actual body of the function.","A prototype only declares name, return type, and input type. A definition also defines the scope, variables, process, and return function ",1
362,"A function prototype includes the function signature, i.e., the name of the function, the return type, and the parameters' type. The function definition includes the actual body of the function.","a function prototype simply declares the functions parameters, the function definition includes any necessary variables and the function's actual code",1
363,"A function prototype includes the function signature, i.e., the name of the function, the return type, and the parameters' type. The function definition includes the actual body of the function.","A functgion prototype is a declaration of a function , while function definition specifies what a function does",1
364,"A function prototype includes the function signature, i.e., the name of the function, the return type, and the parameters' type. The function definition includes the actual body of the function.","in a function prototype you include the return type, the name of the function, and its parameters if any are needed.  in a function definition you write the code of what the function will do. ",2
365,"A function prototype includes the function signature, i.e., the name of the function, the return type, and the parameters' type. The function definition includes the actual body of the function.","A function definition contains all the code for a function to work. A function prototype just shows the output, input and function name.",1
366,"A function prototype includes the function signature, i.e., the name of the function, the return type, and the parameters' type. The function definition includes the actual body of the function.","function prototype describe the class's public interface without revealing   the class's member function implementations,  function definitions show what   implementations are being done",1
367,"A function prototype includes the function signature, i.e., the name of the function, the return type, and the parameters' type. The function definition includes the actual body of the function.","A function prototype only names the function, its return type, and it's argument list, while a definition defines the above as well as what the function actually does.",2
368,"A function prototype includes the function signature, i.e., the name of the function, the return type, and the parameters' type. The function definition includes the actual body of the function.",function prototype describes a classes interface without reviling whatever is inside as for the function definition can't do that.,1
369,"To store a class interface, including data members and member function prototypes.",the role of a header file list all the functions a class can do while hiding the inner workings of its functions,1
370,"To store a class interface, including data members and member function prototypes.",The main role of header file is it is used to share information among various files.,1
371,"To store a class interface, including data members and member function prototypes.",Header files separate files in which classes are defined and allow the compiler to recognize classes when used elsewhere.,1
372,"To store a class interface, including data members and member function prototypes.",No,0
373,"To store a class interface, including data members and member function prototypes.","A header file consists of ""reusable"" source code such as a class in a file that by convention has a .h filename extension. This differs from .cpp files that contain ""source-code.""",1
374,"To store a class interface, including data members and member function prototypes.","To provide information about the contents of a library. It includes the definition of classes, declarations of functions, data types, and constants.",1
375,"To store a class interface, including data members and member function prototypes.",the header file shows the user what types go into and come out of a function but does not allow a user to manipulate the actual code for the function.,1
376,"To store a class interface, including data members and member function prototypes.",Header files declares the class member functions.,1
377,"To store a class interface, including data members and member function prototypes.",A header file allows for the separation of declaration and implementation into separate files.,1
378,"To store a class interface, including data members and member function prototypes.",the header file has access to the C++ Standard Library and makes certain classes like class string work.,0
379,"To store a class interface, including data members and member function prototypes.",“Instruct” the compiler on how to interface with library and user-written components.,1
380,"To store a class interface, including data members and member function prototypes.",create a comon area to contain reusable functions.,1
381,"To store a class interface, including data members and member function prototypes.",to declare the functions being used in the classes,1
382,"To store a class interface, including data members and member function prototypes.","#include ""hat.h""  allows the use of the hat container, so called from the act of pulling names from a hat.  The header file for hat includes functions for storage and retrieval of it's contents, mainly put(), peek(), and pull().",0
383,"To store a class interface, including data members and member function prototypes.",To hold reusable content or modules separate from the actual  source-code file that can be easily referenced and employed for different programs.,1
384,"To store a class interface, including data members and member function prototypes.",a header file is a file used to store a list of prototye functions and data members.,2
385,"To store a class interface, including data members and member function prototypes.","A header file is a cross communication method between source files, to help limit the size of each individual program. Without header files a program will be 1 large lump of code and thus fairly hard to debug and traverse.",1
386,"To store a class interface, including data members and member function prototypes.",It contains reusable source code for use by other classes.,1
387,"To store a class interface, including data members and member function prototypes.","to separate the source code from the main function, allows the methods/classes to be included in the program without direct coding. allows re usability.",1
388,"To store a class interface, including data members and member function prototypes.",Header files have reusable source code in a file that a programer can use.,1
389,"To store a class interface, including data members and member function prototypes.",To hide the definition and details of a class.  Also to help readability of the main C++ file.,1
390,"To store a class interface, including data members and member function prototypes.",To allow the compiler to recognize the classes when used elsewhere.,1
391,"To store a class interface, including data members and member function prototypes.","A header file declares a class, its data, and functions available through that class.",1
392,"To store a class interface, including data members and member function prototypes.",header files contain code which can be used in multiple files,1
393,"To store a class interface, including data members and member function prototypes.",Allow compiler to recognize the classes when used elsewhere,1
394,"To store a class interface, including data members and member function prototypes.",To promote function reusuablitly,1
395,"To store a class interface, including data members and member function prototypes.",class definitions are placed here,1
396,"To store a class interface, including data members and member function prototypes.",A header file usually contains class and/or function prototypes.,1
397,"To store a class interface, including data members and member function prototypes.",contains all the standard C++ library's i.e. string,0
398,The name of the function and the types of the parameters.,"It includes the name of the program, the type of parameters it can take. It should also include a brief description of what the function does.",1
399,The name of the function and the types of the parameters.,it includes the specific information about the function such as input and output variable types and how many of each.,1
400,The name of the function and the types of the parameters.,The function signature includes the name of the function and the types of its arguments.,2
401,The name of the function and the types of the parameters.,"A function signature consists of the function prototype.  This tells you the general information about a function, its name, parameters, what scope it is in, and other miscellaneous information.",1
402,The name of the function and the types of the parameters.,It includes the name of the function and the types of its arguments.,2
403,The name of the function and the types of the parameters.,"Name, paramaters, scope, and other general function information",1
404,The name of the function and the types of the parameters.,It includes a function name and parameter list. Does not include return type. Function signatures must be different.,2
405,The name of the function and the types of the parameters.,input parameters and return type,1
406,The name of the function and the types of the parameters.,The portion of the function prototyp tha has the function name and the arguments but NOT the return type.,2
407,The name of the function and the types of the parameters.,Name of the function and the types of it's arguments,2
408,The name of the function and the types of the parameters.,The name of the function and the types of its arguments.,2
409,The name of the function and the types of the parameters.,Includes the name of the function and the types of its arguments.,2
410,The name of the function and the types of the parameters.,"identification of a function and the data types of its parameters, it has the name, and the data type variables ",2
411,The name of the function and the types of the parameters.,"a return type, and input parameters",1
412,The name of the function and the types of the parameters.,The function signature includes the method name and the input types.,2
413,The name of the function and the types of the parameters.,"A function signature includes the name of the function and types of arguments, but not the return type.  ",2
414,The name of the function and the types of the parameters.,The signature can include a result type and thrown errors.,1
415,The name of the function and the types of the parameters.,"function name, and input paramaters",2
416,The name of the function and the types of the parameters.,"The name of the function and the types of its arguments. This includes the number, type, and order the parameters appear in.",2
417,The name of the function and the types of the parameters.,the name of the function and the types of its arguments,2
418,The name of the function and the types of the parameters.,A function signature includes the name of the function and the types of its arguments,2
419,The name of the function and the types of the parameters.,"A function signature includes a function's return type, parameters and semi-colon.",1
420,The name of the function and the types of the parameters.,the function's name and parameters,2
421,The name of the function and the types of the parameters.,The portion of a function prototype that includes the name of the function and the types of its arguments,2
422,The name of the function and the types of the parameters.,the name of the function and its parameters,2
423,The name of the function and the types of the parameters.,The function name and parameters,2
424,The name of the function and the types of the parameters.,name of function and types of arguments,2
425,The name of the function and the types of the parameters.,a function's return type and parameter list,1
426,The name of the function and the types of the parameters.,"it includes the name of the function, and the types of its arguments. it does not specify the function return type. Function in the same scope must have unqiue signatures. ",2
427,File scope.,Any functions that follows their deceleration that  are in the source code file are allowed to have access the variables.  Also global scope variables retrain their value throughout the execution of the program.,2
428,File scope.,they can be accessed by any C++ file anywhere.,1
429,File scope.,Global variables have file scope.,2
430,File scope.,The scope of global variables are created by placing variable declarations outside any class or function definition.  Global variables retain their values throughout the execution of the program and they can be referenced by any function that follows their declarations or definitions in the source file.,1
431,File scope.,A global variable is an identifier that retains it's value throughout the execution of the program. It has file scope.,2
432,File scope.,Global Variables can be used in any function as long as the appropriate .h file that holds the variable is included,1
433,File scope.,They can be accessed by any part of the program. It can be referenced by any function that follows the declarations or definitions in the source file.,2
434,File scope.,can be accesed by any classes that have and object of that variables class in it,1
435,File scope.,Global variables have file-scope.  The variable is know to all functions throught the file,2
436,File scope.,The entire program,1
437,File scope.,They have file scope when placed outside a function.,2
438,File scope.,File scope.,2
439,File scope.,They can be used throughout the program,1
440,File scope.,Global variable can b accessed by any class wit an object in the variables class,1
441,File scope.,The scope of global variables is at the file level.,2
442,File scope.,Global variables all have file scope.,2
443,File scope.,it is accessible by all functions within a program,1
444,File scope.,"variables accessible anywhere in the program, as long as they are public.",1
445,File scope.,They can be referenced by any function following their declaration or definition inside the source file.,2
446,File scope.,"globally, anywhere in the program.",1
447,File scope.,Global variables have a file scope,2
448,File scope.,The entire program.,1
449,File scope.,throughout the execution of the program,1
450,File scope.,"If a variable is declared global, any function or class can use that variable.",1
451,File scope.,The entire program or file.,2
452,File scope.,throught the programm,1
453,File scope.,the whole code,1
454,File scope.,File scope,2
455,File scope.,can be referenced by any function that follows their declarations or definitions in the source file,2
456,File scope.,global variables have program scope (accessible anywhere in program),1
457,File scope.,variables that exist throught the entire script. their values can be changed anytime in the code and fucntions.,1
458,It makes a copy of the function code in every place where a function call is made.,It expands the function's definition in that place.  Once the functions is called you can use it as many times as you need.  The compiler just expands on the function.,1
459,It makes a copy of the function code in every place where a function call is made.,"When the compiler inline-expands a function call, the function's code gets inserted into the caller's code stream (conceptually similar to what happens with a #define macro). This can, depending on a zillion other things, improve performance, because the optimizer can procedurally integrate the called code — optimize the called code into the caller.   ",1
460,It makes a copy of the function code in every place where a function call is made.,The inline keyword advises the compiler to copy the function's code in place to avoid function calls; however the compiler can and typically does ignore the inline qualifier for all but the smallest functions.,2
461,It makes a copy of the function code in every place where a function call is made.,The compiler can ignore the inline qualifier and typically does so for all but the smallest functions.,1
462,It makes a copy of the function code in every place where a function call is made.,"Placing the qualifier inline before a function's return type in the function definition ""advises"" the compiler to generate a copy of the function's code in place to avoid a function call.",2
463,It makes a copy of the function code in every place where a function call is made.,You declare your inline function in the header or before your int main(). You then can call that function at anytime in your main program quickly and easily.,1
464,It makes a copy of the function code in every place where a function call is made.,"It expands a small function out... making your code longer, but also makes it run faster.",1
465,It makes a copy of the function code in every place where a function call is made.,the function is not treated as a separate unit like other functions,1
466,It makes a copy of the function code in every place where a function call is made.,"When the program compiles,it will copy the function inplace, avoiding a function call.",2
467,It makes a copy of the function code in every place where a function call is made.,"It replaces all instances of that function call with the inline code itself, resulting in longer but faster programs.",2
468,It makes a copy of the function code in every place where a function call is made.,Ignores the inline qualifier and typically does so for all but the smallest functions.,1
469,It makes a copy of the function code in every place where a function call is made.,If the function is small enough it will expand it but it will run faster as it will avoid making so many calls to the function.,1
470,It makes a copy of the function code in every place where a function call is made.,it treats them as the same function,1
471,It makes a copy of the function code in every place where a function call is made.,"Inline functions are copied in place, instead of being referenced.",2
472,It makes a copy of the function code in every place where a function call is made.,"For inline functions, the compiler creates a copy of the function's code in place so it doesn't have to make a function call and add to the function call stack.",2
473,It makes a copy of the function code in every place where a function call is made.,it generates a copy of the function's coding which eliminates calling the function,2
474,It makes a copy of the function code in every place where a function call is made.,not answered,0
475,It makes a copy of the function code in every place where a function call is made.,It generates a copy of the function's code by by inserting it in the program.,1
476,It makes a copy of the function code in every place where a function call is made.,"tells the compiler to make a copy of function's code in place to avoid a function call.  it typically ignores it, except for the smallest functions.",2
477,It makes a copy of the function code in every place where a function call is made.,"Multiple copies of the function code are inserted into the program, making it bigger.",1
478,It makes a copy of the function code in every place where a function call is made.,compiler ignores inline qualifier,1
479,It makes a copy of the function code in every place where a function call is made.,"It generates a copy of the function, if it is needed again.",1
480,It makes a copy of the function code in every place where a function call is made.,"The complier includes copies of inline functions instead of making function calls, but usually only with very small functions.",2
481,It makes a copy of the function code in every place where a function call is made.,Compiler generate a copy of the function's code in place (when appropriate) to avoid a function call,2
482,It makes a copy of the function code in every place where a function call is made.,"instead of calling the function every time it is invoked, the compiler will replace the function call with a copy of the function body",2
483,It makes a copy of the function code in every place where a function call is made.,Expands the function into the program,1
484,It makes a copy of the function code in every place where a function call is made.,it generates a copy of the functions code in place to avoid a function call,2
485,It makes a copy of the function code in every place where a function call is made.,the function call will be replaced by the code that was defined in the inline function,2
486,It makes a copy of the function code in every place where a function call is made.,"When the compiler inline-expands a function call, the function's code gets inserted into the caller's code stream (conceptually similar to what happens with a #define macro). This can, depending on a zillion other things, improve performance, because the optimizer can procedurally integrate the called code — optimize the called code into the caller. ",1
487,It avoids making copies of large data structures when calling functions.,Overall the program has better performance (means it is faster) because it does not have to copy large amounts of data.,2
488,It avoids making copies of large data structures when calling functions.,because you can't change the original and passing by reference limits memory needed for the program.,1
489,It avoids making copies of large data structures when calling functions.,Passing by reference can eliminate the pass-by-value overhead of copying large amounts of data.,2
490,It avoids making copies of large data structures when calling functions.,"It is often more efficient to pass references, rather than large objects, to functions. This allows the compiler to pass the address of the object while maintaining the syntax that would have been used to access the object.",2
491,It avoids making copies of large data structures when calling functions.,"Pass by reference is good for performance reasons, because it can eliminate the pass by value overhead of copying large amounts of data.",2
492,It avoids making copies of large data structures when calling functions.,You do not alter the original value of the variable that was passed.,1
493,It avoids making copies of large data structures when calling functions.,Don't have to make copies of stuff.,1
494,It avoids making copies of large data structures when calling functions.,you do not use unessesary memory space to copy variables between functions,2
495,It avoids making copies of large data structures when calling functions.,It elimitates the need to copy large amonts of data,2
496,It avoids making copies of large data structures when calling functions.,The function can change the data stored in a variable passed by reference directly.,1
497,It avoids making copies of large data structures when calling functions.,Gives called function the ability to access and modify the caller’s argument data.,1
498,It avoids making copies of large data structures when calling functions.,Gives called function the ability to access and modify the caller’s argument data directly.,1
499,It avoids making copies of large data structures when calling functions.,It is more efficient and it changes the variable not online inside the function but outside so that the new value can be used elsewhere.,1
500,It avoids making copies of large data structures when calling functions.,you don't make another copy and waste memory,2
501,It avoids making copies of large data structures when calling functions.,"Passing by reference eliminates the copying of large amounts of data, typical with pass by value.",2
502,It avoids making copies of large data structures when calling functions.,"If a function's arguments are large in size, computing time and memory space is not wasted copying down the argument and passing it to the function.  Also pass by reference gives the function called the permission to read edit the argument directly.",2
503,It avoids making copies of large data structures when calling functions.,"Gives access to the caller data directly, also it allows for modifying the data.",1
504,It avoids making copies of large data structures when calling functions.,"less overhead overall, and you modify the variable directly.",1
505,It avoids making copies of large data structures when calling functions.,The original variable being referenced can be modified directly by the called function.,1
506,It avoids making copies of large data structures when calling functions.,gives function ability to access and modify the caller's argument data directly,1
507,It avoids making copies of large data structures when calling functions.,Gives the called function the ability to access and modify the caller's argument data directly.,1
508,It avoids making copies of large data structures when calling functions.,"Less overhead than passed by value, especially when using large numbers.",1
509,It avoids making copies of large data structures when calling functions.,"large data items can be passed without copying the entire data point, reducing execution time and the amout of memory space needed ",2
510,It avoids making copies of large data structures when calling functions.,The data can be modified directly instead of making a copy of the data. Improves execution time with large amounts of data.,1
511,It avoids making copies of large data structures when calling functions.,Functions can directly modify arguments that are passed by reference.,1
512,It avoids making copies of large data structures when calling functions.,It gives access and modify the caller's argument data directly. It eliminate the pass by value overhead of copying large amounts ofdata,2
513,It avoids making copies of large data structures when calling functions.,"it takes less memory, thus it would make the program faster",1
514,It avoids making copies of large data structures when calling functions.,You are able to modify the variable that is referenced directly.,1
515,It avoids making copies of large data structures when calling functions.,"if you pass by reference, you can modify the value as opposed to passing by value where you cannot change the value",1
516,It avoids making copies of large data structures when calling functions.,"only the memory address is sent to the function, so no copy of the object sent needs to be made. It makes the function run faster, and saves memory.",2
517,It avoids making copies of large data structures when calling functions.,"Actual arguments are associated with dummy arguments when a function or subroutine is referenced. In a procedure reference, the actual argument list identifies the correspondence between the actual arguments provided in the list and the dummy arguments of the subprogram",1
518,"Based on the function signature. When an overloaded function is called, the compiler will find the function whose signature is closest to the given function call.","The compiler selects the proper functions to execute based on number, types and order of arguments in the function call.",2
519,"Based on the function signature. When an overloaded function is called, the compiler will find the function whose signature is closest to the given function call.",They differentiated by the compiler by the conditions/inputs used for one of the overloaded functions.,1
520,"Based on the function signature. When an overloaded function is called, the compiler will find the function whose signature is closest to the given function call.","The compiler distinguishes overloaded functions by their signatures. It encodes each function identifier with the number and types of its parameters to generate type-safe linkage, which ensures the proper overloaded function is called.",2
521,"Based on the function signature. When an overloaded function is called, the compiler will find the function whose signature is closest to the given function call.","Overloaded functions are distinguished by their signatures, Name mangling or name decoration, and type-safe linkage ensures that proper overloaded functions is called and types of the arguments conform to tpes to the parameters.",2
522,"Based on the function signature. When an overloaded function is called, the compiler will find the function whose signature is closest to the given function call.","The compiler selects proper function to execute based on number, types and order of arguments in the function call.",2
523,"Based on the function signature. When an overloaded function is called, the compiler will find the function whose signature is closest to the given function call.","By the type they are initilized with (int, char, etc.)",1
524,"Based on the function signature. When an overloaded function is called, the compiler will find the function whose signature is closest to the given function call.","It selects the proper function to execute based on number, types and order of arguments in the function call.",2
525,"Based on the function signature. When an overloaded function is called, the compiler will find the function whose signature is closest to the given function call.",overloaded functions must have the same return type but different input parameters,1
526,"Based on the function signature. When an overloaded function is called, the compiler will find the function whose signature is closest to the given function call.","It examines the names, types, and order of arguments on each function.",2
527,"Based on the function signature. When an overloaded function is called, the compiler will find the function whose signature is closest to the given function call.",unique function signatures,2
528,"Based on the function signature. When an overloaded function is called, the compiler will find the function whose signature is closest to the given function call.","Is based on number, types, and order of arguments in the function call.",2
529,"Based on the function signature. When an overloaded function is called, the compiler will find the function whose signature is closest to the given function call.","Compiler selects proper function to execute based on number, types and order of arguments in the function call.",2
530,"Based on the function signature. When an overloaded function is called, the compiler will find the function whose signature is closest to the given function call.","they have to have same return type, but different input parameters",1
531,"Based on the function signature. When an overloaded function is called, the compiler will find the function whose signature is closest to the given function call.",Overloaded functions are differentiated by their parameters.,1
532,"Based on the function signature. When an overloaded function is called, the compiler will find the function whose signature is closest to the given function call.","The compiler selects the right function to execute from the number, types and order of arguments in the function call.",2
533,"Based on the function signature. When an overloaded function is called, the compiler will find the function whose signature is closest to the given function call.",it creates a set of candidate functions then a set of viable functions,1
534,"Based on the function signature. When an overloaded function is called, the compiler will find the function whose signature is closest to the given function call.",their function signature.,2
535,"Based on the function signature. When an overloaded function is called, the compiler will find the function whose signature is closest to the given function call.",The number and type of its parameters.,2
536,"Based on the function signature. When an overloaded function is called, the compiler will find the function whose signature is closest to the given function call.",by their function signature,2
537,"Based on the function signature. When an overloaded function is called, the compiler will find the function whose signature is closest to the given function call.","They have the same name, just different parameters.",1
538,"Based on the function signature. When an overloaded function is called, the compiler will find the function whose signature is closest to the given function call.","They are differntiated by number, types and order of arguments in the function call.",2
539,"Based on the function signature. When an overloaded function is called, the compiler will find the function whose signature is closest to the given function call.","it looks at the number, types, and order of arguments in the function call ",2
540,"Based on the function signature. When an overloaded function is called, the compiler will find the function whose signature is closest to the given function call.",The compiler differentiates overloaded functions by their signature.,2
541,"Based on the function signature. When an overloaded function is called, the compiler will find the function whose signature is closest to the given function call.","By the number, types, and order of their arguments",2
542,"Based on the function signature. When an overloaded function is called, the compiler will find the function whose signature is closest to the given function call.",paremeters,1
543,"Based on the function signature. When an overloaded function is called, the compiler will find the function whose signature is closest to the given function call.","By the number, and the types and order of the  parameters.",2
544,"Based on the function signature. When an overloaded function is called, the compiler will find the function whose signature is closest to the given function call.",by the number and type of arguments,2
545,"Based on the function signature. When an overloaded function is called, the compiler will find the function whose signature is closest to the given function call.","by their signature (return type, argument list)",1
546,"Based on the function signature. When an overloaded function is called, the compiler will find the function whose signature is closest to the given function call.",overloaded function simply invovles haing a method with the same name within the class. is used to implement a method for subclass which overrides in other words replaces the implementation of the super class. Overloading the concept of providing different meaning to a object based on the context of its presence. Overloading is one type of polymorphism and this is also a feature in programing.,1
547,"If the recursion step is defined incorrectly, or if the base case is not included.","A base case that is the simplest case for a problem so that the function will lead to it, if this does not happen then it will end up as an infinite loop. And a condition to know when to terminate.   ",2
548,"If the recursion step is defined incorrectly, or if the base case is not included.",badly designed algorithyms. using recursion for a non recursive problem.,1
549,"If the recursion step is defined incorrectly, or if the base case is not included.",Infinite recursion can occur when the base case is omitted or the recursion step is written incorrectly so that it never converges on the base case.,2
550,"If the recursion step is defined incorrectly, or if the base case is not included.","Infinite recursion is an infinite loop if the condition is not met.  Either omitting the base case, or writing the recursion step incorrectly so that it does not converge on the base case causes ""indefinite"" recursion, eventually exhausting memory.  ",2
551,"If the recursion step is defined incorrectly, or if the base case is not included.",Either omitting the base case or writing the recursion step incorrectly so that it does not converge on the base case can cause an infinite recursion.,2
552,"If the recursion step is defined incorrectly, or if the base case is not included.",Not having a base case that returns a base value.,1
553,"If the recursion step is defined incorrectly, or if the base case is not included.",Incorrect or missing base case. Must reduce to the base case. The function must get simpler each time it is run (converge to the base case).,2
554,"If the recursion step is defined incorrectly, or if the base case is not included.",no base case no change in values.,1
555,"If the recursion step is defined incorrectly, or if the base case is not included.","If at each recursive call the problem does not diminish or if it does not diminish to a base case, can cause infinite recursion.",2
556,"If the recursion step is defined incorrectly, or if the base case is not included.",Omitting the base case or incorrectly calling the recursive step.,2
557,"If the recursion step is defined incorrectly, or if the base case is not included.",The recursive problem cannot be reduced to reach the base case.,1
558,"If the recursion step is defined incorrectly, or if the base case is not included.","Lack of defining a base case, or writing the recursion step incorrectly so that it does not converge on the base case",2
559,"If the recursion step is defined incorrectly, or if the base case is not included.",Not having the proper case to leave the recursion,1
560,"If the recursion step is defined incorrectly, or if the base case is not included.","no base case, or the recursive calls do not converge to the base case",2
561,"If the recursion step is defined incorrectly, or if the base case is not included.","No base case, or an incorrectly written recursion step that does not converge on the base case will lead to infinite recursion.",2
562,"If the recursion step is defined incorrectly, or if the base case is not included.","If the recursion function never reaches or successfully defines the base case it will recurse forever.  This happens many ways, such as the function doesn't progress towards the base case, or the function is coded poorly and doesn't even contain a base case.",2
563,"If the recursion step is defined incorrectly, or if the base case is not included."," not creating a base case, or in the case where the base case will never be met.",2
564,"If the recursion step is defined incorrectly, or if the base case is not included.",improper handling of cases such that not all possible values are able to be handled.,1
565,"If the recursion step is defined incorrectly, or if the base case is not included.",There is no base case. The recursion step doesn't reduce the problem during each recursive call.,1
566,"If the recursion step is defined incorrectly, or if the base case is not included.","no base case, as in a single return that does not include calling the function again.  a static value to end at.",1
567,"If the recursion step is defined incorrectly, or if the base case is not included.","Either omitting the base case, or writing the recursion step incorrectly so the it does not reach the base case can cause infinite recursion.",2
568,"If the recursion step is defined incorrectly, or if the base case is not included.",omitting the base case or writing the recursive call so that it does not converge upon the base case.,2
569,"If the recursion step is defined incorrectly, or if the base case is not included.","Either omitting the base case, or writing the recursion step incorrectly so that it does not converge on the base case",2
570,"If the recursion step is defined incorrectly, or if the base case is not included.",Infinite recursion may occur if no base case is defined or if the call is not varied.,1
571,"If the recursion step is defined incorrectly, or if the base case is not included.","Not having a base case, or building a recursion process that doesn't converge on the base case.",2
572,"If the recursion step is defined incorrectly, or if the base case is not included.","Either omitting the base case, or writing the recursion step incorerectly ",2
573,"If the recursion step is defined incorrectly, or if the base case is not included.",no base case or if the programmar does not define the base case as the simplest case and it never gets reached,2
574,"If the recursion step is defined incorrectly, or if the base case is not included.",No easily reached base case and no base case at all,2
575,"If the recursion step is defined incorrectly, or if the base case is not included.",function is never allowed to reach the 'base case',2
576,"If the recursion step is defined incorrectly, or if the base case is not included.","it has no base case, or the base case is never met",2
577,"If the recursion step is defined incorrectly, or if the base case is not included.",recursion refers to situations in which functions call themselves. These types of functions are known as recursive functions. That being said Infinite recursion occurs when the function is designed in such a way as to call it self forever without stopping possible causes,1
578,They both involve repetition; they both have termination tests; they can both occur infinitely.,"Both involve a controlled repetition structures, and they both have a termination test.  Also both of them can loop forever. ",2
579,They both involve repetition; they both have termination tests; they can both occur infinitely.,"As discussed earlier, recursion may be used to process iterative actions. Recursion is used for calculations where the answer can be described in a function that relates to itself.",1
580,They both involve repetition; they both have termination tests; they can both occur infinitely.,Both iteration and recursion are based on control statements and involve repetition. They can both also occur indefinitely.,2
581,They both involve repetition; they both have termination tests; they can both occur infinitely.,Both are based on a control statement         - Iteration-repetition structure         - Recursion-selection structure        Both involve repetition         -Iteration-explicitly uses repetition structure         -Recursion-repeated function calls        Both involve a termination test         -Iteration-loop-termination test         -Recursion-base case         Both gradually approach termination         -Iteration-modifies counter until loop-termination test fails         -Recursion-produces progressively simpler versions of problem        Both can occur indefinitely         -Iteration-if loop-continuation condition never fails         -Recursion-if recursion step does not simplify the problem,2
582,They both involve repetition; they both have termination tests; they can both occur infinitely.,"Iteration and recursion have many similarities: both are based on a control statement, involve repetition, involve a termination test, gradually approach termination and can occur infinitely.",2
583,They both involve repetition; they both have termination tests; they can both occur infinitely.,"Both rely on repetition, both have a base case, both can become an infinite loop. Anything recursive can also be solved with iteration.",2
584,They both involve repetition; they both have termination tests; they can both occur infinitely.,"Both will repeat (loop) until a condition is met, and exit the loop. Both are capable of entering an infinite loop.",1
585,They both involve repetition; they both have termination tests; they can both occur infinitely.,anything you can do iterativly you can do recursively,1
586,They both involve repetition; they both have termination tests; they can both occur infinitely.,Both are repetative and both have a end test.,1
587,They both involve repetition; they both have termination tests; they can both occur infinitely.,"Incorrectly writing either can result in infinite loops, both perform the same task over and over.",1
588,They both involve repetition; they both have termination tests; they can both occur infinitely.,Both are based on a control statement. Both involve repetition. Both involve a termination test. Both gradually approach termination. Both can occur infinitely.,2
589,They both involve repetition; they both have termination tests; they can both occur infinitely.,"Both are based on a control statement, Both involve repetition, Both involve a termination test, Both gradually approach termination, Both can occur infinitely",2
590,They both involve repetition; they both have termination tests; they can both occur infinitely.,anything you can do recursively you can do iteratively,1
591,They both involve repetition; they both have termination tests; they can both occur infinitely.,"Many problems can be solved by both iteration and recursion, and either may go into a condition of infinite execution if a termination test is omitted.",1
592,They both involve repetition; they both have termination tests; they can both occur infinitely.,"Iteration and recursion both use repetition and perform several simple operations and algorithms successively until they reach a certain limit.  So both involve a termination test to find that limit and both slowly approach that termination limit.  Both are based on a control statement as well.    If coded poorly, both can continue on for forever until the compiler or the computer either locks up, shuts down or halts the operation.",2
593,They both involve repetition; they both have termination tests; they can both occur infinitely.,"both based on control statement, involve repetition, and involve a termination test within loops",2
594,They both involve repetition; they both have termination tests; they can both occur infinitely.,they are methods of repeating the same task.,1
595,They both involve repetition; they both have termination tests; they can both occur infinitely.,Both involve a termination test.   They use a control statement and repition to solve the problem.  They can also result in an infinite loop.,2
596,They both involve repetition; they both have termination tests; they can both occur infinitely.,"based on a control statement, involve repetition, involve a termination test.",2
597,They both involve repetition; they both have termination tests; they can both occur infinitely.,Both are bases on a control statement. Both involve repetition. Both involve a termination test. Both gradually approach termination. Both can occur infinitely.,2
598,They both involve repetition; they both have termination tests; they can both occur infinitely.,"both based on a control statement, both involve repitition, both involve a termination test, both gradually approach termination, both can potentially occur infinetly.",2
599,They both involve repetition; they both have termination tests; they can both occur infinitely.,"they are both based on a control statement, both involve repetition, both involve a termination case, both graduatlly approach that termination case, and both can occur infinitely",2
600,They both involve repetition; they both have termination tests; they can both occur infinitely.,"They both use repetition, a control or test to terminate, and both can infinitely repeat if not defined correctly.",2
601,They both involve repetition; they both have termination tests; they can both occur infinitely.,"Both are based on a control statement; both gradually approach termination ending with a termination test; both involve repetition, and can both repeat infinitely if their  termination requirements are not met.",2
602,They both involve repetition; they both have termination tests; they can both occur infinitely.,"both are based on a control statement, involve repetition and involve a termination test. both gradually approach termination, both can occur infinitely",2
603,They both involve repetition; they both have termination tests; they can both occur infinitely.,they are used to solve the same type of problems. they do a task over and over again until a cirtain conditional statement is reached (its called the base case in recursion).,1
604,They both involve repetition; they both have termination tests; they can both occur infinitely.,Based on control statement;  involve repetition; involve a terminal test; both can occur infinitly,2
605,They both involve repetition; they both have termination tests; they can both occur infinitely.,"repetition, termination test, eventually terminate, occur infinately",2
606,They both involve repetition; they both have termination tests; they can both occur infinitely.,both need to have some kind of base case to tell when the loop needs to stop.,1
607,They both involve repetition; they both have termination tests; they can both occur infinitely.,"they both are able to do repetiive tasks. however recurisve calls itself with different parameters and defines and exit clause that is guaranteeed to be reached. Iterative includes a loop which iterates a pre-determined number of times, or checks for an exit clause every time through",1
608,"In the array declaration, or by using an initializer list.",int n[10]; //array of 10 integers and int n[arraySize] //where arraySize is some positive integer defined by the user,1
609,"In the array declaration, or by using an initializer list.",by either inputing the different elements in the array at coding or giving the array specifacations as to the size of the array. it is also possible when giving it specifacations to tell the array to grow as needed.,1
610,"In the array declaration, or by using an initializer list.",You can initialize and array by using an initializer list in its declaration or by initializing its size with a constant variable.,2
611,"In the array declaration, or by using an initializer list.",Pass the length along with the array or use a vector.,1
612,"In the array declaration, or by using an initializer list.","One way is to declare a size of the array using a variable that is equal to an integer. The other way, if the size is omitted in the declaration, the compiler determines the size of the array based on the size of the initializer list.",2
613,"In the array declaration, or by using an initializer list.","In the declaration (int array [x]) or with an initilizer (int array[]={0,1,2,etc.}",2
614,"In the array declaration, or by using an initializer list.","1. Declare the length of the array (int array[10];) 2. Initialize the array (int array[] = {0, 1, 2, 3}; //compiler will assume size of 4)",2
615,"In the array declaration, or by using an initializer list.",statically and dynamically,1
616,"In the array declaration, or by using an initializer list.",Explicitly int array[10]; or by variable const int size = 10; int array[size];,1
617,"In the array declaration, or by using an initializer list.","Array lengths can be explicitly specified by inputing the number of elements between the brackets [ ] during declaration, or implicitly by including an initializer list WITHOUT specifying a number between [ ], the compiler will automatically declare the array with the proper number of elements needed for the list. ",2
618,"In the array declaration, or by using an initializer list.",Specify an arrays size with a constant variable. And setting array elements with calculations.,1
619,"In the array declaration, or by using an initializer list.","statically, using {} and dynamically, using []",1
620,"In the array declaration, or by using an initializer list.","define it as array[5] or array[1,2,3,4,5]",1
621,"In the array declaration, or by using an initializer list.",Static and dynamic.,1
622,"In the array declaration, or by using an initializer list.",manually inside the brackets or automatically via an initializer list,2
623,"In the array declaration, or by using an initializer list.","You can use an initializer list, or simply tell the compiler how many elements you want in the array.  For an Initializer list:  int a[] = {10, 2, 3, -4, 5};  For an elemental declaration: int b[5];  Both arrays have 5 elements in them, but array a is already initialized.",2
624,"In the array declaration, or by using an initializer list.","In a string you can specify with the strlen(arrayname) command. This gets the length of the string. Another way is with integers where you initiate the size from the start, ex array[40] specifying a possible length of up to 40. Then it is passed by an object the actual ammout in the array. Another way is to declare it in an initializing program. ",1
625,"In the array declaration, or by using an initializer list.","Implicit, namely when you give it values, like {1,2,3,4,5,6,7,8,9}, at which the compiler will automatically give this a size. Static, during the declaration. ",2
626,"In the array declaration, or by using an initializer list.","Supply an integer inside the brackets or the compiler counts the number of elements in the initializer list. int n[5]; int n[] = { 1,2,3,4,5 }",2
627,"In the array declaration, or by using an initializer list.",either initializing the array with a specific length or initializing an array while declaring its contents.,2
628,"In the array declaration, or by using an initializer list.",within the brackets or by using an initializer list.,2
629,"In the array declaration, or by using an initializer list.",specify the number of elements in the array declaration with a constant or using a constant variable for future scalability,1
630,"In the array declaration, or by using an initializer list.",with a number and with a variable,1
631,"In the array declaration, or by using an initializer list.","explicitly, by declaring it in brackets (i.e. int array[50];) and implicitly, by initializing several values (i.e. int array[] = {1, 2, 3};)",2
632,"In the array declaration, or by using an initializer list.","one way of specifying of array is A[10] ; other way of specifying array is a[arraysize] = [1,2,3,4,5,6,7,8,9,10}",1
633,"In the array declaration, or by using an initializer list.",1-Initializing an array in a declaration with an initializer list 2-Specifying an arrays size with a constant variable,2
634,"In the array declaration, or by using an initializer list.","Initializing the size in the brackets: int a[100]; Initializing the length by assigning variables: int a[] = {1,2,3};",2
635,"In the array declaration, or by using an initializer list.",user defined value or by the number of elements in initializer list,2
636,"In the array declaration, or by using an initializer list.","you can assign the size of it inside the brackets when you declare the array [3], or you can have it set by how many items you set the array equal to {1,2,3}",2
637,"In the array declaration, or by using an initializer list.","use an arraylist, or have your program ask the array how many elements it has. As an obj it it should have member length that is the number of slots it has. ",1
638,The strings declared using an array of characters have a null element added at the end of the array.,"strings that are used in an char array are much easier to manipulate than as a string object, because each character is stored separately rather than as a whole",1
639,The strings declared using an array of characters have a null element added at the end of the array.,"the type string uses less storage and you have to change the string all at once. with an array of characters you can make permutations of words using the characters stored in the array, without needing to actually access and change the variables. with an array of characters you can just change how they're accessed.",1
640,The strings declared using an array of characters have a null element added at the end of the array.,"Unlike in a string declared using type string, in a string declared using an array of characters the programmer must provide the null terminating character and must ensure the array is large enough to hold the string and null terminating character.",2
641,The strings declared using an array of characters have a null element added at the end of the array.,"All strings represented by character arrays end with the null character. You declare an object of type string just like any other type, for example:  string s; ",2
642,The strings declared using an array of characters have a null element added at the end of the array.,"By using an array of characters, one can store and manipulate the strings rather than just having a type string variable.",1
643,The strings declared using an array of characters have a null element added at the end of the array.,type string is an array of chars that will make an array of single letter characters while an array of strings will be an actual array of words (or an array of char arrays),1
644,The strings declared using an array of characters have a null element added at the end of the array.,"They're basically the same, however, a string ends w/ a null character, denoting the end of the string (and the size). A char array has potential to be any size, so it must be declared or limited.",1
645,The strings declared using an array of characters have a null element added at the end of the array.,string is a class in the standard library and has method that modify it. Whereas the char array is on able to be modifie by the user.,1
646,The strings declared using an array of characters have a null element added at the end of the array.,"By using an array of characters, you are limited to the size of the array of characters.  By declaring by type the end of the string is acknowledged by white space.",1
647,The strings declared using an array of characters have a null element added at the end of the array.,"The data class type string are designed to handle character data, and has many functions built into the class library to deal with them. An array of characters however is subject to all the same rules of any other array with no real additional functionality. Another difference is that the string class deals with the null character implicitly, unlike an array of characters, which must handle the null character explicitly. ",2
648,The strings declared using an array of characters have a null element added at the end of the array.,string declared used in an array of characters contains each character in the array and a special string-termination character called the null character versus the type string.,2
649,The strings declared using an array of characters have a null element added at the end of the array.,A char array reads a string as each individual character. A string literal array reads the entire string.,1
650,The strings declared using an array of characters have a null element added at the end of the array.,array of characters can only hold as many characters as the array size and strings are not that limited.,1
651,The strings declared using an array of characters have a null element added at the end of the array.,"Stings can only be modified by functions of the String class, an array of characters can be modified by the user",1
652,The strings declared using an array of characters have a null element added at the end of the array.,"if by type string, the array contains an additional terminating null character",1
653,The strings declared using an array of characters have a null element added at the end of the array.,The array of characters has a null character \0 at the end of the array to signify the array's end.  The string does not have this.,2
654,The strings declared using an array of characters have a null element added at the end of the array.,strings with type string are just that. Strings. They are not part of an array list at all where as one declared by an array is actually an array of characters able to be pointed and detected.,1
655,The strings declared using an array of characters have a null element added at the end of the array.,"the array of characters has a set length, while the type string has virtually unlimited length.",1
656,The strings declared using an array of characters have a null element added at the end of the array.,Char array - Individual letters can be accessed directly with array subscript notation.  String array - array subscript will return the entire string.,1
657,The strings declared using an array of characters have a null element added at the end of the array.,array of characters need a termination character as well as size specification whether its explicit or implicit.,2
658,The strings declared using an array of characters have a null element added at the end of the array.,when using an array individual characters can be accessed and manipulated.,1
659,The strings declared using an array of characters have a null element added at the end of the array.,strings declared using an array of characters could result in data loss if character array not initialized large enough.,1
660,The strings declared using an array of characters have a null element added at the end of the array.,"an array is passed by reference therefore if an array of characters is changed, the memory is changed not just the variable",1
661,The strings declared using an array of characters have a null element added at the end of the array.,"the type string has several built-in functions not available when using a char array, but the individual characters in an array or more directly accessible than the characters in a string type string.",1
662,The strings declared using an array of characters have a null element added at the end of the array.,"declaring a string, it includes white spaces but declaring a array of character does not include white spaces",0
663,The strings declared using an array of characters have a null element added at the end of the array.,"an array of characters has one element a string doesnt have. it is the termination element, or ""null""",2
664,The strings declared using an array of characters have a null element added at the end of the array.,Strings declared using the type string can vary in length. Strings declared using an array of characters can not extend past the array length.,1
665,The strings declared using an array of characters have a null element added at the end of the array.,"cant modify individual characters of a type string array, character type array can modify individual characters",1
666,The strings declared using an array of characters have a null element added at the end of the array.,"the type string is a class and is safer, while the other is just an array of characters.",1
667,The strings declared using an array of characters have a null element added at the end of the array.,"array  it is the collection of similar data types ex:int a[10]  ten indicates the size of array. [ ] is index of array, we can give only integer values to array of a.  where as string mean collection of group of characters.  string declarations have a datatype usually causes storage to be allocated in memory that is capable of holding some predetermined number of symbols.    However  Arrays can be declared to contain values of any non reference data type. Multiple arrarys of the same type ",1
668,by reference.,by reference only,2
669,by reference.,a reference pointer to an element in the array.,1
670,by reference.,Arrays are passed to functions by reference.,2
671,by reference.,Arrays are passed by reference.,2
672,by reference.,"you must pass the array and its size to the function. Ex. function(array, size);",1
673,by reference.,"Usually the same way you pass anything else... you do not have to specify the length of a char array, just pass it to the function by sending the name of the array.  Example: char str[20]; isPalindrome(str); // this sends the char array to the function isPalindrome.  Otherwise, would need to send the length of the array as well.",1
674,by reference.,you pass a pointer to the first item and also pass the size.,1
675,by reference.,By reference.,2
676,by reference.,"In two parts, the array itself, and it's size, so that the function it's being passed to can avoid out of bounds errors.",1
677,by reference.,Specify array name without brackets. Array size is normally passed as another argument so the function can process the specific number of elements in the array. Arrays are passed by reference. Individual array elements passed by value. Functions that take arrays as arguments.,2
678,by reference.,the same way but with [] at the declaration and the actual function.,1
679,by reference.,specify the array name without brackets.,1
680,by reference.,by reference,2
681,by reference.,"You pass the name of the array to the function. So for: int bin [10]; you pass it to an array like so: jingle(bin); but jingle must be declared correctly in order to receive an array, either with prototype void jingle (int []); or with the definition in its initialization: void jingle (int array[]);  It's also worth noting that arrays are passed to function by reference, so as to not copy large arrays over and over and burn memory.  This gives the function complete control over the array however.",2
682,by reference.,They are called by the function then the function must loop through the array to get the set of characters.,1
683,by reference.,"by reference by default, unless you specify const, at which the later will make the array unmodifiable.",2
684,by reference.,"The function recieves both the array and the array size as parameters. function(arrayName, arraySize)",1
685,by reference.,specifying array name and passing as reference in an argument into the function,2
686,by reference.,1st you must specify the array name without brackets and then the array name and size are passed as two arguments in the function call.,1
687,by reference.,"arrays are passed by reference, passing the starting address of array. programmer specifies the array name without brackets and passes the array size as another argument so the function can process the specific number of elements in the array",2
688,by reference.,by refrence,2
689,by reference.,"function( int [], int length)",1
690,by reference.,"The function reads the variables, stores them. then returns the what ever the variable reads. The function then prints the content of the array. ",1
691,"The arrays declared as static live throughout the life of the program; that is, they are initialized only once, when the function that declares the array it is first called.",a static array will store the new values that were assigned to each of its elements. meaning if you call a function twice it will use the last values that were returned the first time.  if you don't declare it static then the new values will not be stored and will be reset to their original value,2
692,"The arrays declared as static live throughout the life of the program; that is, they are initialized only once, when the function that declares the array it is first called.",a static array can only be referenced not accessed. Also static arrays can be used without creating an object.,1
693,"The arrays declared as static live throughout the life of the program; that is, they are initialized only once, when the function that declares the array it is first called.",An array declared as static is not created and and initialized each time the function and it is also not destroyed when the function terminates.,2
694,"The arrays declared as static live throughout the life of the program; that is, they are initialized only once, when the function that declares the array it is first called.","A program intializes static local arrays when their declarations are first encountered.  If a static array is not initialized explicityly by the programmer, earch element of that array is intialized to zero by the compiler when the array is created.  Non-static array members cannot be initialized at all in C++.",1
695,"The arrays declared as static live throughout the life of the program; that is, they are initialized only once, when the function that declares the array it is first called.",Arrays that are static remain the same size throughout the program execution.,1
696,"The arrays declared as static live throughout the life of the program; that is, they are initialized only once, when the function that declares the array it is first called.","a static array will only be initilized once, a non static array will be re-initilized once the program reaches the initilization line again.",2
697,"The arrays declared as static live throughout the life of the program; that is, they are initialized only once, when the function that declares the array it is first called.",An array declared as static is available from beginning of program to end. One w/o static declaration disappears if it is not accessed within the right scope.,1
698,"The arrays declared as static live throughout the life of the program; that is, they are initialized only once, when the function that declares the array it is first called.",a static array has pre-runtime size and that size cannot be changed. A dynamic array gets its size at runtime.,1
699,"The arrays declared as static live throughout the life of the program; that is, they are initialized only once, when the function that declares the array it is first called.","If an array is declared as static, it is not created each time the array is called.",2
700,"The arrays declared as static live throughout the life of the program; that is, they are initialized only once, when the function that declares the array it is first called.","An array that is not declared as static will re-initialize every time the function declaring it is called. A static array will initialize only once, at the declaration, and will store the values in it's elements throughout the duration of the program, even if the same function is called multiple times, a static array will only initialize once.",2
701,"The arrays declared as static live throughout the life of the program; that is, they are initialized only once, when the function that declares the array it is first called.","All elements are initialized to zero if not explicitly initialized, this does not happen for automatic local arrays  ",1
702,"The arrays declared as static live throughout the life of the program; that is, they are initialized only once, when the function that declares the array it is first called.","All elements are initialized to zero if not explicitly initialized for a static array, while a non-static array is not initialized to zero.",1
703,"The arrays declared as static live throughout the life of the program; that is, they are initialized only once, when the function that declares the array it is first called.",static cannot be changed,1
704,"The arrays declared as static live throughout the life of the program; that is, they are initialized only once, when the function that declares the array it is first called.","A static array has a set size that cannot change. The data may not need all of the space assigned, or could go beyond the size.",1
705,"The arrays declared as static live throughout the life of the program; that is, they are initialized only once, when the function that declares the array it is first called.","A static member prevents naming conflicts (not put into global namespace) while allowing for information hiding (private, public).",1
706,"The arrays declared as static live throughout the life of the program; that is, they are initialized only once, when the function that declares the array it is first called.",A static local array exists for the duration of the program and its elements are initialized to 0 if not explicitly initialized. So a static local array's elements will still be the same when called later unless specifically initialized to something else.  This doesn't happen for automatic arrays.,2
707,"The arrays declared as static live throughout the life of the program; that is, they are initialized only once, when the function that declares the array it is first called.","Static arrays are those with a declared size, that is known to the program, whereas non-static arrays leave the size undeclared and open so it can be assigned later. Usually used for input purposes. ",1
708,"The arrays declared as static live throughout the life of the program; that is, they are initialized only once, when the function that declares the array it is first called.","static arrays keep the values after the end of a function, while non static reinitialize every time.",2
709,"The arrays declared as static live throughout the life of the program; that is, they are initialized only once, when the function that declares the array it is first called.","Static arrays are created and initialized only once, and the values aren't destroyed  when the function terminates in the program. Automatic arrays reset everytime the function is called.",2
710,"The arrays declared as static live throughout the life of the program; that is, they are initialized only once, when the function that declares the array it is first called.","its not created and initialized each time program calls the function, and is not destroyed every time the function ends in the program.",2
711,"The arrays declared as static live throughout the life of the program; that is, they are initialized only once, when the function that declares the array it is first called.","When we declare it static the array is not destroyed after the function is over.  When an array is not declared as static, the array is created and initialized every time a function calls it.",2
712,"The arrays declared as static live throughout the life of the program; that is, they are initialized only once, when the function that declares the array it is first called.",the static array exists for the duration of the program,1
713,"The arrays declared as static live throughout the life of the program; that is, they are initialized only once, when the function that declares the array it is first called.",an array declared as static can only be declared once,1
714,"The arrays declared as static live throughout the life of the program; that is, they are initialized only once, when the function that declares the array it is first called.","A static array exists in memory until the program terminates, whereas an automatic (or normal) array is removed when the function that created it terminates",2
715,"The arrays declared as static live throughout the life of the program; that is, they are initialized only once, when the function that declares the array it is first called.",Only constants can be used to declare the size of automatic and static arrays Exists for the duration of the program Is initialized when its declaration is first encountered All elements are initialized to zero if not explicitly initialized,2
716,"The arrays declared as static live throughout the life of the program; that is, they are initialized only once, when the function that declares the array it is first called.",A static array cannot be changed in the program.,1
717,"The arrays declared as static live throughout the life of the program; that is, they are initialized only once, when the function that declares the array it is first called.",static arrays are available throughout the program,2
718,"The arrays declared as static live throughout the life of the program; that is, they are initialized only once, when the function that declares the array it is first called.","a static array is allocated when the program starts and is freed when the program exits but has limited scope, while an array that is not declared static is allocated and freed when it comes into and out of scope.",2
719,"The arrays declared as static live throughout the life of the program; that is, they are initialized only once, when the function that declares the array it is first called.","if they are declared fixed or static that means they can't change size once their storage has been allocated, however one that is not or dynamic arrarys can be resized.   ",1
720,"All the dimensions, except the first one.","at least 2, depending on how many arrays are being used.",1
721,"All the dimensions, except the first one.",all of them.,1
722,"All the dimensions, except the first one.","When passing a multi-dimensional array, all dimensions must be specified except for the first dimension.",2
723,"All the dimensions, except the first one.",It depends what parameters you are passing in a multidimensional.  A multideminsional can have more than two dimensions.,1
724,"All the dimensions, except the first one.",The first dimension is not required however the subsequent dimension(s) are needed for the compiler.,2
725,"All the dimensions, except the first one.",all but the first,2
726,"All the dimensions, except the first one.",All of the dimensions must be specified.,1
727,"All the dimensions, except the first one.",just the first one at least.,1
728,"All the dimensions, except the first one.","Two paramaters, the array and how many columns.  array(a[],[3])",1
729,"All the dimensions, except the first one.","The size of the first dimension can be omitted, same as a regular array. However, for every dimension outside the first, the size of those dimensions must be specified when passed, for example, a multi-dimensional array of [2][4][6] with the name MultiArray would be passed as: ""MultiArray[][4][6], 2""",1
730,"All the dimensions, except the first one.",Size of subsequent dimensions are required. Compiler must know how many elements to skip to move to the second element in the first dimension,1
731,"All the dimensions, except the first one.",Every dimension after the first.,2
732,"All the dimensions, except the first one.",both,1
733,"All the dimensions, except the first one.","the size of the first dimension does not need to be specified, but all other dimensions do.",2
734,"All the dimensions, except the first one.","when passing (in main) a multidimensional array to a function, no dimensions need be specified",1
735,"All the dimensions, except the first one.","All dimensions except for the first one need to be specified when passing an array to a function, the compiler needs to know how many memory addresses to skip to make it back to the 2nd element in the first dimension.  The size of the first dimension does not need to be specified.",2
736,"All the dimensions, except the first one.",as many as there are dimensions. Most commonly just rows and columns,1
737,"All the dimensions, except the first one.","at least 2, but it should always equal the number of dimensions that the argument is expecting... like...  blah[][][][] will require 4 dimensional array input. blah[][][] will require a 3 dimensional array. blah[][] will require a 2 dimensional array.",1
738,"All the dimensions, except the first one.","None, just pass the array name.",1
739,"All the dimensions, except the first one.",all subsequent dimensions after the first dimension.  first is not needed to be specified.,2
740,"All the dimensions, except the first one.","all dimensions, excluding the first one.",2
741,"All the dimensions, except the first one.",all dimensions but the first,2
742,"All the dimensions, except the first one.",the first needs to be specified by size and the rest need only be stated( first like this [3] then [][][]),1
743,"All the dimensions, except the first one.",one less than the number of dimensions the array contains,1
744,"All the dimensions, except the first one.",All subsequent dimensions after the first one.,2
745,"All the dimensions, except the first one.",two or more,1
746,"All the dimensions, except the first one.",1 less than the total number of dimensions,1
747,"All the dimensions, except the first one.","Multi dimensional arrays are accessed using more than 1  index, one for each dimension at least. ",1
748,"Taking one array element at a time, from left to right, it inserts it in the right position among the already sorted elements on its left.","Takes an element of an array and compares it with the next element, depending on the values of the two elements they will switch and then the program will compare the new switched element with the next one in the array.",1
749,"Taking one array element at a time, from left to right, it inserts it in the right position among the already sorted elements on its left.","Insertion sort divides the list into sorted and unsorted regions, then takes each item from the unsorted region and inserts it into its correct order in the sorted region.",2
750,"Taking one array element at a time, from left to right, it inserts it in the right position among the already sorted elements on its left.",The sorted array or list is built one entry at a time.,1
751,"Taking one array element at a time, from left to right, it inserts it in the right position among the already sorted elements on its left.",It starts with the second element and checks it to see if it is less than the element(s) to the left of it and if it is it inserts it into its corrected position.,2
752,"Taking one array element at a time, from left to right, it inserts it in the right position among the already sorted elements on its left.",Compare two numbers at a time and swap until the entire list is sorted.,1
753,"Taking one array element at a time, from left to right, it inserts it in the right position among the already sorted elements on its left.","Assume the first number is sorted, then move down the list and 'insert' the numbers you come across into the corresponding place on the sorted side of the list.",2
754,"Taking one array element at a time, from left to right, it inserts it in the right position among the already sorted elements on its left.",insertion sort is were after k iterations the first k items in the array are sorted it take the k+1 item and inserts it into the correct position in the already sorted k elements.,1
755,"Taking one array element at a time, from left to right, it inserts it in the right position among the already sorted elements on its left.",Looking at the 2nd element move forward and place the element in the correct spot.,1
756,"Taking one array element at a time, from left to right, it inserts it in the right position among the already sorted elements on its left.","Starting at the beginning of an array, take each element in order and place it in it's correct position relative to all previously sorted elements. ",2
757,"Taking one array element at a time, from left to right, it inserts it in the right position among the already sorted elements on its left.",To sort the elements in an array by removing an element from the input data and inserting it at the correct position.,2
758,"Taking one array element at a time, from left to right, it inserts it in the right position among the already sorted elements on its left.","Insertion sort removes an element from the data, and inserts it at the correct position in the already sorted list.",2
759,"Taking one array element at a time, from left to right, it inserts it in the right position among the already sorted elements on its left.",Take a number and choose a pivot point and insert the number in the correct position from the pivot point.,1
760,"Taking one array element at a time, from left to right, it inserts it in the right position among the already sorted elements on its left.",have a marker and sort everything to the left of the value for every new value when moving to the right.,1
761,"Taking one array element at a time, from left to right, it inserts it in the right position among the already sorted elements on its left.",The main idea behind insertion sort is to take a random variable from the right and insert it in order to the left.,1
762,"Taking one array element at a time, from left to right, it inserts it in the right position among the already sorted elements on its left.",Insertion sort progresses through a list of elements and determines where the next element should be inserted into an already sorted array starting with sorting and using the first two elements.,1
763,"Taking one array element at a time, from left to right, it inserts it in the right position among the already sorted elements on its left.","it goes through the list only once, picking each integer and putting it in its desired position, then continuing. ",1
764,"Taking one array element at a time, from left to right, it inserts it in the right position among the already sorted elements on its left.",Inserting array items in to their appropriate positions from smallest to largest at a pivot which starts on the second element of the array.,1
765,"Taking one array element at a time, from left to right, it inserts it in the right position among the already sorted elements on its left.",Insert the item into its proper position by shifting larger sorted array values to the right.,1
766,"Taking one array element at a time, from left to right, it inserts it in the right position among the already sorted elements on its left.",a comparison sort in which the sorted array is built one entry at a time,1
767,"Taking one array element at a time, from left to right, it inserts it in the right position among the already sorted elements on its left.","Insertion sort is an algorithm where the first element of the array is in the sorted list, all the other pick one by one and taken from the unsorted array, to the sorted array.",1
768,"Taking one array element at a time, from left to right, it inserts it in the right position among the already sorted elements on its left.","Every iteration of an insertion sort takes away an element from the input data, inserting it at the right position in the sorted list.",2
769,"Taking one array element at a time, from left to right, it inserts it in the right position among the already sorted elements on its left.",the insertion sort creates a new array and inserts each item in its place with respect to the new array.,1
770,"Taking one array element at a time, from left to right, it inserts it in the right position among the already sorted elements on its left.","Insertion sort takes each entitity of an unsorted array in order, and sorts it into the correct position between the entities it has sorted.",2
771,"Taking one array element at a time, from left to right, it inserts it in the right position among the already sorted elements on its left.","it takes the second element and swaps it with the 1st if it is less and keeps it there if its larger, then it goes to the third element and inserts it in the right places with respect to the first 2 elements and so on... ",2
772,"Taking one array element at a time, from left to right, it inserts it in the right position among the already sorted elements on its left.","Starting with the first element in the array, each following element is put in place by determining if it is smaller or larger than the starting element.",1
773,"Taking one array element at a time, from left to right, it inserts it in the right position among the already sorted elements on its left.","one by one, each item is taken and placed into the correct place in the sorted portion of the array until there are no more items",1
774,"Taking one array element at a time, from left to right, it inserts it in the right position among the already sorted elements on its left.",you take each element and insert it in the correct position with respect to all the elements before it,2
775,"Taking one array element at a time, from left to right, it inserts it in the right position among the already sorted elements on its left.","Insertion sort is a simple sorting algorithm, a comparison sort in which the sorted array (or list) is built one entry at a time.",1
776,"Taking one array element at a time, from left to right, it identifies the minimum from the remaining elements and swaps it with the current element.",Searches an array for the largest or the smallest element and is moved out to the front of the array then it will search for the next largest or the smallest element to move out to the front,2
777,"Taking one array element at a time, from left to right, it identifies the minimum from the remaining elements and swaps it with the current element.","Selection sort searches the whole array for the largest item and puts it at the end of the array, then searches for the second largest item and puts it at the second to last spot and so on.",1
778,"Taking one array element at a time, from left to right, it identifies the minimum from the remaining elements and swaps it with the current element.",Finds the minimum value and swap it with the value in the first position.,2
779,"Taking one array element at a time, from left to right, it identifies the minimum from the remaining elements and swaps it with the current element.",It finds the minimum element in the array and swaps it with the first element then repeats this step swapping the minimum element with nth positions in the array.,2
780,"Taking one array element at a time, from left to right, it identifies the minimum from the remaining elements and swaps it with the current element.","Find the lowest value and place it at the front, then find the next lowest and place it in front of the last value, etc.",1
781,"Taking one array element at a time, from left to right, it identifies the minimum from the remaining elements and swaps it with the current element.","Cycle through the unsorted list, place the minimum in the next slot in the sorted list, and repeat.",1
782,"Taking one array element at a time, from left to right, it identifies the minimum from the remaining elements and swaps it with the current element.",find the minimum value in the list swap it with the first element in the list the find the second largest and swap it with the second element in the array continue like this until  the array is sorted.,2
783,"Taking one array element at a time, from left to right, it identifies the minimum from the remaining elements and swaps it with the current element.",Find the smallest and put it in the current position till you get to the end.,2
784,"Taking one array element at a time, from left to right, it identifies the minimum from the remaining elements and swaps it with the current element.","Find the lowest unsorted value in the array and place it at the current position (starting at the first element in the array) and advance the ""current"" position by one. ",2
785,"Taking one array element at a time, from left to right, it identifies the minimum from the remaining elements and swaps it with the current element.",To sort the elements by comparing two elements and swapping the smaller one to sort the elements in the array.,1
786,"Taking one array element at a time, from left to right, it identifies the minimum from the remaining elements and swaps it with the current element.","Selection sort finds the minimum value in the list, swaps it with the first value in the list, and repeats throughout the list.",1
787,"Taking one array element at a time, from left to right, it identifies the minimum from the remaining elements and swaps it with the current element.","Select the minimum number from the array and put it in the current position, then move on",2
788,"Taking one array element at a time, from left to right, it identifies the minimum from the remaining elements and swaps it with the current element.",Find the lowest value and place it in the front of the list and swap it with that value. Continue moving right.,2
789,"Taking one array element at a time, from left to right, it identifies the minimum from the remaining elements and swaps it with the current element.",The main idea behind selection sort is to take the least variable from the right and put it directly to the left.,1
790,"Taking one array element at a time, from left to right, it identifies the minimum from the remaining elements and swaps it with the current element.","Find the smallest value in the list and make it the first element, then find the smallest value of the leftover list and make it the first element of the leftover list and continue until the list is sorted.",2
791,"Taking one array element at a time, from left to right, it identifies the minimum from the remaining elements and swaps it with the current element.",It runs through and finds the lowest (or highest) value and puts it in its desired position.,1
792,"Taking one array element at a time, from left to right, it identifies the minimum from the remaining elements and swaps it with the current element.","Places the smallest item in the list at position 1, and then proceeds to each value until the last position of the ray is reached.",2
793,"Taking one array element at a time, from left to right, it identifies the minimum from the remaining elements and swaps it with the current element.",Search for the largest item in an array and swap it with the last unsorted item.,1
794,"Taking one array element at a time, from left to right, it identifies the minimum from the remaining elements and swaps it with the current element.",finds the smallest element and places in 1st position. then the process is repeated on the rest of the array.,2
795,"Taking one array element at a time, from left to right, it identifies the minimum from the remaining elements and swaps it with the current element.",Selection sort is an algorithm that selects the larges item the array and puts it in its place; then select the next largest until the array is sorted,1
796,"Taking one array element at a time, from left to right, it identifies the minimum from the remaining elements and swaps it with the current element.",Select the smallest number in the list and move it to the front of the list and then advance to the next number.,2
797,"Taking one array element at a time, from left to right, it identifies the minimum from the remaining elements and swaps it with the current element.",the selection sort chooses the largest or smallest value in an unsorted list and creates a new list using the selection depending on how it is sorted.,1
798,"Taking one array element at a time, from left to right, it identifies the minimum from the remaining elements and swaps it with the current element.","Selection sort finds the smallest number left unsorted in an array, and puts it at the end of what it has sorted",1
799,"Taking one array element at a time, from left to right, it identifies the minimum from the remaining elements and swaps it with the current element.","selects the minimum from the remaining elements of the array, and palces the miminum in the current position and moves to the next position",2
800,"Taking one array element at a time, from left to right, it identifies the minimum from the remaining elements and swaps it with the current element.","To put the biggest element at the end of the list and place the next highest element behind it, and so on.",1
801,"Taking one array element at a time, from left to right, it identifies the minimum from the remaining elements and swaps it with the current element.","the sort finds the largest item and places it at the end, then then next largest is found and placed next to last, continue until there is only one number left, this is the beginning of the sorted array",1
802,"Taking one array element at a time, from left to right, it identifies the minimum from the remaining elements and swaps it with the current element.","you loop through the entire list, and for each iteration you find the smallest element and move it to the current position.",2
803,"Taking one array element at a time, from left to right, it identifies the minimum from the remaining elements and swaps it with the current element.",Find the minimum value in the list swap it with the value in the first position; repeat the steps above for remainder of the list(starting in the second position.,2
804,N (the length of the array) operations achieved for a sorted array.,"The run time for this sorting program is n^2.  Best case is the list is already sorted, worst case is the list is sorted but in reverse. ",1
805,N (the length of the array) operations achieved for a sorted array.,"Insertion sort is O(n) and performs n-1 operations in the best-case scenario, which is when the list or array is already sorted.",1
806,N (the length of the array) operations achieved for a sorted array.,"The number of operations for insertions sort, under best-case, is  n(n-1)/2. The best case for insertion sort is on a sorted list where it runs is O(n). ",1
807,N (the length of the array) operations achieved for a sorted array.,"Best case would be O(n) or n-1, because that's what it takes to scan the array and make one swap. The array would then be sorted and would take only 1 operation.",1
808,N (the length of the array) operations achieved for a sorted array.,Best case-1 Worst Case-N,1
809,N (the length of the array) operations achieved for a sorted array.,It will do (n) operations where (n) is the number of elements in the array. Best case is when all the elements are already sorted.,2
810,N (the length of the array) operations achieved for a sorted array.,O(n),1
811,N (the length of the array) operations achieved for a sorted array.,Best case is all elements sorted. n-1.,1
812,N (the length of the array) operations achieved for a sorted array.,"The best case scenario for an insertion sort, where all the elements of the array have been already sorted, will cause the for loop to iterate ""x"" times (""x"" being the number of elements in the array) and the while loop to never have to iterate, resulting in the insertion sort to require ""x"" operations. ",2
813,N (the length of the array) operations achieved for a sorted array.,1 operation. the best case scenario s where it is already sorted and does one comparision.,1
814,N (the length of the array) operations achieved for a sorted array.,"n operations, where n is the number of items.",1
815,N (the length of the array) operations achieved for a sorted array.,n-1,1
816,N (the length of the array) operations achieved for a sorted array.,"O(n), the list is already sorted.",1
817,N (the length of the array) operations achieved for a sorted array.,Insertion sort will take n-1 operations if the array is in reverse order.,1
818,N (the length of the array) operations achieved for a sorted array.,"In the best case scenario of an already sorted list, insertion sort will progress once through the list.  So the number of operations is directly proportional to the number of elements in the list.  Also noted as O(n) in big o notation. ",2
819,N (the length of the array) operations achieved for a sorted array.,1 where there is a list of two ints and only one must be moved.,1
820,N (the length of the array) operations achieved for a sorted array.,"Best case is N, while the worst case is N factorial.",1
821,N (the length of the array) operations achieved for a sorted array.,n-1 The best case is when the array is already sorted.,1
822,N (the length of the array) operations achieved for a sorted array.,worst case its = O(n) time best case its = O(n^2) time,1
823,N (the length of the array) operations achieved for a sorted array.,N number of times.  Where N equals the number of elements in the list.  Best-case scenario is that the elements in the list are already sorted.,2
824,N (the length of the array) operations achieved for a sorted array.,the best case scenario for insertion sort is a list that is already sorted. the number of operations would be the same as the number of elements,2
825,N (the length of the array) operations achieved for a sorted array.,"insertion sort will make zero operations (and length - 1 comparisons) in the best case scenario, that is, when the array its given is already in order.",1
826,N (the length of the array) operations achieved for a sorted array.,theta(n) the best case senario is that everything is already sorted,1
827,N (the length of the array) operations achieved for a sorted array.,n operations  The best case scenario is when all the numbers are in increasing order.,2
828,N (the length of the array) operations achieved for a sorted array.,"it could be considered that having only one item would be the easiest to sort, but this could also be a trivial result as nothing is moved  having two items allows the algorithm to sort the items into the correct order",1
829,N (the length of the array) operations achieved for a sorted array.,the best case is if it only has to look through the list once. The best case scenario is when it goes through the list and doesn't have to make any changes (the list is already sorted),1
830,N (the length of the array) operations achieved for a sorted array.,very simplistic it moves one element from the list by one and inserting them in their correct position into a new slot then starting over. best case is (0)1,1
831,When the size of the array to be sorted is 1 (or 2),"The base case for a recursive merge sort is one number.  One number by itself is a sorted list, regardless of what number it is.",2
832,When the size of the array to be sorted is 1 (or 2),The base case for a recursive implementation of merge sort is when the sequence being passed to merge sort has less than 2 elements.,2
833,When the size of the array to be sorted is 1 (or 2),The base case for a recursive implementation of merge sort is one.,2
834,When the size of the array to be sorted is 1 (or 2),The best case is the same as the worst case O(n log n) for a recursive merge sort.,1
835,When the size of the array to be sorted is 1 (or 2),there is one object in the split array to sort.,2
836,When the size of the array to be sorted is 1 (or 2),The base case is when the length of the current array is 1.,2
837,When the size of the array to be sorted is 1 (or 2),O(nlog(n)),1
838,When the size of the array to be sorted is 1 (or 2),Best case is one element.  One element is sorted.,2
839,When the size of the array to be sorted is 1 (or 2),If the array being sorted has 0 or 1 elements,1
840,When the size of the array to be sorted is 1 (or 2),"T(n) = 0, if n&lt;2.",1
841,When the size of the array to be sorted is 1 (or 2),"A list size of 1, where it is already sorted.",2
842,When the size of the array to be sorted is 1 (or 2),Single element in the array,2
843,When the size of the array to be sorted is 1 (or 2),n * log( n ),1
844,When the size of the array to be sorted is 1 (or 2),A list or array of only 1 element.,2
845,When the size of the array to be sorted is 1 (or 2),where you only must merge sort once,1
846,When the size of the array to be sorted is 1 (or 2),A single Element on the Array.,2
847,When the size of the array to be sorted is 1 (or 2),There is only one element in the subarray.,2
848,When the size of the array to be sorted is 1 (or 2),"if the array length is less than or equal to 1, then that array is returned to the other array and merged together",1
849,When the size of the array to be sorted is 1 (or 2),"if (right &gt; left)   {     mid = (right + left) / 2;     m_sort(numbers, temp, left, mid);     m_sort(numbers, temp, mid+1, right);      merge(numbers, temp, left, mid+1, right);   } ",1
850,When the size of the array to be sorted is 1 (or 2),The sequence of numbers has zero or one elements.,2
851,When the size of the array to be sorted is 1 (or 2),one element in an array,2
852,When the size of the array to be sorted is 1 (or 2),array of length 1,2
853,When the size of the array to be sorted is 1 (or 2),the array has one element,2
854,When the size of the array to be sorted is 1 (or 2),"When there is only one element in the array, or when the starting element in the array is the same as the ending element.",1
855,When the size of the array to be sorted is 1 (or 2),"when each half or the original array has nothing else to sort, and puts the halfs back together",1
856,When the size of the array to be sorted is 1 (or 2),the size of the list being sent is &lt;= 1,1
857,When the size of the array to be sorted is 1 (or 2),O(n log n),1
858,A variable that contains the address in memory of another variable.,Its a location in memory that contains the memory address of another location in memory that contains information.,2
859,A variable that contains the address in memory of another variable.,A pointer is a variable that contains a memory address as its value.,2
860,A variable that contains the address in memory of another variable.,A pointer is a variable which stores the address of another variable.,2
861,A variable that contains the address in memory of another variable.,Pointers are variables that contain as their values memory addresses of other variables.,2
862,A variable that contains the address in memory of another variable.,A data type whose value refers to another value stored elsewhere in the computer memory using its address.,1
863,A variable that contains the address in memory of another variable.,a pointer holds a memory location,1
864,A variable that contains the address in memory of another variable.,a name that represents actual location or value of a data type. int *bPtr points to an integer value.,1
865,A variable that contains the address in memory of another variable.,A variable that stores the address of another variable,2
866,A variable that contains the address in memory of another variable.,a pointer is a programming language data type whose value refers directly to (or points to) another value stored elsewhere in the computer memory using its address,2
867,A variable that contains the address in memory of another variable.,A data type whose value refers to another value stored somewhere else in the computer memory using its address.,2
868,A variable that contains the address in memory of another variable.,"It is like a variable however instead of holding data, it holds a location in memory.",1
869,A variable that contains the address in memory of another variable.,A pointer is a reference to a location in memory,2
870,A variable that contains the address in memory of another variable.,A pointer is a reference to the memory location of an object.,1
871,A variable that contains the address in memory of another variable.,A pointer is a variable that contains the memory address of a variable that has a value.,2
872,A variable that contains the address in memory of another variable.,"It is a variable that contains not only a *value but has a memory address associated with it, and can be moved along a string or an array by jumping up one memory address.",1
873,A variable that contains the address in memory of another variable.,Contains a variable's memory address as a value.,2
874,A variable that contains the address in memory of another variable.,variable that points to the memory address of another variable and it is type specific.,2
875,A variable that contains the address in memory of another variable.,An element that references a memory cell,2
876,A variable that contains the address in memory of another variable.,Is a reference call to the place in memory where the object is stored.,1
877,A variable that contains the address in memory of another variable.,a variable that contains the address of another variable,2
878,A variable that contains the address in memory of another variable.,"A pointer variable contains the number of a memory address as its value, which may be null or 0, or the address of some value stored in memory.",2
879,A variable that contains the address in memory of another variable.,A pointer is a variable that contains a memory address of anther variable,2
880,A variable that contains the address in memory of another variable.,A variable that contains the memory address of another variable that contains a specific value.,2
881,A variable that contains the address in memory of another variable.,a variable with a memory address as the value,1
882,A variable that contains the address in memory of another variable.,it is a type that points to something else. It is the memory address of something else,1
883,A variable that contains the address in memory of another variable.,A pointer is a way to get at another object. Essentially it is a way to grab an instance of an object and then either pass that instance a message or retreive some data from that object. A pointer is actually just an address of where an instance is held in memory.,1
884,The memory address of its operand.,This operator returns the memory address of its operand.,2
885,The memory address of its operand.,The address operator returns the memory address of its operand.,2
886,The memory address of its operand.,Returns memory address of its operand.,2
887,The memory address of its operand.,The address (&) operator returns the memory address of its operand.,2
888,The memory address of its operand.,Returns the memory address of its operand.,2
889,The memory address of its operand.,returns the place in memory of that element,1
890,The memory address of its operand.,The address of the where the data is stored: &b will return the address of b.,1
891,The memory address of its operand.,The & operator returns the address of a variable,2
892,The memory address of its operand.,"the ampersand (&) means ""pass by reference"". When the function is called, a pointer to the variable, instead of the variable itself, will be passed into the function.",1
893,The memory address of its operand.,& returns the memory address of its operand.,2
894,The memory address of its operand.,the address of the variable in memory,2
895,The memory address of its operand.,Returns the address location in memory of the item.,1
896,The memory address of its operand.,The & operator returns the memory address of the variable it precedes.,2
897,The memory address of its operand.,"The memory address of operand, 0x000000 or something along those lines. ",1
898,The memory address of its operand.,The object's memory address.,1
899,The memory address of its operand.,the reference to a variable,1
900,The memory address of its operand.,returns the memory address of its operand,2
901,The memory address of its operand.,memory address of its operand,2
902,The memory address of its operand.,returns the address number of the specified variable,1
903,The memory address of its operand.,"It returns the memory address of it's operand. That is, if applied to a normal variable, it gives the variable's memory address, just as a pointer variable might.",1
904,The memory address of its operand.,The & is a unary operator that returns the memory address of its operand,2
905,The memory address of its operand.,the address of the variable it is attached to,1
906,The memory address of its operand.,the memory address of its operand,2
907,The memory address of its operand.,returns the address of what it is put in front of,1
908,The memory address of its operand.,returns a pointer,1
909,An alias (synonym) for the name of the object that its operand points to in memory. It is the dereferencing operator.,returns a synonym for the object to which its pointer operand points.,2
910,An alias (synonym) for the name of the object that its operand points to in memory. It is the dereferencing operator.,The star operator returns a synonym for the object to which its pointer operand points.,2
911,An alias (synonym) for the name of the object that its operand points to in memory. It is the dereferencing operator.,Returns synonym for the object its operand points to.,2
912,An alias (synonym) for the name of the object that its operand points to in memory. It is the dereferencing operator.,"It returns a synonym, alias or nickname of the name of the object that its operand points to in memory (dereferencing the pointer).",2
913,An alias (synonym) for the name of the object that its operand points to in memory. It is the dereferencing operator.,Returns an alias/nickname for the object to which the pointer operand points.,2
914,An alias (synonym) for the name of the object that its operand points to in memory. It is the dereferencing operator.,the * operator returns the value in the memory address the element points to.,1
915,An alias (synonym) for the name of the object that its operand points to in memory. It is the dereferencing operator.,The * returns the value,1
916,An alias (synonym) for the name of the object that its operand points to in memory. It is the dereferencing operator.,The * operator returns the dereferenced pointer variable (ie: it returns the value of whatever variable the pointer is pointing to),2
917,An alias (synonym) for the name of the object that its operand points to in memory. It is the dereferencing operator.,The dereferencing operator returns the dereferenced object.,1
918,An alias (synonym) for the name of the object that its operand points to in memory. It is the dereferencing operator.,* returns the synonym for the object its operand points to.,2
919,An alias (synonym) for the name of the object that its operand points to in memory. It is the dereferencing operator.,it returns the information in the address the pointer points to.,1
920,An alias (synonym) for the name of the object that its operand points to in memory. It is the dereferencing operator.,the star operator returns the value at the memory address the pointer is pointing at.,1
921,An alias (synonym) for the name of the object that its operand points to in memory. It is the dereferencing operator.,The star operator returns the object at that memory location.,1
922,An alias (synonym) for the name of the object that its operand points to in memory. It is the dereferencing operator.,The * operator returns the value of the object's memory address it precedes.,1
923,An alias (synonym) for the name of the object that its operand points to in memory. It is the dereferencing operator.,The value of the object that the operand points to,1
924,An alias (synonym) for the name of the object that its operand points to in memory. It is the dereferencing operator.,The value stored in the object being pointed to.,1
925,An alias (synonym) for the name of the object that its operand points to in memory. It is the dereferencing operator.,the value of the variable the pointer points to.,1
926,An alias (synonym) for the name of the object that its operand points to in memory. It is the dereferencing operator.,returns synonym for the object its operand points to,2
927,An alias (synonym) for the name of the object that its operand points to in memory. It is the dereferencing operator.,synonym for the object its operand points to,2
928,An alias (synonym) for the name of the object that its operand points to in memory. It is the dereferencing operator.,Returns synonym for the object its operand points to,2
929,An alias (synonym) for the name of the object that its operand points to in memory. It is the dereferencing operator.,"It dereferences a pointer, meaning it returns the value stored in the memory address a pointer refers to.",1
930,An alias (synonym) for the name of the object that its operand points to in memory. It is the dereferencing operator.,It is unary operator that returns the value of the variable located at the address,1
931,An alias (synonym) for the name of the object that its operand points to in memory. It is the dereferencing operator.,a reference to a = variable,1
932,An alias (synonym) for the name of the object that its operand points to in memory. It is the dereferencing operator.,a synonym for the object to which its pointer operand points,2
933,An alias (synonym) for the name of the object that its operand points to in memory. It is the dereferencing operator.,it returns the actual data at the address pointed to,1
934,An alias (synonym) for the name of the object that its operand points to in memory. It is the dereferencing operator.,will return zero or many characters placed before the operator,1
935,"By initializing a pointer to point to the first element of the array, and then incrementing this pointer with the index of the array element.",The array itself can be signed to a pointer or each element of the array can be assigned to a pointer.,1
936,"By initializing a pointer to point to the first element of the array, and then incrementing this pointer with the index of the array element.",An array can be addressed in pointer/offset notation by setting a pointer variable equal to the variable name of the array. Elements of the array can then be accessed by adding an offset value to the pointer variable.,1
937,"By initializing a pointer to point to the first element of the array, and then incrementing this pointer with the index of the array element.",Element b[ n ] can be accessed by  *( bPtr + n ).,1
938,"By initializing a pointer to point to the first element of the array, and then incrementing this pointer with the index of the array element.",Using either the name of the array as a pointer or using a separate pointer that points to the array.,1
939,"By initializing a pointer to point to the first element of the array, and then incrementing this pointer with the index of the array element.",An element b[3] can be referenced by using *( bPtr + 3) instead.,1
940,"By initializing a pointer to point to the first element of the array, and then incrementing this pointer with the index of the array element.",you get the memory location of the first element and the you add an offset to it to get other elements.,2
941,"By initializing a pointer to point to the first element of the array, and then incrementing this pointer with the index of the array element.",yes *(array +offset),1
942,"By initializing a pointer to point to the first element of the array, and then incrementing this pointer with the index of the array element.","The name of an array is considered to be a pointer in C++, and can be passed as such in functions parameters. Declaring int a[10]; creates a pointer ""a"" which stores the address of a[0].",1
943,"By initializing a pointer to point to the first element of the array, and then incrementing this pointer with the index of the array element.",Element b[ n ] can be accessed by  *( bPtr + n ) is an example of how an array can be addressed as pointer/offset notation.,1
944,"By initializing a pointer to point to the first element of the array, and then incrementing this pointer with the index of the array element.",*(array + element),1
945,"By initializing a pointer to point to the first element of the array, and then incrementing this pointer with the index of the array element.",*f[3],1
946,"By initializing a pointer to point to the first element of the array, and then incrementing this pointer with the index of the array element.",you can have a pointer to the front of the array and add to the memory location (or offset from the initial value).,2
947,"By initializing a pointer to point to the first element of the array, and then incrementing this pointer with the index of the array element.","The pointer to the array will initially point to the first element of that array.  When the pointer is incremented, it will point to the next element, and so on.",1
948,"By initializing a pointer to point to the first element of the array, and then incrementing this pointer with the index of the array element.",With int x[10]; int *xPtr; xPtr = x; Address &x[1] is the same as xPtr + 1.,1
949,"By initializing a pointer to point to the first element of the array, and then incrementing this pointer with the index of the array element.",Takes the number of array elements and points to each at a time,1
950,"By initializing a pointer to point to the first element of the array, and then incrementing this pointer with the index of the array element.",The array can act as a pointer or be referenced by a pointer.  *(arrayPtr + 3) or *(array + 3),1
951,"By initializing a pointer to point to the first element of the array, and then incrementing this pointer with the index of the array element.",by using the *(pointer + element-index),1
952,"By initializing a pointer to point to the first element of the array, and then incrementing this pointer with the index of the array element.",using the star operator.   array: b[n] can be accessed by *(bpointer +n),1
953,"By initializing a pointer to point to the first element of the array, and then incrementing this pointer with the index of the array element.",Element A[n] can be accessed by *(APtr + n),1
954,"By initializing a pointer to point to the first element of the array, and then incrementing this pointer with the index of the array element.","by referencing a pointer and referring to other pointers relative to the first pointer(pointer+1, pointer +2, etc)",1
955,"By initializing a pointer to point to the first element of the array, and then incrementing this pointer with the index of the array element.","First, some pointer variable must reference the first entity in the array. Any variable in the array can then be accessed by referring to that first entity's address plus some offset. i.e. ptrToArray = array;  nthEntity = *(ptrToArray + n);",2
956,"By initializing a pointer to point to the first element of the array, and then incrementing this pointer with the index of the array element.",&[b3] is as bptr + 3. Array can be treated as pointer,1
957,"By initializing a pointer to point to the first element of the array, and then incrementing this pointer with the index of the array element.",a[i] = *(a+i),1
958,"By initializing a pointer to point to the first element of the array, and then incrementing this pointer with the index of the array element.",&b[3]  bPtr + 3,1
959,"By initializing a pointer to point to the first element of the array, and then incrementing this pointer with the index of the array element.",*(arrayName + index),1
960,"By initializing a pointer to point to the first element of the array, and then incrementing this pointer with the index of the array element.",multi-dimensional array,0
961,The size in bytes of its operand.,the number of bytes of an array during program compilation.,1
962,The size in bytes of its operand.,The sizeof operator returns the size of the operand.,1
963,The size in bytes of its operand.,Returns size of operand in bytes.,2
964,The size in bytes of its operand.,It returns the size of an array in bytes.,1
965,The size in bytes of its operand.,Returns the size of the array in bytes during the program compilation.,1
966,The size in bytes of its operand.,it returns the size of the argument passed in,1
967,The size in bytes of its operand.,The byte size of the date stored ina variable.,1
968,The size in bytes of its operand.,sizeof returns the size of the operand in bytes,2
969,The size in bytes of its operand.,"The amount of memory required for a specific parameter such as ints, doubles.",1
970,The size in bytes of its operand.,sizeof returns the size of the operand in bytes.,2
971,The size in bytes of its operand.,the size of the information in bits.,1
972,The size in bytes of its operand.,the size of the string.,1
973,The size in bytes of its operand.,sizeof returns the size in bytes of the respective object.,1
974,The size in bytes of its operand.,The sizeof operator returns the total number of bytes of its operand.,2
975,The size in bytes of its operand.,"The size of an operand in bytes. Used with variable names, type names, and constant values",2
976,The size in bytes of its operand.,the size in bytes needed to store the object in memory,1
977,The size in bytes of its operand.,the size of the list object.,1
978,The size in bytes of its operand.,the sizeof operator returns the size in bytes of an array parameter,1
979,The size in bytes of its operand.,the size of operand in bytes,2
980,The size in bytes of its operand.,returns the size in bytes of the specified data,1
981,The size in bytes of its operand.,"It returns the size of an operand in memory, which is checked at compiler-time.",1
982,The size in bytes of its operand.,Return size of operand in bytes,2
983,The size in bytes of its operand.,the total number of bytes of an object.,1
984,The size in bytes of its operand.,total number of bytes in the array,1
985,The size in bytes of its operand.,it returns the size in bytes of a certain variable type,1
986,The size in bytes of its operand.,"it yields the size in bytes of the operand, which can be an expression or the parenthesized name of a type",1
987,"There are four ways: nonconstant pointer to constant data, nonconstant pointer to nonconstant data, constant pointer to constant data, constant pointer to nonconstant data.",They can be passed by value or by reference,1
988,"There are four ways: nonconstant pointer to constant data, nonconstant pointer to nonconstant data, constant pointer to constant data, constant pointer to nonconstant data.","Nonconstant pointer to nonconstant data, nonconstant pointer to constant data, constant pointer to nonconstant data, constant pointer to constant data.",2
989,"There are four ways: nonconstant pointer to constant data, nonconstant pointer to nonconstant data, constant pointer to constant data, constant pointer to nonconstant data.","Four different ways: Nonconstant pointer to nonconstant data, a nonconstant pointer to constant data, a constant pointer to nonconstant data and a constant pointer to constant data.",2
990,"There are four ways: nonconstant pointer to constant data, nonconstant pointer to nonconstant data, constant pointer to constant data, constant pointer to nonconstant data.",Pass-by-value or pass-by-reference.,1
991,"There are four ways: nonconstant pointer to constant data, nonconstant pointer to nonconstant data, constant pointer to constant data, constant pointer to nonconstant data.",you can pass a pointer to a pointer or pass a reference to pointer.,1
992,"There are four ways: nonconstant pointer to constant data, nonconstant pointer to nonconstant data, constant pointer to constant data, constant pointer to nonconstant data.",by address &bPtr or directly bPtr.,1
993,"There are four ways: nonconstant pointer to constant data, nonconstant pointer to nonconstant data, constant pointer to constant data, constant pointer to nonconstant data.","Nonconstant pointer to nonconstant data, constant pointer to nonconstant data, nonconstant pointer to constant data, constant pointer to constant data. ",2
994,"There are four ways: nonconstant pointer to constant data, nonconstant pointer to nonconstant data, constant pointer to constant data, constant pointer to nonconstant data.",By argument and reference.,1
995,"There are four ways: nonconstant pointer to constant data, nonconstant pointer to nonconstant data, constant pointer to constant data, constant pointer to nonconstant data.","Nonconstant pointer to nonconstant data, nonconstant pointer to constant data, constant pointer to nonconstant data, and constant pointer to constant data.",2
996,"There are four ways: nonconstant pointer to constant data, nonconstant pointer to nonconstant data, constant pointer to constant data, constant pointer to nonconstant data.",pass by value and pass by reference with reference or pointer arguments.,1
997,"There are four ways: nonconstant pointer to constant data, nonconstant pointer to nonconstant data, constant pointer to constant data, constant pointer to nonconstant data.",you can pass them with the pointer (*) or the memory address (&),1
998,"There are four ways: nonconstant pointer to constant data, nonconstant pointer to nonconstant data, constant pointer to constant data, constant pointer to nonconstant data.",nonconst -&gt; nonconst const -&gt; nonconst nonconst -&gt; const const -&gt; const,2
999,"There are four ways: nonconstant pointer to constant data, nonconstant pointer to nonconstant data, constant pointer to constant data, constant pointer to nonconstant data.",Nonconstant pointer to nonconstant data Constant pointer to nonconstant data Nonconstant pointer to constant data Constant point to constant data,2
1000,"There are four ways: nonconstant pointer to constant data, nonconstant pointer to nonconstant data, constant pointer to constant data, constant pointer to nonconstant data.","Non-constant pointer to non-constant data, non-constant pointer to constant data, constant pointer to constant data, constant pointer to non-constant data.",2
1001,"There are four ways: nonconstant pointer to constant data, nonconstant pointer to nonconstant data, constant pointer to constant data, constant pointer to nonconstant data.",Pass by reference with reference arguments. function(int &)  Pass by reference with pointer arguments. function(int *),1
1002,"There are four ways: nonconstant pointer to constant data, nonconstant pointer to nonconstant data, constant pointer to constant data, constant pointer to nonconstant data.",you can pass the reference or the dereference in a function,1
1003,"There are four ways: nonconstant pointer to constant data, nonconstant pointer to nonconstant data, constant pointer to constant data, constant pointer to nonconstant data.",1. nonconstant pointer to nonconstant data. Its delcaration does no include  const qualifier. 2. nonconstant pointer to constant data. Provides the performance of pass-by-reference and the protection of pass-by-value 3. Constant pointer to nonconstant data.  4. Constant pointer to constant date.,2
1004,"There are four ways: nonconstant pointer to constant data, nonconstant pointer to nonconstant data, constant pointer to constant data, constant pointer to nonconstant data.","constant pointer to constant data, constant pointer to nonconstant data, nonconstant pointer to constant data, nonconstant pointer to nonconstant data",2
1005,"There are four ways: nonconstant pointer to constant data, nonconstant pointer to nonconstant data, constant pointer to constant data, constant pointer to nonconstant data.",Nonconstant pointer to nonconstant data Nonconstant pointer to constant data Constant pointer to nonconstant data Constant pointer to constant data,2
1006,"There are four ways: nonconstant pointer to constant data, nonconstant pointer to nonconstant data, constant pointer to constant data, constant pointer to nonconstant data.","Pointers may be passed to functions by value, by reference with reference arguments, or by reference with pointer arguments.",1
1007,"There are four ways: nonconstant pointer to constant data, nonconstant pointer to nonconstant data, constant pointer to constant data, constant pointer to nonconstant data.",There are four way to pass pointer to a function 1. non constant pointer to non constant data 2.non constant pointer to  constant data. 3. constant pointer to non constant data. 4. constant pointer to  constant data.,2
1008,"There are four ways: nonconstant pointer to constant data, nonconstant pointer to nonconstant data, constant pointer to constant data, constant pointer to nonconstant data.",nonconstant pointer to nonconstant data nonconstant pointer to constant data constant pointer to nonconstant data constant pointer to constant data,2
1009,"There are four ways: nonconstant pointer to constant data, nonconstant pointer to nonconstant data, constant pointer to constant data, constant pointer to nonconstant data.","pass by value, pass by reference with reference arguments, pass by reference with pointer arguments",1
1010,"There are four ways: nonconstant pointer to constant data, nonconstant pointer to nonconstant data, constant pointer to constant data, constant pointer to nonconstant data.","you can pass it where either the pointer cant be moved, the data pointed to cant be changed, or both or neither",1
1011,"There are four ways: nonconstant pointer to constant data, nonconstant pointer to nonconstant data, constant pointer to constant data, constant pointer to nonconstant data.","there are only two ways to pass something, by value and by reference. Use of dot or pointer operators within the receiving function and use of '&' operator inside the passing function",1
1012,The address of the location in memory where the function code resides.,A pointer that points to the memory address of the beginning part of a functions.  pretty much the pointer points to the function so it can be called to execute.,2
1013,The address of the location in memory where the function code resides.,A function pointer is a pointer that contains the address of the  function in memory.,2
1014,The address of the location in memory where the function code resides.,"Function Pointers are pointers, i.e. variables, which point to the address of a function.",2
1015,The address of the location in memory where the function code resides.,"A pointer to a function is the address where the code for the function resides. They can be passed to functions, returned from functions, stored in arrays and assigned to other pointers.",2
1016,The address of the location in memory where the function code resides.,It contains the address of the function in memory.,2
1017,The address of the location in memory where the function code resides.,when it is dereferenced a function pointer calls its function with zero or more arguments.,1
1018,The address of the location in memory where the function code resides.,a pointer to a function,1
1019,The address of the location in memory where the function code resides.,"A pointer to a function itself, contains the address of the function and can be used to call that function",2
1020,The address of the location in memory where the function code resides.,A pointer to a function that contains the addresses of the function.,2
1021,The address of the location in memory where the function code resides.,a pointer that contains the address of a function,2
1022,The address of the location in memory where the function code resides.,a function pointer is a pointer to a function. It can be used in substitution for calling a function.,2
1023,The address of the location in memory where the function code resides.,Points to the memory address of a function.  Kind of like breaking a branch off of a tree object and hitting other objects with it.,2
1024,The address of the location in memory where the function code resides.,"They are pointers that contain the addresses to functions, they can be passed and returned from functions, as well as stored in arrays and assigned to other function pointers.",2
1025,The address of the location in memory where the function code resides.,Pointer variables that point to function addresses.,2
1026,The address of the location in memory where the function code resides.,Contains the address of the function in memory.,2
1027,The address of the location in memory where the function code resides.,"a pointer that points to a function itself, which allows passing a function as a parameter to another function.",1
1028,The address of the location in memory where the function code resides.,pointers that contain the addresses of functions.,2
1029,The address of the location in memory where the function code resides.,is a pointer that contains the address of a function,2
1030,The address of the location in memory where the function code resides.,a pointer that contains the address of the function definition,1
1031,The address of the location in memory where the function code resides.,"A function pointer contains the memory address of a function. Using a function pointer, a function can be passed to or returned by another function. Function pointers can also be stored in arrays.",2
1032,The address of the location in memory where the function code resides.,Function pointer is a pointer to a function. function pointer contains address of functions,2
1033,The address of the location in memory where the function code resides.,a pointer that contains the address of a function in memory.,2
1034,The address of the location in memory where the function code resides.,it contains the address of the function in memory,2
1035,The address of the location in memory where the function code resides.,it is a pointer that points to the address of a function.,2
1036,The address of the location in memory where the function code resides.,"When dereferenced, a function pointer invokes a function, passing it zero or more arguments just like a normal function. In programming languages like C, function pointers can be used to simplify code, such as replacing large switch statements.",1
1037,A collection of elements that can be allocated dynamically.,"Consists of sequence of nodes, each containing a number of data fields and one or two links called pointers that point to the next or previous nodes. ",1
1038,A collection of elements that can be allocated dynamically.,A linked list is a list in which each item in the list points to the next item in the list.,1
1039,A collection of elements that can be allocated dynamically.,"A linked list is a chain of structs or records called nodes and you have the ability to add, delete, or retrieve items. ",1
1040,A collection of elements that can be allocated dynamically.,"A list of elements, or nodes, that are linked to one another such that each element points to the next element.",1
1041,A collection of elements that can be allocated dynamically.,"A sequence of nodes, each containing data fields (specified by programmer) and pointer(s) which can point to the next or previous nodes.",1
1042,A collection of elements that can be allocated dynamically.,a list of nodes where each node contains a data member and also a pointer to the next node.,1
1043,A collection of elements that can be allocated dynamically.,A list of items linked together.  Each item is linked to its successor.,1
1044,A collection of elements that can be allocated dynamically.,A linked list is a chain of nodes that each store a single piece of data and pointer variables that point to other nodes in the list.,1
1045,A collection of elements that can be allocated dynamically.,"one of the fundamental data structures, and can be used to implement other data structures. It consists of a sequence of nodes, each containing arbitrary data fields and one or two references (""links"") pointing to the next and/or previous nodes. ",1
1046,A collection of elements that can be allocated dynamically.,"A data structure in a sequence of nodes, each containing arbitrary data fields and one or two references (""links"") pointing to the next and/or previous nodes.",1
1047,A collection of elements that can be allocated dynamically.,Information in memory linked to the next piece of information and can only be linked forwards and not backwards.,1
1048,A collection of elements that can be allocated dynamically.,"A linked list is a data structure that is not necessarily in the same contiguous memory space (such as arrays). It holds the data type and points to the next data item in the list, or in a doubly linked list also to the previous item.",2
1049,A collection of elements that can be allocated dynamically.,A linked list is a data structure containing one or more data elements with a pointer to the next node.,1
1050,A collection of elements that can be allocated dynamically.,"A series of ""Nodes"" structures with a value and a pointer that point to a similar ""Node"". Not quite an array, but still can carry a list of values. ",1
1051,A collection of elements that can be allocated dynamically.,A data type that contains a pointer to at least the next  element in a list.,1
1052,A collection of elements that can be allocated dynamically.,Each component contains a Node - a data item and a pointer to the next item in the list,1
1053,A collection of elements that can be allocated dynamically.,"A linked list is a chain of structs or records called nodes.  Each node has at least two members, one of which points to the next item or node in the list.",1
1054,A collection of elements that can be allocated dynamically.,"An array based list that uses an implicit ordering scheme, often using pointers.",1
1055,A collection of elements that can be allocated dynamically.,a series of structures containing data items and a pointer that links the structure to the next structure.,1
1056,A collection of elements that can be allocated dynamically.,"A linked list is a collection of Objects each containing at least one data member, and a pointer to the next object in the list (and the previous object in the case of a doubly linked list)",1
1057,A collection of elements that can be allocated dynamically.,A link list is a data structure which is built from structures and pointers. It forms a chain of nodes with pointers representing the links of the chain and holding the entire thing together,1
1058,A collection of elements that can be allocated dynamically.,its a list of pointers that are linked 2 each other. every pointer points to the next pointer which has the next element,1
1059,A collection of elements that can be allocated dynamically.,linear collection of self-referential nodes connected by pointers.,1
1060,A collection of elements that can be allocated dynamically.,the items of a data structure are linked to each other using pointers,1
1061,A collection of elements that can be allocated dynamically.,A list of objects where each object contains a link to the next item in the list,1
1062,A collection of elements that can be allocated dynamically.,"A linked list is one of the fundamental data structures, and can be used to implement other data structures. It consists of a sequence of nodes, each containing arbitrary data fields and one or two references (""links"") pointing to the next and/or previous nodes.  ",1
1063,The linked lists can be of variable length.,Elements can be inserted into a link list at any point and does not need to be resized unlike an array needs to be.,2
1064,The linked lists can be of variable length.,"Unlike arrays, linked lists can insert and delete without shifting data and change in size easily.",2
1065,The linked lists can be of variable length.,"Array size is fixed,but Linked is not fixed.",2
1066,The linked lists can be of variable length.,You can insert into and delete items from a pointer-based linked list without shifting data.,1
1067,The linked lists can be of variable length.,Arrays must be of a defined size... elements can be added to a linked list w/o defining any size.,2
1068,The linked lists can be of variable length.,"The principal benefit of a linked list over a conventional array is that the order of the linked items may be different from the order that the data items are stored in memory or on disk, allowing the list of items to be traversed in a different order. A linked list is a self-referential datatype because it contains a pointer or link to another datum of the same type. Linked lists permit insertion and removal of nodes at any point in the list in constant time",1
1069,The linked lists can be of variable length.,You can expand when you need it.  You do not have to predetermine the size.,2
1070,The linked lists can be of variable length.,Linked lists are able to grow and shrink in size as needed,2
1071,The linked lists can be of variable length.,Linked list is able to grow in size as needed. Does not require the shifting of items during insertions and deletions,2
1072,The linked lists can be of variable length.,"A linked list is not fixed in size, and does not require the shifting of items during insertions and deletions.",2
1073,The linked lists can be of variable length.,There is no limit as to how many you create where an array can only hold a given amount of information.,1
1074,The linked lists can be of variable length.,Linked lists have constant time insertion and deletion,1
1075,The linked lists can be of variable length.,"Linked lists can be grown dynamically, items don't require shifting, and they have a greater awesome factor than that of arrays.",2
1076,The linked lists can be of variable length.,Linked lists have an indefinite size. They can be added to and taken away from very easily with little difficulty in the shifting of data.,2
1077,The linked lists can be of variable length.,"Nearly infinite size, limited only by system memory and also the ability to expand the size dynamically.",2
1078,The linked lists can be of variable length.,"They grow as needed, while arrays are of fixed size.",2
1079,The linked lists can be of variable length.,Does not have a fixed size. Linked list is able to grow as needed. The time to access an array bases list takes a contant amount of time where as an linked-base like depends on 'i',2
1080,The linked lists can be of variable length.,Linked lists can grow and shrink as you need them to.  Arrays have a fixed size.,2
1081,The linked lists can be of variable length.,more memory can be allocated on the fly for more items,1
1082,The linked lists can be of variable length.,"A linked list may be increased in size as needed, while an array's size is set when it is created",2
1083,The linked lists can be of variable length.,"Array has a fixed size, but linked list is able to grow in size as needed",2
1084,The linked lists can be of variable length.,its resizeable,2
1085,The linked lists can be of variable length.,Linked lists do not have a set size and can grow or shrink as needed.,2
1086,The linked lists can be of variable length.,linked lists are abe to grow as needed to a new size,2
1087,The linked lists can be of variable length.,"The size is not fixed, easier sorting because of no shifting, easier to insert items into the list",2
1088,The linked lists can be of variable length.,The size of array is restricted to declaration. Insertion/Deletion of values in middle of array is not possible.,2
1089,"The elements in an array can be accessed directly (as opposed to linked lists, which require iterative traversal).",Array can retrieve memory from any place in the list while in a link list you have to traverse through each individual node.,2
1090,"The elements in an array can be accessed directly (as opposed to linked lists, which require iterative traversal).","Arrays require less memory than linked lists and allow direct access to a specified item. Also, insertion and deletion in arrays does not require a list traversal.",1
1091,"The elements in an array can be accessed directly (as opposed to linked lists, which require iterative traversal).","Access to a particular element is very fast, because its location in memory can be determined mathematically and accessed directly.",2
1092,"The elements in an array can be accessed directly (as opposed to linked lists, which require iterative traversal).",Arrays are good for random access and good for sequential access which are both in constant time. Where linked lists are linear for random access. Arrays are faster in this case.,2
1093,"The elements in an array can be accessed directly (as opposed to linked lists, which require iterative traversal).","An array is capable of accessing any part of that array based on the index. The link list must be traversed from the beginning or the end, that is, data can only be accessed if it is adjacent to the previous or next nodes.",2
1094,"The elements in an array can be accessed directly (as opposed to linked lists, which require iterative traversal).","On the other hand, arrays allow random access, while linked lists allow only sequential access to elements. Singly-linked lists, in fact, can only be traversed in one direction.",2
1095,"The elements in an array can be accessed directly (as opposed to linked lists, which require iterative traversal).",You have to keep up with the head of the list.,1
1096,"The elements in an array can be accessed directly (as opposed to linked lists, which require iterative traversal).",Arrays are easier to implement and require less memory,1
1097,"The elements in an array can be accessed directly (as opposed to linked lists, which require iterative traversal).",Linked list has an increase complexity of the implementation. The linked list has an array that keeps growing which leads to a increase in memory.,1
1098,"The elements in an array can be accessed directly (as opposed to linked lists, which require iterative traversal).",You don't have to iterate through the entire list to access elements.,1
1099,"The elements in an array can be accessed directly (as opposed to linked lists, which require iterative traversal).",you can go forwards and backwards and point to any piece of data at any given time where linked lists have to point to the next piece of data.,1
1100,"The elements in an array can be accessed directly (as opposed to linked lists, which require iterative traversal).",Take up less memory and are contiguously stored,1
1101,"The elements in an array can be accessed directly (as opposed to linked lists, which require iterative traversal).","Arrays, being fixed, are less error prone.",1
1102,"The elements in an array can be accessed directly (as opposed to linked lists, which require iterative traversal).","Arrays have a set list of values. Meaning you can pick a spot in the array such as a[7] picks the 8th spot in the array. With linked lists you have to keep track with pointers if you want to take specific nodes out, otherwise you must traverse the entire list. ",2
1103,"The elements in an array can be accessed directly (as opposed to linked lists, which require iterative traversal).","direct access to elements, and speed, linked lists have increased search times to access elements even if the list is sorted. ( like getting the last element without a pointer directly to the end of the list. )",1
1104,"The elements in an array can be accessed directly (as opposed to linked lists, which require iterative traversal).",Array items are accessed directly with equal access time,2
1105,"The elements in an array can be accessed directly (as opposed to linked lists, which require iterative traversal).",Array-bases implementations require less memory than a pointer-bases one.,1
1106,"The elements in an array can be accessed directly (as opposed to linked lists, which require iterative traversal).",You can access specific elements quickly in an array.  In a linked list you must traverse the list to get access the same element.,2
1107,"The elements in an array can be accessed directly (as opposed to linked lists, which require iterative traversal).",link lists only allow sequential access where arrays allow random access,1
1108,"The elements in an array can be accessed directly (as opposed to linked lists, which require iterative traversal).","Any entitiy in an array may accessed immediately, whereas a linked list must be traversed one item at a time because each object only points adjacent objects",2
1109,"The elements in an array can be accessed directly (as opposed to linked lists, which require iterative traversal).",Array based implementation requires less memory than lined lists based implementation,1
1110,"The elements in an array can be accessed directly (as opposed to linked lists, which require iterative traversal).",Array-based implementations require less memory than a pointer-based ones,1
1111,"The elements in an array can be accessed directly (as opposed to linked lists, which require iterative traversal).","You can go up and down an array , but you can only go one direction while traversing a linked list.",1
1112,"The elements in an array can be accessed directly (as opposed to linked lists, which require iterative traversal).","arrays allow for the random access of any item cotained a any time, linked lists must be gone through toget to the desired item",2
1113,"The elements in an array can be accessed directly (as opposed to linked lists, which require iterative traversal).","In arrays you have direct access to each element, but in linked lists you have to traverse the list up to the element that you need.",2
1114,"The elements in an array can be accessed directly (as opposed to linked lists, which require iterative traversal).","Array size is fixed. But Linked is not fixed, data is also accessed quicker in array list, also memory requirement is less and no pointers required. Arrays have random access and less overheads compared to Linked list have sequential access only with too much overheads and no cache memory support. On the other hand, arrays allow random access, while linked lists allow only sequential access to elements. Singly-linked lists, in fact, can only be traversed in one direction.",2
1115,By reference.,They are passed by reference because you want the function to change the pointer,1
1116,By reference.,Linked lists are passed as arguments to a function by passing the head pointer of the list by reference.,2
1117,By reference.,- A function with access to a linked list's head pointer has access to the entire list.        - Pass the head ponter to a function as a reference argument.,2
1118,By reference.,By using a node.,1
1119,By reference.,Pass-by-reference,2
1120,By reference.,you send a pointer to an object of the LinkedList class,1
1121,By reference.,Passed as a pointer to the head.,1
1122,By reference.,Passing the head pointer of a linked list to a function gives that function access to all nodes of that linked list,1
1123,By reference.,You have to pass the head pointer to a function since it has access to the entire list.,1
1124,By reference.,You pass the head pointer to a function as a reference argument.,2
1125,By reference.,passes a pointer to a linked list object,1
1126,By reference.,"The linked list object contains the head, through which the other elements are accessible.",1
1127,By reference.,By the head of the list. It takes the head address and traverses from there on in.,1
1128,By reference.,as a pointer node.,1
1129,By reference.,A method with access to a linked list's head pointer as access to the entire list,1
1130,By reference.,A function with access to a linked list's head pointer has access to the entire list. Pass the head pointer to a function as a reference argument,2
1131,By reference.,the head pointer is passed to a function as a reference argument.,2
1132,By reference.,the pointer to the first element is passed to a function,1
1133,By reference.,"linked lists are passed by reference, specificly the Head pointer",2
1134,By reference.,Pass the head pointer to a function as a reference argument,2
1135,By reference.,by refrenece,2
1136,By reference.,By passing the head pointer and going through the list as needed inside the function.,1
1137,By reference.,linked lists are passed by using pointers,1
1138,By reference.,the head object is passed to the function,1
1139,By reference.,"Linked lists permit insertion and removal of nodes at any point in the list in constant time,[1] but do not allow random access. ",0
1140,The last element in a circular linked list points to the head of the list.,"In a circular linked list, every node has a successor which means that the last node's successor is the head or first node.",2
1141,The last element in a circular linked list points to the head of the list.,A circular linked list is a linked list that links items in a continuous circle. This allows the full list to be traversed by starting at any item in the list; a fixed head or tail is not required.,1
1142,The last element in a circular linked list points to the head of the list.,"In a circular linked list, the last node points to the first node.",2
1143,The last element in a circular linked list points to the head of the list.,"On a circular linked list, the end element points to the head, thus making the circle. A basic link list has nothing pointing to the head, and the last element points to null.",2
1144,The last element in a circular linked list points to the head of the list.,the circular linked list's last node points to the begining of the list while a standard linked list points to NULL,2
1145,The last element in a circular linked list points to the head of the list.,The last item in the list points to the head,2
1146,The last element in a circular linked list points to the head of the list.,"In a circular linked list, the last node points back to the first node, there is no NULL",2
1147,The last element in a circular linked list points to the head of the list.,"Circular linked lists are most useful for describing naturally circular structures, and have the advantage of regular structure and being able to traverse the list starting at any point.",1
1148,The last element in a circular linked list points to the head of the list.,A circular linked list has the last node point back to the head of the linked list.,2
1149,The last element in a circular linked list points to the head of the list.,Basic linked list points to a NULL at the end and circular points to the head at the end.,2
1150,The last element in a circular linked list points to the head of the list.,in a circular linked list the the last item points to the first item.,2
1151,The last element in a circular linked list points to the head of the list.,"The circular linked list's tail points to the head, whereas the basic linked list's tail points to a NULL.",2
1152,The last element in a circular linked list points to the head of the list.,a basic linked list has an end with a null value where a circular linked list has a pointer from the end to the beginning,2
1153,The last element in a circular linked list points to the head of the list.,"how to determine the end of the list, in basic linked lists the last element links to a null pointer, while circular linked lists link to the head element at the end.",2
1154,The last element in a circular linked list points to the head of the list.,"No Node in a circular linked list contains NULL, the last Node points pack to a Node within the list.",2
1155,The last element in a circular linked list points to the head of the list.,"The difference between a circular linked list and a basic linked list is that a circular linked list, the last node references the first node. Every node in a circular linked list has a successor and no node in a circular linked list contains NULL.",2
1156,The last element in a circular linked list points to the head of the list.,No node in a circular linked list contains NULL.,1
1157,The last element in a circular linked list points to the head of the list.,in a circular linked list the last element points to the head of the list,2
1158,The last element in a circular linked list points to the head of the list.,"In a regular linked list the last object points to NULL. In a circular linked list, the last object points back to the beginning of the list",2
1159,The last element in a circular linked list points to the head of the list.,"In circular linked list each node has successor, no node contains NULL, while in basic linked list last node contain NULL.",1
1160,The last element in a circular linked list points to the head of the list.,"in a circular linked lists, the last element points to the first",2
1161,The last element in a circular linked list points to the head of the list.,"A circular linked list does not have a last element. Instead, it's last item points to the head of the list.",2
1162,The last element in a circular linked list points to the head of the list.,"in a circular linked list, the last node contains a pointer that goes back to the first node; in a basic linked list, the last node contains a null pointer ",2
1163,The last element in a circular linked list points to the head of the list.,"in a circular linked list, the last object is linked back to the first object.",2
1164,The last element in a circular linked list points to the head of the list.,"In the case of a non circular link list, if you are at the last node of the list and u want to move to first u need to go to one, step back till u reach to first. But in circular link list from last to first you need to make only one move.  In a single link list u can move only in one direction but in double link list u can move in any direction back or forward or forward.  ",1
1165,"All the deletion and insertion operations can be performed in constant time, including those operations performed before a given location in the list or at the end of the list.",they can traverse in both directions,1
1166,"All the deletion and insertion operations can be performed in constant time, including those operations performed before a given location in the list or at the end of the list.",In a doubly linked list you can delete a node without having to traverse the list.,1
1167,"All the deletion and insertion operations can be performed in constant time, including those operations performed before a given location in the list or at the end of the list.",A doubly-linked list allows you to delete a node without traversing the list to establish a trailing pointer.,1
1168,"All the deletion and insertion operations can be performed in constant time, including those operations performed before a given location in the list or at the end of the list.",A doubly linked list allows you to traverse the list in either direction. Each node points to its successor as well as to its predecessor.,1
1169,"All the deletion and insertion operations can be performed in constant time, including those operations performed before a given location in the list or at the end of the list.","Doubly-linked lists can traverse backwards, though they still cannot access data at any point in the list, it can be shorter to traverse backwards.",1
1170,"All the deletion and insertion operations can be performed in constant time, including those operations performed before a given location in the list or at the end of the list.",you can traverse the list from front to back and back to front,1
1171,"All the deletion and insertion operations can be performed in constant time, including those operations performed before a given location in the list or at the end of the list.",You can traverse the list in reverse.,1
1172,"All the deletion and insertion operations can be performed in constant time, including those operations performed before a given location in the list or at the end of the list.",Doubly linked lists can be traversed in both directions,1
1173,"All the deletion and insertion operations can be performed in constant time, including those operations performed before a given location in the list or at the end of the list.","Double-linked lists require more space per node, and their elementary operations are more expensive; but they are often easier to manipulate because they allow sequential access to the list in both directions.",1
1174,"All the deletion and insertion operations can be performed in constant time, including those operations performed before a given location in the list or at the end of the list.",You can traverse forwards and backwards through nodes.,1
1175,"All the deletion and insertion operations can be performed in constant time, including those operations performed before a given location in the list or at the end of the list.",You can point both forwards and backwards,1
1176,"All the deletion and insertion operations can be performed in constant time, including those operations performed before a given location in the list or at the end of the list.",You can go backwards in the linked list and access previous data easier without having to keep track of the previous item,1
1177,"All the deletion and insertion operations can be performed in constant time, including those operations performed before a given location in the list or at the end of the list.",Doubly linked lists allow backward movement through the nodes.,1
1178,"All the deletion and insertion operations can be performed in constant time, including those operations performed before a given location in the list or at the end of the list.","they have double pointers, so each node can point forwards or backwards. Making it a little easer to get to where you need. ",1
1179,"All the deletion and insertion operations can be performed in constant time, including those operations performed before a given location in the list or at the end of the list.",ability to backtrack through a list.,1
1180,"All the deletion and insertion operations can be performed in constant time, including those operations performed before a given location in the list or at the end of the list.",You can move forwards and backwards in the double-linked list. Basic only moves forwards.,1
1181,"All the deletion and insertion operations can be performed in constant time, including those operations performed before a given location in the list or at the end of the list.",The advantage is that each node points to bothe its predecessor and its successor. There are no special cases for insertion and deletion.,1
1182,"All the deletion and insertion operations can be performed in constant time, including those operations performed before a given location in the list or at the end of the list.",each node points to both its predecessor and its successor.,1
1183,"All the deletion and insertion operations can be performed in constant time, including those operations performed before a given location in the list or at the end of the list.",a doubly linked list has pointers in both directions. this allows for access from back to front as well as front to back,1
1184,"All the deletion and insertion operations can be performed in constant time, including those operations performed before a given location in the list or at the end of the list.","A doubly linked list can be traversed either direction, while a normal linked list can only be traversed from start to finish",1
1185,"All the deletion and insertion operations can be performed in constant time, including those operations performed before a given location in the list or at the end of the list.","Double Linked list are often easier to manipulate, because they allow sequential access to the list in both direction",1
1186,"All the deletion and insertion operations can be performed in constant time, including those operations performed before a given location in the list or at the end of the list.","given a node in the list, one can navigate easily in either direction",1
1187,"All the deletion and insertion operations can be performed in constant time, including those operations performed before a given location in the list or at the end of the list.",You can traverse the list both forward and backwards.,1
1188,"All the deletion and insertion operations can be performed in constant time, including those operations performed before a given location in the list or at the end of the list.",a doubly linked list allows you to back up from a node rather than having to go through the entire list again,1
1189,"All the deletion and insertion operations can be performed in constant time, including those operations performed before a given location in the list or at the end of the list.",Gives faster times for some operations such as insertion and deletion,2
1190,"All the deletion and insertion operations can be performed in constant time, including those operations performed before a given location in the list or at the end of the list.","The primary disadvantage of doubly linked lists are that (1) each node requires an extra pointer, requiring more space, and (2) the insertion or deletion of a node takes a bit longer (more pointer operations).",1
1191,Extra space required to store the back pointers.,they take up twice as much memory for each node,2
1192,Extra space required to store the back pointers.,"In a doubly linked list, there are more pointers to set and the mechanics of inserting and deleting are more difficult. Also, the special cases at the beginning or end of the list are more complicated.",1
1193,Extra space required to store the back pointers.,"There are more pointers to set, the mechanics of inserting into and deleting from a doubly linked list are a bit more involved than for a singly linked list.",1
1194,Extra space required to store the back pointers.,Insertion and deletion with a doubly linked list are more involved than with a singly linked list leaving more room for error and complex algorithms.,1
1195,Extra space required to store the back pointers.,"Need more memory to store ""previous"" pointers.",2
1196,Extra space required to store the back pointers.,a node in a doubly linked list takes up more memory than a node in a singly linked list.,2
1197,Extra space required to store the back pointers.,You have to keep up with where you are and you have to consider the predecessor and successor connections when inserting/deleting.,1
1198,Extra space required to store the back pointers.,"Each node requires an extra node, requires more memory, and is more difficult to insert and remove individual nodes",2
1199,Extra space required to store the back pointers.,"Double-linked lists require more space per node, and their elementary operations are more expensive",2
1200,Extra space required to store the back pointers.,More difficult to delete and create nodes.,1
1201,Extra space required to store the back pointers.,They use more memory and you have to make 2 pointers and update 2 pointers each time you change the list.,2
1202,Extra space required to store the back pointers.,nodes take up more memory,2
1203,Extra space required to store the back pointers.,"Each node requires an extra pointer (space requirements increased), Insertion or deletion of a node takes a longer (more pointer operations).",2
1204,Extra space required to store the back pointers.,its a little more confusing. The special cases at the end and beginning become more difficult to do.,1
1205,Extra space required to store the back pointers.,increased actions to add and remove elements to the linked list.,1
1206,Extra space required to store the back pointers.,"Inserting and deleting in a double-linked list is more involved, and has special cases at the beginning and end.",1
1207,Extra space required to store the back pointers.,The main disadvanate is that if hard to remove all items in the list.,1
1208,Extra space required to store the back pointers.,"each node requires an extra pointer, taking up more storage.  insertions and deletions require more pointer operations.",2
1209,Extra space required to store the back pointers.,"in a doubly linked list there are twice as many pointers for each element , therefore more memory is used",2
1210,Extra space required to store the back pointers.,The process of adding and removing Nodes in a Doubly linked list is more complex than in a basic linked list,1
1211,Extra space required to store the back pointers.,"Double linked lists require more space per node, and their elementary operation are more expensive",2
1212,Extra space required to store the back pointers.,"1- each node requires an extra pointer, requiring more space 2- the insertion or deletion of a node takes a bit longer, more pointer operations",2
1213,Extra space required to store the back pointers.,It takes up twice the storage needed.,2
1214,Extra space required to store the back pointers.,"using more pointers to enable the backward movement takes up more memory, having more pointers make it slightly more work to add or remove a node from the list",2
1215,Extra space required to store the back pointers.,"increased memory requirements, slightly more complicated when modifying elements in the list",2
1216,"A data structure that can store elements, which has the property that the last item added will be the first to be removed (or last-in-first-out)",A data structure for storing items which are to be accessed in last-in first-out order that can be implemented in three ways.,2
1217,"A data structure that can store elements, which has the property that the last item added will be the first to be removed (or last-in-first-out)",A stack is an abstract data type that is based on the principle that the last element inserted into the stack will be the first element removed from the stack.,2
1218,"A data structure that can store elements, which has the property that the last item added will be the first to be removed (or last-in-first-out)",Stores a set of elements in a particular order.,1
1219,"A data structure that can store elements, which has the property that the last item added will be the first to be removed (or last-in-first-out)","An ADT whose most recently inserted item is the first item removed or retrieved. This property is called last in, first out (LIFO). Items enter and leave a stack at its top.",2
1220,"A data structure that can store elements, which has the property that the last item added will be the first to be removed (or last-in-first-out)",A list in which only the top (or last item added) can be modified.,1
1221,"A data structure that can store elements, which has the property that the last item added will be the first to be removed (or last-in-first-out)",a stack is a data structure that uses push to insert an item and pop to remove ad item. The stack use a last in first out structure for inserting and removing items.,2
1222,"A data structure that can store elements, which has the property that the last item added will be the first to be removed (or last-in-first-out)",A data structure that stores data using LIFO.,2
1223,"A data structure that can store elements, which has the property that the last item added will be the first to be removed (or last-in-first-out)","A stack is similar to an array, but does not allow for random access. Stacks only allow a user to retrieve the last item put into the stack. Last in, fist out.",2
1224,"A data structure that can store elements, which has the property that the last item added will be the first to be removed (or last-in-first-out)",Stores a set of elements in a particular order. Stack principle: LAST  IN  FIRST  OUT. It means: the last element inserted is the first one to be removed.,2
1225,"A data structure that can store elements, which has the property that the last item added will be the first to be removed (or last-in-first-out)",A stack is an ADT that stores a set of elements in a particular order.,1
1226,"A data structure that can store elements, which has the property that the last item added will be the first to be removed (or last-in-first-out)","a data type that stores a set of elements in a certain order, last in, first out.",2
1227,"A data structure that can store elements, which has the property that the last item added will be the first to be removed (or last-in-first-out)",a data structure that moves elements in last in first out,2
1228,"A data structure that can store elements, which has the property that the last item added will be the first to be removed (or last-in-first-out)",Stores a set of elements in a last in first out order.,2
1229,"A data structure that can store elements, which has the property that the last item added will be the first to be removed (or last-in-first-out)",A list that can be added to or removed from only from the top.,2
1230,"A data structure that can store elements, which has the property that the last item added will be the first to be removed (or last-in-first-out)","a stack is an Abstract data type which operates on a last in first out basis for storing a list of objects, and does not support ( at least in the pure stack) peeking at a element without removing the rest of the stack first.",2
1231,"A data structure that can store elements, which has the property that the last item added will be the first to be removed (or last-in-first-out)",Stores a set of elements in a particular order based on the principle of Last In First Out (LIFO).,2
1232,"A data structure that can store elements, which has the property that the last item added will be the first to be removed (or last-in-first-out)","an object list that stores elements in a particular order, the first object inserted is at the bottom with the last object at the top so the first object in is the last object out.",2
1233,"A data structure that can store elements, which has the property that the last item added will be the first to be removed (or last-in-first-out)",An ADT that stores a set of elements in a particular order. The stack principles are LIFO. The last item inserted in the list is the first out.,2
1234,"A data structure that can store elements, which has the property that the last item added will be the first to be removed (or last-in-first-out)",An abstract data type that stores a set of elements in a particular order.,1
1235,"A data structure that can store elements, which has the property that the last item added will be the first to be removed (or last-in-first-out)",a collection of data to be executed in the order of last in first out,2
1236,"A data structure that can store elements, which has the property that the last item added will be the first to be removed (or last-in-first-out)","A stack is a data structure that allows data members to be added or removed one at a time, and in order. They are a ""Last in First Out"" structure.",2
1237,"A data structure that can store elements, which has the property that the last item added will be the first to be removed (or last-in-first-out)",Stores a set of element in a particular order,1
1238,"A data structure that can store elements, which has the property that the last item added will be the first to be removed (or last-in-first-out)",is a list of element where the first one to be removed is the last one inserted,2
1239,"A data structure that can store elements, which has the property that the last item added will be the first to be removed (or last-in-first-out)",A data structure that puts elements in a list and only allows the user  access to the last element.,1
1240,"A data structure that can store elements, which has the property that the last item added will be the first to be removed (or last-in-first-out)",a finite ordered list with zero or more elements,1
1241,"A data structure that can store elements, which has the property that the last item added will be the first to be removed (or last-in-first-out)","A storage container that holds objects in a certain order, which has a LIFO priority",2
1242,"A data structure that can store elements, which has the property that the last item added will be the first to be removed (or last-in-first-out)","Stacks are a type of container adaptors, specifically designed to operate in a LIFO context (last-in first-out), where elements are inserted and extracted only from the end of the container.",2
1243,push and pop,Push and pop are two main functions defined in a stack,2
1244,push and pop,Push which inserts an element on the top of the stack and pop which removes the last inserted element from the stack.,2
1245,push and pop,Push and pop.,2
1246,push and pop,Pop function and Push function,2
1247,push and pop,push and pop.,2
1248,push and pop,push (insert an item) pop (remove an item),2
1249,push and pop,Adding a new item and removing the item,2
1250,push and pop,Push (insert) and pop (retrieve).,2
1251,push and pop,Push and Pop.,2
1252,push and pop,pop and push,2
1253,push and pop,push (add an element) pop (remove an element),2
1254,push and pop,push ( to add to a item the Stack) Pop  ( to pull the last item added from an array. ),2
1255,push and pop,"push and pop, push puts an object into the list, and pop takes the last object off.",2
1256,push and pop,Push and Pop are the two main functions of a stack,2
1257,push and pop,Push and Pop,2
1258,push and pop,"push, which adds an element to the stack... and pop which takes an element off the stack",2
1259,push and pop,"Push and Pop, which add and remove data from the stack, respectively.",2
1260,push and pop,push and pop,2
1261,push and pop,pop - to remove item push - to insert an element,2
1262,push and pop,Pop and push,2
1263,push and pop,push - adds an item to the top of the stack pop - removes the top item from the stack,2
1264,push and pop,push and pop. Push adds a given node to the top of the stack leaving previous nodes below. Pop removes and returns the current top node of the stack,2
1265,"Keep the top of the stack toward the end of the array, so the push and pop operations will add or remove elements from the right side of the array.",An array has a fixed size.  You can add and delete elements to the end of the array and you use a pointer to keep track of the last element added.  Each time you add or delete an element you update the pointer and check if it is equal to the max size of the array.,2
1266,"Keep the top of the stack toward the end of the array, so the push and pop operations will add or remove elements from the right side of the array.",By implementing an array of a pre-defined size with the bottom stack element stored at element 0 and the last element stored in the array is the top. You increment top when an element is pushed and you decrement it when an item is popped.,2
1267,"Keep the top of the stack toward the end of the array, so the push and pop operations will add or remove elements from the right side of the array.","If you use a dynamically allocated array, you must provide a destructor and copy constructor.",1
1268,"Keep the top of the stack toward the end of the array, so the push and pop operations will add or remove elements from the right side of the array.","Create a int value that stores the ""head"" of the stack. Increment the top when one element is pushed and decrement after it is popped.",2
1269,"Keep the top of the stack toward the end of the array, so the push and pop operations will add or remove elements from the right side of the array.",Use a pointer that always points to the end of the array list for push/pop modifications.,1
1270,"Keep the top of the stack toward the end of the array, so the push and pop operations will add or remove elements from the right side of the array.",if you used an array to implement a stack when you add an element just add it to the end of an array and remove items from end of array also.,1
1271,"Keep the top of the stack toward the end of the array, so the push and pop operations will add or remove elements from the right side of the array.",You predetermine the size of the stack as you would an array.  This type can not grow.,1
1272,"Keep the top of the stack toward the end of the array, so the push and pop operations will add or remove elements from the right side of the array.","Declare a variable that points the last item in the array, which increases (++) when items are pushed onto the stack, and decreases (--) when an item is popped off the top.",2
1273,"Keep the top of the stack toward the end of the array, so the push and pop operations will add or remove elements from the right side of the array.","Allocate an array of some size. The bottom stack element is stored at some element. Last index in the array is the top. Increment top when one element is pushed, decrement after pop. ",1
1274,"Keep the top of the stack toward the end of the array, so the push and pop operations will add or remove elements from the right side of the array.","You allocate an pre-defined array, the bottom element is stored at element 0, and the last index is the head.",1
1275,"Keep the top of the stack toward the end of the array, so the push and pop operations will add or remove elements from the right side of the array.","Make an array, make the bottom at spot 0, make the last spot in the array the top, and increment top when you ad",1
1276,"Keep the top of the stack toward the end of the array, so the push and pop operations will add or remove elements from the right side of the array.",treat the beginning of the array as the beginning of the stack,1
1277,"Keep the top of the stack toward the end of the array, so the push and pop operations will add or remove elements from the right side of the array.",Use an index value called top to keep track of the last element in the array.,1
1278,"Keep the top of the stack toward the end of the array, so the push and pop operations will add or remove elements from the right side of the array.",create an array and implement pointers that point to the next list item down and stack them up.,1
1279,"Keep the top of the stack toward the end of the array, so the push and pop operations will add or remove elements from the right side of the array.","for efficiency it is easiest to implement the left to right method, with the right most item being the one that is retrieved when a pop is performed, and a push places an object on the furthest element.",1
1280,"Keep the top of the stack toward the end of the array, so the push and pop operations will add or remove elements from the right side of the array.","Create an array based on a pre-defined size N There can't be more elements than N.  Bottom stack element stored at element 0 last index in the array is the top  Increment top when one element is pushed, decrement after pop",1
1281,"Keep the top of the stack toward the end of the array, so the push and pop operations will add or remove elements from the right side of the array.","with the element added to the array, so that the last element added is at the end, and when the element is popped it takes the last element off the array",1
1282,"Keep the top of the stack toward the end of the array, so the push and pop operations will add or remove elements from the right side of the array.",Allocate an array of some pre-defined size. Bottom stack element stored at element 0. The last index in the array is the top. Increment top when one element is pushed.,1
1283,"Keep the top of the stack toward the end of the array, so the push and pop operations will add or remove elements from the right side of the array.","Create an array, size N.  N++ when one element is pushed.  N-- when one element is popped.",1
1284,"Keep the top of the stack toward the end of the array, so the push and pop operations will add or remove elements from the right side of the array.",define an array and keep track of a pointer to the last element as items are added,1
1285,"Keep the top of the stack toward the end of the array, so the push and pop operations will add or remove elements from the right side of the array.","By allocating an array of predetermined size, and an integer to track the top element of the stack. The bottom member of the stack will go in element 0 of the array, and for each element pushed the ""top"" tracking integer is incremented.",1
1286,"Keep the top of the stack toward the end of the array, so the push and pop operations will add or remove elements from the right side of the array.","Allocate an array of some size, bottom stack element stored at element 0",1
1287,"Keep the top of the stack toward the end of the array, so the push and pop operations will add or remove elements from the right side of the array.",you store the stack in the array but you have to keep in mind the first element,1
1288,"Keep the top of the stack toward the end of the array, so the push and pop operations will add or remove elements from the right side of the array.",You keep track of the last item entered into the array and do not  allow the user access to the other parts of the array.,1
1289,"Keep the top of the stack toward the end of the array, so the push and pop operations will add or remove elements from the right side of the array.","using arrays, you are pushing one int at a time into the stack until you get to the end of your array",1
1290,"Keep the top of the stack toward the end of the array, so the push and pop operations will add or remove elements from the right side of the array.","by having a max number of elements, allocating an array with that number of elements, storing the elements starting at 0, and keeping track of how many elements are currently in the list",1
1291,"Keep the top of the stack toward the end of the array, so the push and pop operations will add or remove elements from the right side of the array.","Stack usually holds a bunch of items with the same type, therefore u can use an array, to hold the content of the stack and an integer top that holds the index of the element at the top of the stack. u Choose an array size. Then the sequence of operations used. u have to decide what data types are needed for this stack data structure. ",1
1292,"Keep the top of the stack pointing to the head of the linked list, so the push and pop operations will add or remove elements at the beginning of the list.",You can add an element to the end of the linked list and update a pointer called top each time you modify the list.,1
1293,"Keep the top of the stack pointing to the head of the linked list, so the push and pop operations will add or remove elements at the beginning of the list.",You implement a list in which the head pointer points to the element most recently pushed onto the list and the pop function changes the head pointer to point to the next to last element in the list and removes the element head pointer previously pointed to.,2
1294,"Keep the top of the stack pointing to the head of the linked list, so the push and pop operations will add or remove elements at the beginning of the list.",This is the implementation of the stack using single linked list.   The operations performed on a stack are    1)push(): This is the function which is for insertion(pushing)of an element into stack                      It is similar to the insertion of an element at the end of a single linked list                   see  the function insert_end() in the program for operations of single linked list    2)pop(): This is the function which is for deletion(popping up) of an element from the stack             It is similar to the deletion of an element at the end of a single linked list       see  the function delete_end() in the program for operations of single linked list    3)stack_display():This is the function which is for displaying the elements of a stack,1
1295,"Keep the top of the stack pointing to the head of the linked list, so the push and pop operations will add or remove elements at the beginning of the list.",Using nodes to keep track of the head of the stack. Then using Push( ) and Pop ( ) to create the stack as needed.,1
1296,"Keep the top of the stack pointing to the head of the linked list, so the push and pop operations will add or remove elements at the beginning of the list.","Use the head as the top of the stack, only modify the head when you push/pop... push would add a new item to the head, pop would remove the item from the head.",1
1297,"Keep the top of the stack pointing to the head of the linked list, so the push and pop operations will add or remove elements at the beginning of the list.",you implement a stack with a list by changing the pointer to the first element of the list to the new item and move the pointer from the top of the stack to the next item when removing an item.,1
1298,"Keep the top of the stack pointing to the head of the linked list, so the push and pop operations will add or remove elements at the beginning of the list.",You dynamicly create space as the stack grows.  The stack can be as long as you need.,1
1299,"Keep the top of the stack pointing to the head of the linked list, so the push and pop operations will add or remove elements at the beginning of the list.","Declare a pointer that points to the head of the linked list, only add and remove nodes from the beginning of the list.",2
1300,"Keep the top of the stack pointing to the head of the linked list, so the push and pop operations will add or remove elements at the beginning of the list.",Creating a linked list. Add an element to the top of the stack when pushing and deleting an element when popping.,1
1301,"Keep the top of the stack pointing to the head of the linked list, so the push and pop operations will add or remove elements at the beginning of the list.","A singly-linked list is already a lot like a stack, it just depends on the way you address moving the head.",1
1302,"Keep the top of the stack pointing to the head of the linked list, so the push and pop operations will add or remove elements at the beginning of the list.","make a list, make the bottom the head, add on the end and make the end top",1
1303,"Keep the top of the stack pointing to the head of the linked list, so the push and pop operations will add or remove elements at the beginning of the list.",use the add function with a list as the beginning of the stack and remove for pop,1
1304,"Keep the top of the stack pointing to the head of the linked list, so the push and pop operations will add or remove elements at the beginning of the list.",Use head as the top and push and pop nodes from the head.,1
1305,"Keep the top of the stack pointing to the head of the linked list, so the push and pop operations will add or remove elements at the beginning of the list.",create a node based list that points to the next list item down.,0
1306,"Keep the top of the stack pointing to the head of the linked list, so the push and pop operations will add or remove elements at the beginning of the list.","have the head of the list be the last item added, and a push just adds a new head.",1
1307,"Keep the top of the stack pointing to the head of the linked list, so the push and pop operations will add or remove elements at the beginning of the list.","Create a new list.  Pop elements in the stack as needed.  Push the stack to remove items, unless the stack is empty.  The top item is at the head of the list. The last item is at the end.",1
1308,"Keep the top of the stack pointing to the head of the linked list, so the push and pop operations will add or remove elements at the beginning of the list.",adding the element to the end of the list so that it links to the element before it. when popping the element it takes the last element in the list and sets the previous one as the end of the list.,1
1309,"Keep the top of the stack pointing to the head of the linked list, so the push and pop operations will add or remove elements at the beginning of the list.","You can implement a stack using arrays or and linked list. By the use of pointers, that point element(node) to the next element in the stack. By the use of pointers, the stack becomes a linked list.",1
1310,"Keep the top of the stack pointing to the head of the linked list, so the push and pop operations will add or remove elements at the beginning of the list.",Elements are only inserted and removed from the head of the list.  There is no header node or current pointer.,1
1311,"Keep the top of the stack pointing to the head of the linked list, so the push and pop operations will add or remove elements at the beginning of the list.",use a linked list and keep track of a pointer that points to the first item,1
1312,"Keep the top of the stack pointing to the head of the linked list, so the push and pop operations will add or remove elements at the beginning of the list.","A singly linked list can already be easily used for LIFO data storage. Members of a stack can simply be pushed and popped from a list, the first item in will be the last out.",1
1313,"Keep the top of the stack pointing to the head of the linked list, so the push and pop operations will add or remove elements at the beginning of the list.",using pointer,0
1314,"Keep the top of the stack pointing to the head of the linked list, so the push and pop operations will add or remove elements at the beginning of the list.",the top is the first pointer.,1
1315,"Keep the top of the stack pointing to the head of the linked list, so the push and pop operations will add or remove elements at the beginning of the list.","Keep a pointer pointing to the last element entered at the front of  the array and move the pointer ""back"" when you delete an element.",1
1316,"Keep the top of the stack pointing to the head of the linked list, so the push and pop operations will add or remove elements at the beginning of the list.","using linked list, you are pushing the node that contains each int to the stack until you get to the end of your linked list",1
1317,"Keep the top of the stack pointing to the head of the linked list, so the push and pop operations will add or remove elements at the beginning of the list.","have a linked list, and for each push, add an item onto beginning of the list, and for each pop remove the first element in the list.",2
1318,"Keep the top of the stack pointing to the head of the linked list, so the push and pop operations will add or remove elements at the beginning of the list.","Using a linked list is one way to implement a stack so that it can handle essentially any number of elements. It is usually convenient to put a data structure in its own module, thus, you'll want to create files stack.h and a stack.c",1
1319,"First, they are converted into postfix form, followed by an evaluation of the postfix expression.",They are converted to post fix expressions.  It still follow the order of precedence for the operators.,2
1320,"First, they are converted into postfix form, followed by an evaluation of the postfix expression.",They are first converted to postfix expressions and then evaluated.,2
1321,"First, they are converted into postfix form, followed by an evaluation of the postfix expression.","Computers cannot evaulate infix expressions, it must first convert infix to postfix expression then it can evaluate.",2
1322,"First, they are converted into postfix form, followed by an evaluation of the postfix expression.",By using parentheses to have order in the expression.,1
1323,"First, they are converted into postfix form, followed by an evaluation of the postfix expression.",In postfix notation.,1
1324,"First, they are converted into postfix form, followed by an evaluation of the postfix expression.",computers usually convert infix expressions to post fix expression and evaluate them using a stack.,2
1325,"First, they are converted into postfix form, followed by an evaluation of the postfix expression.",they are converted to postfix,2
1326,"First, they are converted into postfix form, followed by an evaluation of the postfix expression.",Infix expressions are interpreted as postfix expressions by implementing stacks.,2
1327,"First, they are converted into postfix form, followed by an evaluation of the postfix expression.",They are first converted into an equivalent postfix expression so it can be read by the computer.,2
1328,"First, they are converted into postfix form, followed by an evaluation of the postfix expression.","The computer translates the infix expression to a postfix expression, then solves.",2
1329,"First, they are converted into postfix form, followed by an evaluation of the postfix expression.",in postfix format,1
1330,"First, they are converted into postfix form, followed by an evaluation of the postfix expression.",they use parenthisis and a stack to determine which evaluations need to be made first,1
1331,"First, they are converted into postfix form, followed by an evaluation of the postfix expression.",By throwing variables into a postfix expression and operands onto a parentheses regulated stack until end parentheses and enough variables to operate on are encountered.,1
1332,"First, they are converted into postfix form, followed by an evaluation of the postfix expression.",by being passed to the function by a leading term,0
1333,"First, they are converted into postfix form, followed by an evaluation of the postfix expression.","i have an hard time explaining this so i'll show how infix is evaluated instead. Start with an infix expression, like,  (((5+2)*5)+(400/(2+3))), and  push items until you get a "")"" and once that happens, perform the operations until you reach an ""(""... with that complete, you will now have  ((7*5)+(400/(2+3))) as now the expression that will be evaluated... perform last step again... (35+(400/(2+3))) is now the stack.... repeat agian... (35+(400/5)) is now the stack after that.... repeat... (35+80) is now the stack, repeat again... 115 is now the stack, and is returned.",1
1334,"First, they are converted into postfix form, followed by an evaluation of the postfix expression.",The infix expression is converted to postfix form,2
1335,"First, they are converted into postfix form, followed by an evaluation of the postfix expression.",by converting them to postfix expressions and putting the operations in a stack,2
1336,"First, they are converted into postfix form, followed by an evaluation of the postfix expression.",The computer converts the infix expression to postfix form. Then evaluates the postfix expression.,2
1337,"First, they are converted into postfix form, followed by an evaluation of the postfix expression.",infix expressions are converted to postfix expressions before they can be evaluated by a computer.  Operands stay in the same order.  Operators always follow the operands.,2
1338,"First, they are converted into postfix form, followed by an evaluation of the postfix expression.",infix expressions are pointers evaluated by reference to the memory location,0
1339,"First, they are converted into postfix form, followed by an evaluation of the postfix expression.",computers convert infix expressions to postfix form before evaluation,2
1340,"First, they are converted into postfix form, followed by an evaluation of the postfix expression.",convert infix expressions to postfix expression and evaluate the postfix expression,2
1341,"First, they are converted into postfix form, followed by an evaluation of the postfix expression.","When an operand is entered, the computer Pushes it onto a stack When an operator is entered, the computer Applies it to the top two operands of the stack Pops the operands from the stack Pushes the result of the operation onto the stack",1
1342,"First, they are converted into postfix form, followed by an evaluation of the postfix expression.",Computers convert an infix expression into a postfix expression. They then push the numbers onto a stack and pop them out as they are needed.,2
1343,"First, they are converted into postfix form, followed by an evaluation of the postfix expression.","infix expressions are converted to postfix, (i.e. 3+2 is changed to 32+)",2
1344,"First, they are converted into postfix form, followed by an evaluation of the postfix expression.","they are transformed into post-fix expressions, then evaluated with a stack.",2
1345,"First, they are converted into postfix form, followed by an evaluation of the postfix expression.","Writing arithmetic expressions is called infix notation.  This is because a binary operator (like '+') is written in between its two operands (as in ""a + b"").  There are two alternative forms of notation used in certain situations.  One is prefix notation, in which an operator is written before its operands.  In prefix notation, the sum of a and b is written ""+ a b"".  This is the notation used to write function calls in mathematics and computer science.  It is also used in the Lisp and Scheme programming languages.  In postfix notation, an operator is written after its operands.  The sum of a and b is written ""a b +"".  (You may have seen this as ""reverse Polish notation"".)  Postfix notation forms the conceptual basis for the way that arithmetic expressions are evaluated by a computer.  One important characteristic of both postfix and prefix notations is that they are unambiguous; no parentheses are needed to indicate the order of operations. ",2
1346,"Pop all the elements and store them on another stack until the element is found, then push back all the elements on the original stack.",isEmptry()//determines if the stack is full or not pop()//to remove the top element if it is not the on you are looking for search()//you compare each element of the stack to the data you are looking for.,1
1347,"Pop all the elements and store them on another stack until the element is found, then push back all the elements on the original stack.",You would have to keep using peek or getTop to see what the top element is then popping the top element until peek or getTop provides the element you are looking for.,1
1348,"Pop all the elements and store them on another stack until the element is found, then push back all the elements on the original stack.",Push adds a given node to the top of the stack leaving previous nodes below. Pop removes and returns the current top node of the stack.,1
1349,"Pop all the elements and store them on another stack until the element is found, then push back all the elements on the original stack.","Using linked lists and stacks, you would need a temp stack to retain the values. Then you would use the Pop( ) function to pop off each element and then compare it. If its not the element your looking for, Push ( ) it to the temp stack. Repeat until the element is found. When you find it,  Pop ( ) off the temp stack back onto the regular stack to have a complete stack again.",2
1350,"Pop all the elements and store them on another stack until the element is found, then push back all the elements on the original stack.","Pop each item off the top until you find what you are looking for. If the stack ends up empty and you never found the item, then it does not exist in the stack. It may also be necessary to save the popped values in case you want to recreate the stack.",2
1351,"Pop all the elements and store them on another stack until the element is found, then push back all the elements on the original stack.","if the stack is implemented using an array you could simply search the array for the item. If the stack is implemented using a linked list you would have to pop the values off of the stack until either the value is found or the stack is empty, you would then have to have the items put back into the list.",1
1352,"Pop all the elements and store them on another stack until the element is found, then push back all the elements on the original stack.","You need to pop each item on the stack and compare the item.  Once the item is found, no more items need to be removed.",1
1353,"Pop all the elements and store them on another stack until the element is found, then push back all the elements on the original stack.","Pop an element from one stack, check to see if it is the desired element, if not push it onto another stack. When finished, pop the items from the second stack and push them back onto the first stack (this will ensure the order of the elements is maintained).",2
1354,"Pop all the elements and store them on another stack until the element is found, then push back all the elements on the original stack.",Basically pop the stack until you find the given element.,1
1355,"Pop all the elements and store them on another stack until the element is found, then push back all the elements on the original stack.","Iterate through the stack, checking the number against the current element.",0
1356,"Pop all the elements and store them on another stack until the element is found, then push back all the elements on the original stack.",pop all elements off stack until you find that element and then push the popped elements back on the stack,2
1357,"Pop all the elements and store them on another stack until the element is found, then push back all the elements on the original stack.","Keep popping nodes and storing them in an alternate stack until the given element is found, then pop the given element and push the previously popped nodes back onto the stack.",2
1358,"Pop all the elements and store them on another stack until the element is found, then push back all the elements on the original stack.",either traverse the entire list and pop the given part or create a pointer system that automatically points to it.,1
1359,"Pop all the elements and store them on another stack until the element is found, then push back all the elements on the original stack.","Depends on the type of stack, on a true stack you will haft to pop all of the elements of the stack until you find the element you want, and then after that you will need to push all the elements that where removed back in to the stack in the order that they where removed.  With a Java style stack, where there is a peek function, it will return the element you wanted instead of requiring you to perform all the excessive actions that are required from a true stack.",2
1360,"Pop all the elements and store them on another stack until the element is found, then push back all the elements on the original stack.",if top item != given element pop the stack. Repeat until item is found or stack is empty,1
1361,"Pop all the elements and store them on another stack until the element is found, then push back all the elements on the original stack.",could traverse through the list/array to find the element.,1
1362,"Pop all the elements and store them on another stack until the element is found, then push back all the elements on the original stack.",you need the pop opertation to go throught the stack and find the element.,1
1363,"Pop all the elements and store them on another stack until the element is found, then push back all the elements on the original stack.","createStack, push, isEmpty, pop, and a boolean return value.",1
1364,"Pop all the elements and store them on another stack until the element is found, then push back all the elements on the original stack.",you would have to traverse the stack popping each element to search it,1
1365,"Pop all the elements and store them on another stack until the element is found, then push back all the elements on the original stack.",Pop each element off the stack (and into another stack for storage) until the desired element is found.,1
1366,"Pop all the elements and store them on another stack until the element is found, then push back all the elements on the original stack.",pop operation,1
1367,"Pop all the elements and store them on another stack until the element is found, then push back all the elements on the original stack.",to pop elements then push them back,1
1368,"Pop all the elements and store them on another stack until the element is found, then push back all the elements on the original stack.",A function to keep track of the elements popped and a function to put  the popped elements backinto the function.,1
1369,"Pop all the elements and store them on another stack until the element is found, then push back all the elements on the original stack.",you would pop each element and compare it to what you are looking for and then push it back on the stack so that it is not lost,1
1370,"Pop all the elements and store them on another stack until the element is found, then push back all the elements on the original stack.",you would need to perform a search through the list of elements (i dont really understand what this question is asking....its not very clear?),0
1371,"Pop all the elements and store them on another stack until the element is found, then push back all the elements on the original stack.",StackPush() StackPop() StackIsEmpty(),1
1372,"A data structure that can store elements, which has the property that the last item added will be the last to be removed (or first-in-first-out).",A data structure in c++ which is a collection of data that is kept in order.  First in first out.,2
1373,"A data structure that can store elements, which has the property that the last item added will be the last to be removed (or first-in-first-out).",a queue is a list of objects in a particular order that is read one at a time starting at the first followed by the second and so on.,1
1374,"A data structure that can store elements, which has the property that the last item added will be the last to be removed (or first-in-first-out).",A queue is an abstract data structure in which operations are performed at both ends giving the queue first in first out behavior.,2
1375,"A data structure that can store elements, which has the property that the last item added will be the last to be removed (or first-in-first-out).","A queue stores a set of elements in a particular order.  Its principle of operation is FIFO(first in first out), which means the first element inserted is the first one to be removed.",2
1376,"A data structure that can store elements, which has the property that the last item added will be the last to be removed (or first-in-first-out).",An ADT whose first inserted item is the first item removed. This uses the FIFO idea where items enter a queue at its back and leave at its front.,2
1377,"A data structure that can store elements, which has the property that the last item added will be the last to be removed (or first-in-first-out).","Last in, last out architecture. It works the same way a line at the bank would work, the person that's been waiting the longest gets served first.",2
1378,"A data structure that can store elements, which has the property that the last item added will be the last to be removed (or first-in-first-out).",a queue is a data structure that stores elements in a First in First out order.,2
1379,"A data structure that can store elements, which has the property that the last item added will be the last to be removed (or first-in-first-out).",A waiting list of items that operation in a FIFO (first in first out) order.,2
1380,"A data structure that can store elements, which has the property that the last item added will be the last to be removed (or first-in-first-out).","A queue is similar to an array, except that the data can only be accessed sequentially rather than at random. Unlike a stack, a queue follows FIFO. First in, First out.",2
1381,"A data structure that can store elements, which has the property that the last item added will be the last to be removed (or first-in-first-out).",is a particular kind of collection in which the entities in the collection are kept in order and the principal (or only) operations on the collection are the addition of entities to the rear terminal position and removal of entities from the front terminal position. First in First Out (FIFO Method).,2
1382,"A data structure that can store elements, which has the property that the last item added will be the last to be removed (or first-in-first-out).",Like a linked list but first in first out,1
1383,"A data structure that can store elements, which has the property that the last item added will be the last to be removed (or first-in-first-out).",A queue is a FIFO data structure.,2
1384,"A data structure that can store elements, which has the property that the last item added will be the last to be removed (or first-in-first-out).",A queue is a first in first out data structure.,2
1385,"A data structure that can store elements, which has the property that the last item added will be the last to be removed (or first-in-first-out).","Its like a stack, but uses the linked list to stack a little differently. It's FIFO so the first thing enqueued is the first thing dequeued",2
1386,"A data structure that can store elements, which has the property that the last item added will be the last to be removed (or first-in-first-out).","A first in, first out Abstract Data type that can be used to store values.",2
1387,"A data structure that can store elements, which has the property that the last item added will be the last to be removed (or first-in-first-out).","Stores a set of elements in a particular order with a First In, First Out principle",2
1388,"A data structure that can store elements, which has the property that the last item added will be the last to be removed (or first-in-first-out).",object that stores elements in order that follows first in first out.  the first element added is the first one to come off.,2
1389,"A data structure that can store elements, which has the property that the last item added will be the last to be removed (or first-in-first-out).","A quese is an list that stores a set of elements in a particular order. It has Stack principle, but in this case, its ""First In, First Out"". The first element inserted is the first element to be removed.",2
1390,"A data structure that can store elements, which has the property that the last item added will be the last to be removed (or first-in-first-out).","a finite ordered list with zero or more elements, based upon First In First Out",2
1391,"A data structure that can store elements, which has the property that the last item added will be the last to be removed (or first-in-first-out).",a data structure that performs operations in the order of first in first out FIFO,2
1392,"A data structure that can store elements, which has the property that the last item added will be the last to be removed (or first-in-first-out).","A Queue is a ""first in first out"" data structure, such that the first element added is also the first removed.",2
1393,"A data structure that can store elements, which has the property that the last item added will be the last to be removed (or first-in-first-out).","Queue is a buffer, which store element in a particular order",1
1394,"A data structure that can store elements, which has the property that the last item added will be the last to be removed (or first-in-first-out).","stores a set of elements where the first element in, is the first element to be removed",2
1395,"A data structure that can store elements, which has the property that the last item added will be the last to be removed (or first-in-first-out).",A data structure that removes nodes from the head and adds nodes at the tail.,2
1396,"A data structure that can store elements, which has the property that the last item added will be the last to be removed (or first-in-first-out).",a queue is a list of things that follows the first in first out behavior,2
1397,"A data structure that can store elements, which has the property that the last item added will be the last to be removed (or first-in-first-out).","a queue is a storage container that holds its objects in a first in, first out priority",2
1398,"A data structure that can store elements, which has the property that the last item added will be the last to be removed (or first-in-first-out).","The queue is another data structure. A physical analogy for a queue is a line at a bank. When you go to the bank, customers go to the rear (end) of the line and customers come off of the line (i.e., are serviced) from the front of the line.",2
1399,enqueue and dequeue,enqueue which adds data to the queue and dequeue which deletes data from the queue,2
1400,enqueue and dequeue,"enqueue , which inserts a specified element at the head of the specified queue, and dequeue , which removes the specified element from the queue.",2
1401,enqueue and dequeue,The two main functions are enqueue which inserts an item at the back of the queue and dequeue which removes an item from the front of the queue.,2
1402,enqueue and dequeue,The two main functions are enqueue and dequeue.,2
1403,enqueue and dequeue,Enqueue and Dequeue,2
1404,enqueue and dequeue,enqueue - insert into queue dequeue - remove element,2
1405,enqueue and dequeue,"Remove the item added first, add items to the back.",2
1406,enqueue and dequeue,The two main functions of a queue are enqueue and dequeue.,2
1407,enqueue and dequeue,enqueue and dequeue.,2
1408,enqueue and dequeue,enqueue and dequeue,2
1409,enqueue and dequeue,"enque ( Data ),  Deque ( )",2
1410,enqueue and dequeue,"The two functions are, Enqueue and Dequeue",2
1411,enqueue and dequeue,"enqueue, dequeue",2
1412,enqueue and dequeue,"enqueue, that adds an item to the queue dequeue, that takes the first item out of the queue",2
1413,enqueue and dequeue,"Enqueue and dequeue, which add and remove elements from the queue",2
1414,enqueue and dequeue,dequeue and enqueue,2
1415,enqueue and dequeue,enqueue dequeue,2
1416,enqueue and dequeue,rear and front,1
1417,"Use a circular array. Keep the rear of the queue toward the end of the array, and the front toward the beginning, and allow the rear pointer to wrap around.",Make use of a front pointer and a tail pointer.  When the tail pointer reaches the end of an array it gets reset to the front of the array.  If the two pointers are equal then the queue is either full or just has one element.,1
1418,"Use a circular array. Keep the rear of the queue toward the end of the array, and the front toward the beginning, and allow the rear pointer to wrap around.",you create an array with the max size of your queue and adjust the items to make them follow FIFO procedure.,1
1419,"Use a circular array. Keep the rear of the queue toward the end of the array, and the front toward the beginning, and allow the rear pointer to wrap around.",By implementing an array and only adding items to the end of the array and only removing items from the beginning of the array.,1
1420,"Use a circular array. Keep the rear of the queue toward the end of the array, and the front toward the beginning, and allow the rear pointer to wrap around.","For applications in which a fixed-sized queue does not present a problem, you can use an array to represent a queue. ",1
1421,"Use a circular array. Keep the rear of the queue toward the end of the array, and the front toward the beginning, and allow the rear pointer to wrap around.",Keep track of the front and the back of the array as you increase and decrease the elements inside the array.,1
1422,"Use a circular array. Keep the rear of the queue toward the end of the array, and the front toward the beginning, and allow the rear pointer to wrap around.","Declare the size of an array, and have special conditional statements (pointers) to make sure you re-use ALL of the array. Say, you have an array of 20 elements, you load up 18, then dequeue 3, when you enqueue 4 more elements, you want to loop back to index 0 and continue from there... this process saves resources.",1
1423,"Use a circular array. Keep the rear of the queue toward the end of the array, and the front toward the beginning, and allow the rear pointer to wrap around.",you could use the first element of the list as the remove point and insert at the end f you do this you would have to shift the elements down each time you remove an item unless you make the array circular.,1
1424,"Use a circular array. Keep the rear of the queue toward the end of the array, and the front toward the beginning, and allow the rear pointer to wrap around.",Utilizing indexes for the front and the back.  Front is 0 and as you add items the back index is incremented.,1
1425,"Use a circular array. Keep the rear of the queue toward the end of the array, and the front toward the beginning, and allow the rear pointer to wrap around.","Declare two variables, “front” and “rear”, to be used to denote which elements in the array can be accessed. Increment “rear” whenever data is enqueued to the end and increment “front” whenever data is dequeued.",1
1426,"Use a circular array. Keep the rear of the queue toward the end of the array, and the front toward the beginning, and allow the rear pointer to wrap around.",It is an array of fixed size. A queue of maximum N elements.,1
1427,"Use a circular array. Keep the rear of the queue toward the end of the array, and the front toward the beginning, and allow the rear pointer to wrap around.","make an array of a size, and add on to the front and delete from the back, keep track of the two so that you know when it is full and where to add or subtract from",1
1428,"Use a circular array. Keep the rear of the queue toward the end of the array, and the front toward the beginning, and allow the rear pointer to wrap around.",By using the beginning of the array as the removal point of the queue (or beginning of the queue) and the ith element as the end of the queue.,1
1429,"Use a circular array. Keep the rear of the queue toward the end of the array, and the front toward the beginning, and allow the rear pointer to wrap around.","add in data from the first element to the last, take out data from the first element to the last.",1
1430,"Use a circular array. Keep the rear of the queue toward the end of the array, and the front toward the beginning, and allow the rear pointer to wrap around.",you can take the array and put it in a queue stack or you can just traverse the list and keep track of top and bottom,1
1431,"Use a circular array. Keep the rear of the queue toward the end of the array, and the front toward the beginning, and allow the rear pointer to wrap around.","create a fixed array size, with with 2 integers to point to the beginning and the end of the que, and special cases to know when the que is empty or full.",1
1432,"Use a circular array. Keep the rear of the queue toward the end of the array, and the front toward the beginning, and allow the rear pointer to wrap around.",Keep track of the front and rear indexes. Either: 1)Dequeue items by shifting the array left 2)Use wrapped configuration,1
1433,"Use a circular array. Keep the rear of the queue toward the end of the array, and the front toward the beginning, and allow the rear pointer to wrap around.","add items into a fixed size array, pull the items out by calling on them with the starting index, increase starting index so when it calls again its now the next index element in the array.",1
1434,"Use a circular array. Keep the rear of the queue toward the end of the array, and the front toward the beginning, and allow the rear pointer to wrap around.","To use and array to implement a Queue, element or item 0, should be the top element in the array. Every time an element is inserted, all the items in the array are pushed back one space. The top element is always removed first.",1
1435,"Use a circular array. Keep the rear of the queue toward the end of the array, and the front toward the beginning, and allow the rear pointer to wrap around.",fixed size array with max N elements.  Need to keep track of front and rear of array.,1
1436,"Use a circular array. Keep the rear of the queue toward the end of the array, and the front toward the beginning, and allow the rear pointer to wrap around.","by keeping track of a front item and a rear item, or with a circular array that uses the modulo function",2
1437,"Use a circular array. Keep the rear of the queue toward the end of the array, and the front toward the beginning, and allow the rear pointer to wrap around.","Using an array for a queue, the size of the array allocated limits the size of the queue. An array based queue class must keep track of both the front and back of the queue, which may need to wrap around the array.",2
1438,"Use a circular array. Keep the rear of the queue toward the end of the array, and the front toward the beginning, and allow the rear pointer to wrap around.","A pointer based implementation of a queue could use a linear linked list with two external pointers, one to the front and one to the back",1
1439,"Use a circular array. Keep the rear of the queue toward the end of the array, and the front toward the beginning, and allow the rear pointer to wrap around.",remove the element then shift the elements one space back,1
1440,"Use a circular array. Keep the rear of the queue toward the end of the array, and the front toward the beginning, and allow the rear pointer to wrap around.",By having the head pointer point to the first or least current data entered and having the tail point to the most current data entered. A method must be created so that the tail pointer doesn't leave the array.,2
1441,"Use a circular array. Keep the rear of the queue toward the end of the array, and the front toward the beginning, and allow the rear pointer to wrap around.",an array is a type of queue with a fixed length,0
1442,"Use a circular array. Keep the rear of the queue toward the end of the array, and the front toward the beginning, and allow the rear pointer to wrap around.","your storage class has an array, and you keep track of the index of the first and last item in the array, and wrap around when end of the array is full",2
1443,"Use a circular array. Keep the rear of the queue toward the end of the array, and the front toward the beginning, and allow the rear pointer to wrap around.",Boolean isFullQ(queue) ::= rear == MAX_QUEUE_SIZE-1,2
1444,"Keep the rear of the queue pointing to the tail of the linked list, so the enqueue operation is done at the end of the list, and keep the front of the queue pointing to the head of the linked list, so the dequeue operation is done at the beginning of the list.",A list can have unlimited elements in it.  You can push a node onto the end of the list and pop the one in the front.,2
1445,"Keep the rear of the queue pointing to the tail of the linked list, so the enqueue operation is done at the end of the list, and keep the front of the queue pointing to the head of the linked list, so the dequeue operation is done at the beginning of the list.",theoretically you could do it two ways one of which uses more processing power and memory no larger than the queue is ever at when full and the other which uses almost infinite memory. The more practical method would be two place the items in an array and remove the item in position one of the array after which you can shift the array and add another element if required. The other option which can use infinite memory when used for long term queues such as job scheduling that goes nonstop for extended periods. that is to implement an array and add the items read item one raise your counter value to two ecetera and continue adding more elements to the array. the downside to this method is after you use element one it is still in memory. or im crazy who knows,1
1446,"Keep the rear of the queue pointing to the tail of the linked list, so the enqueue operation is done at the end of the list, and keep the front of the queue pointing to the head of the linked list, so the dequeue operation is done at the beginning of the list.","By implementing a list in which a tail pointer points to the item most recently inserted onto the back of the list and a head pointer which points to the item least recently inserted onto the list. Also, items can only be removed from the front of the list and can only be added to the back of the list.",2
1447,"Keep the rear of the queue pointing to the tail of the linked list, so the enqueue operation is done at the end of the list, and keep the front of the queue pointing to the head of the linked list, so the dequeue operation is done at the beginning of the list.",You can use list to represent the items in a queue.,0
1448,"Keep the rear of the queue pointing to the tail of the linked list, so the enqueue operation is done at the end of the list, and keep the front of the queue pointing to the head of the linked list, so the dequeue operation is done at the beginning of the list.",Have a pointer to the last element in the list and then use enqueue to insert items there. Link the first and last elements together to dequeue the list.,1
1449,"Keep the rear of the queue pointing to the tail of the linked list, so the enqueue operation is done at the end of the list, and keep the front of the queue pointing to the head of the linked list, so the dequeue operation is done at the beginning of the list.",Enqueue to the end of the linked list... dequeue items from the beginning (head) of the list.,2
1450,"Keep the rear of the queue pointing to the tail of the linked list, so the enqueue operation is done at the end of the list, and keep the front of the queue pointing to the head of the linked list, so the dequeue operation is done at the beginning of the list.",you use the first element in the list as the remove point for the queue and insert items at the end of the list.,2
1451,"Keep the rear of the queue pointing to the tail of the linked list, so the enqueue operation is done at the end of the list, and keep the front of the queue pointing to the head of the linked list, so the dequeue operation is done at the beginning of the list.","Utilizing a front pointer and a back pointer.  The front poiner and back pointer points to the first item into the queue.  As you add items, the front remains the same but the back poiner 'next' points to the new item and the new item is assigned to become the 'new' back pointer.",1
1452,"Keep the rear of the queue pointing to the tail of the linked list, so the enqueue operation is done at the end of the list, and keep the front of the queue pointing to the head of the linked list, so the dequeue operation is done at the beginning of the list.",Implement a linked list that only allows nodes to be added to the tail and can only be retrieved from the head.,1
1453,"Keep the rear of the queue pointing to the tail of the linked list, so the enqueue operation is done at the end of the list, and keep the front of the queue pointing to the head of the linked list, so the dequeue operation is done at the beginning of the list.",Check if list is empty and add elements to the list.,1
1454,"Keep the rear of the queue pointing to the tail of the linked list, so the enqueue operation is done at the end of the list, and keep the front of the queue pointing to the head of the linked list, so the dequeue operation is done at the beginning of the list.","make a linked list and add on to the front and delete from the back, keep track of both to do so.",1
1455,"Keep the rear of the queue pointing to the tail of the linked list, so the enqueue operation is done at the end of the list, and keep the front of the queue pointing to the head of the linked list, so the dequeue operation is done at the beginning of the list.",by making the head of the list the beginning of the queue and the last listed item the insertion point of the queue,1
1456,"Keep the rear of the queue pointing to the tail of the linked list, so the enqueue operation is done at the end of the list, and keep the front of the queue pointing to the head of the linked list, so the dequeue operation is done at the beginning of the list.",throw in data at the head and take it out at the tail,1
1457,"Keep the rear of the queue pointing to the tail of the linked list, so the enqueue operation is done at the end of the list, and keep the front of the queue pointing to the head of the linked list, so the dequeue operation is done at the beginning of the list.","You create a list of nodes that had a head and a top pointer, and the functions are basically the same substituting pop and push with enqueue and dequeue",1
1458,"Keep the rear of the queue pointing to the tail of the linked list, so the enqueue operation is done at the end of the list, and keep the front of the queue pointing to the head of the linked list, so the dequeue operation is done at the beginning of the list.","fairly easy... singly linked list with a pointer to the head and tail of hte list.  deque first item in que, create temp pointer to next element, delete head, and then make head the temporary pointer.  enque new item, use pointer to end of list, add a new item to the next item of the tail, and make the tail the next item of the current tail.",1
1459,"Keep the rear of the queue pointing to the tail of the linked list, so the enqueue operation is done at the end of the list, and keep the front of the queue pointing to the head of the linked list, so the dequeue operation is done at the beginning of the list.","Use a linked list with 2 pointers, one to the front and one to the back. As long as back != front, the queue is not empty.",1
1460,"Keep the rear of the queue pointing to the tail of the linked list, so the enqueue operation is done at the end of the list, and keep the front of the queue pointing to the head of the linked list, so the dequeue operation is done at the beginning of the list.","create a node with the input data, continue to add to the list.  when dequeueing - get the first elements data and set the next element in the list as the new first element",1
1461,"Keep the rear of the queue pointing to the tail of the linked list, so the enqueue operation is done at the end of the list, and keep the front of the queue pointing to the head of the linked list, so the dequeue operation is done at the beginning of the list.","A linked list with Stack principles. The Queue's top element is the element that is always being removed first. Must use nodes to contain each element, with a pointer to the top element, which also could  be called the head pointer.",1
1462,"Keep the rear of the queue pointing to the tail of the linked list, so the enqueue operation is done at the end of the list, and keep the front of the queue pointing to the head of the linked list, so the dequeue operation is done at the beginning of the list.",linked list checking for front and rear.  Keep enqueueing elements until front equal to rear -1.,1
1463,"Keep the rear of the queue pointing to the tail of the linked list, so the enqueue operation is done at the end of the list, and keep the front of the queue pointing to the head of the linked list, so the dequeue operation is done at the beginning of the list.","a queue can be implemented in a list by keeping track of two pointers, a head and a tail",1
1464,"Keep the rear of the queue pointing to the tail of the linked list, so the enqueue operation is done at the end of the list, and keep the front of the queue pointing to the head of the linked list, so the dequeue operation is done at the beginning of the list.","each element of a queue can be allocated in the nodes of an linked list. New elements should be added to the head of the list, with each dequeued element coming off the tail.",2
1465,"Keep the rear of the queue pointing to the tail of the linked list, so the enqueue operation is done at the end of the list, and keep the front of the queue pointing to the head of the linked list, so the dequeue operation is done at the beginning of the list.","Implement the operation dequeue() as the list operation remove(1) and the operation getFront(queueFront) as the list operation retrieve(1, queueFront)",1
1466,"Keep the rear of the queue pointing to the tail of the linked list, so the enqueue operation is done at the end of the list, and keep the front of the queue pointing to the head of the linked list, so the dequeue operation is done at the beginning of the list.",remove the first element and reference the second element as the new head of the list.,1
1467,"Keep the rear of the queue pointing to the tail of the linked list, so the enqueue operation is done at the end of the list, and keep the front of the queue pointing to the head of the linked list, so the dequeue operation is done at the beginning of the list.",By creating and adding nodes at the end of the list and removing the nodes from the beginning of the list.,2
1468,"Keep the rear of the queue pointing to the tail of the linked list, so the enqueue operation is done at the end of the list, and keep the front of the queue pointing to the head of the linked list, so the dequeue operation is done at the beginning of the list.",you would have your list and add a back pointer so that your program knows where the end is,1
1469,"Keep the rear of the queue pointing to the tail of the linked list, so the enqueue operation is done at the end of the list, and keep the front of the queue pointing to the head of the linked list, so the dequeue operation is done at the beginning of the list.","your queue storage class has a list, and for enqueue, you add the item to the end of the list, and for dequeue you return the first item in the list",1
1470,"Keep the rear of the queue pointing to the tail of the linked list, so the enqueue operation is done at the end of the list, and keep the front of the queue pointing to the head of the linked list, so the dequeue operation is done at the beginning of the list.",temp-&gt;next= NULL;       if (front)  { (rear) -&gt; next= temp;}       else front = temp;       rear = temp;   },1
1471,push,Push.,2
1472,push,"push, which inserts something at the top of the stack.",2
1473,push,The stack operation corresponding to enqueue in queues is the push operation.,2
1474,push,"Push in a stack operation corresponds to the enqueue operation in queues.  These operations insert a new item into one end(the top and back, respectively) of the ADT.",2
1475,push,The stack operation is almost the opposite of the enqueue operation.,1
1476,push,push = enqueue pop = dequeue,1
1477,push,push,2
1478,push,Not sure what this question means.  You can use the stack 'push' operation and the enqueue operation to detect palindromes.,2
1479,push,"Enqueue is the queue equivalent of push, and dequeue is the queue equivalent to pop.",2
1480,push,Push operation.,2
1481,push,"that would be the push operation, if it put the item at the end of the list.",2
1482,push,the Push method in the stack operations.,2
1483,push,enqueue corresponds with push dequeue corresponds with pop,1
1484,push,"Push corresponds with enqueue, both very similarly place new elements into their stack or queue",2
1485,push,FIFO: First in First out,0
1486,push,Push,2
1487,"A collection of nodes, which has a special node called root, and the rest of the nodes are partitioned into one or more disjoint sets, each set being a tree.",A hierarchy of nodes that are sorted in a particular order.  Each node has a ancestor (except for the root) and children (except for the leaves).,1
1488,"A collection of nodes, which has a special node called root, and the rest of the nodes are partitioned into one or more disjoint sets, each set being a tree.",A tree is a finite set of one or more nodes with a specially designated node called the root and the remaining nodes are partitioned into disjoint sets where each of these sets is a tree.,2
1489,"A collection of nodes, which has a special node called root, and the rest of the nodes are partitioned into one or more disjoint sets, each set being a tree.",A tree is a finite set of one or more nodes such that: there is a specially designated node called the root.,1
1490,"A collection of nodes, which has a special node called root, and the rest of the nodes are partitioned into one or more disjoint sets, each set being a tree.","A connected, undirected graph without cycles.",1
1491,"A collection of nodes, which has a special node called root, and the rest of the nodes are partitioned into one or more disjoint sets, each set being a tree.","A data structure that contains a root, internal nodes and external nodes. Each node references another node by means of pointers (pass-by-reference). The root is the ""base"" of the tree, it has no parents. A ""leaf"" is a node at the end of the tree which points to NULL.",2
1492,"A collection of nodes, which has a special node called root, and the rest of the nodes are partitioned into one or more disjoint sets, each set being a tree.",a tree is a series of nodes where each node has links to other nodes.,1
1493,"A collection of nodes, which has a special node called root, and the rest of the nodes are partitioned into one or more disjoint sets, each set being a tree.","an infinite set of nodes that have a root and descendants, and each addition is a leaf.",1
1494,"A collection of nodes, which has a special node called root, and the rest of the nodes are partitioned into one or more disjoint sets, each set being a tree.","A set of one or more nodes that are hierarchically organized, with one special “root” node.",1
1495,"A collection of nodes, which has a special node called root, and the rest of the nodes are partitioned into one or more disjoint sets, each set being a tree.",A tree is a finite set of one or more nodes such that there is a specially designated node called the root.,1
1496,"A collection of nodes, which has a special node called root, and the rest of the nodes are partitioned into one or more disjoint sets, each set being a tree.",one or more nodes in a hierarchy starting with the root and branching off like a tree to subtrees,2
1497,"A collection of nodes, which has a special node called root, and the rest of the nodes are partitioned into one or more disjoint sets, each set being a tree.",A tree is a data structure where nodes are linked to each other in a hierarchical manner.,1
1498,"A collection of nodes, which has a special node called root, and the rest of the nodes are partitioned into one or more disjoint sets, each set being a tree.",a grouping of data in a parent to child structure,1
1499,"A collection of nodes, which has a special node called root, and the rest of the nodes are partitioned into one or more disjoint sets, each set being a tree.",It is a list of numbers in a list made by comparing values of nodes already in the tree and adding to the appropriate spot. Its a list made up of nodes with left and right pointers.,1
1500,"A collection of nodes, which has a special node called root, and the rest of the nodes are partitioned into one or more disjoint sets, each set being a tree.","A tree is a branched data structure with nodes, and leaves... a special node called root has no parent node, but however like all other nodes can and does have 2 nodes that it links to, namely one on the right, and one on the left.",1
1501,"A collection of nodes, which has a special node called root, and the rest of the nodes are partitioned into one or more disjoint sets, each set being a tree.","It organizes data in a nonlinear, hierarchical form, where items can have more than one successor.  Partitioned into a root node and subsets are general subtrees of the root. ",2
1502,"A collection of nodes, which has a special node called root, and the rest of the nodes are partitioned into one or more disjoint sets, each set being a tree.","A tree is a finite set of one or more nodes such that there is a specially designated node called the root. The remaining nodes are partitioned into n&gt;=0 disjoint sets T the n plus 1, where each element set is a tree.",2
1503,"A collection of nodes, which has a special node called root, and the rest of the nodes are partitioned into one or more disjoint sets, each set being a tree.",A finite set of nodes that starts with the root and terminates with leaves.,1
1504,"A collection of nodes, which has a special node called root, and the rest of the nodes are partitioned into one or more disjoint sets, each set being a tree.","a set of data arranged with pointers. each element can have many pointers, but no two pointers point to the same element",1
1505,"A collection of nodes, which has a special node called root, and the rest of the nodes are partitioned into one or more disjoint sets, each set being a tree.","A Tree is a data structure with one or more data nodes, each of which contains some data. Each node itself can have a number of attached child nodes, creating the branched structure Trees are named for.",1
1506,"A collection of nodes, which has a special node called root, and the rest of the nodes are partitioned into one or more disjoint sets, each set being a tree.","a finite collection of nodes, where it starts with an element called the root, which has children, and its children have children until you get to the leaves which are the last elements and have to children",1
1507,"A collection of nodes, which has a special node called root, and the rest of the nodes are partitioned into one or more disjoint sets, each set being a tree.","A nonlinear, two-dimensional data structure.",1
1508,"A collection of nodes, which has a special node called root, and the rest of the nodes are partitioned into one or more disjoint sets, each set being a tree.",a finite set of one or more nodes such that there is a root node and all other nodes are split into trees of lesser value than the root,1
1509,"A collection of nodes, which has a special node called root, and the rest of the nodes are partitioned into one or more disjoint sets, each set being a tree.","A finite number of nodes such that there is one root node, each node has a certain number of children nodes, and each child is also a tree",2
1510,"A collection of nodes, which has a special node called root, and the rest of the nodes are partitioned into one or more disjoint sets, each set being a tree.",A type of data structure in which each element is attached to one or more elements directly beneath it.,1
1511,The length of the longest path from the root to any of its leaves.,"Each level of a generation in the tree, some people do not count the root as a generation",1
1512,The length of the longest path from the root to any of its leaves.,"The height of a tree is in terms of the levels of its nodes such that, if  the tree is empty its height is 0 otherwise its height is equal to the maximum level of its nodes.",1
1513,The length of the longest path from the root to any of its leaves.,The height of a tree is the number of nodes on the longest path from the root to a leaf.,2
1514,The length of the longest path from the root to any of its leaves.,The number of nodes on the longest path from the root of the tree to a leaf.,2
1515,The length of the longest path from the root to any of its leaves.,Height = the number of times you must progress down the levels of a tree to reach a leaf of the greatest distance from the root.,2
1516,The length of the longest path from the root to any of its leaves.,the height of a tree is the length from the root to the furthest leaf,2
1517,The length of the longest path from the root to any of its leaves.,The height is the number of generations (levels) from the root.,1
1518,The length of the longest path from the root to any of its leaves.,The height of a tree is the number of levels between the root and the leaf farthest away from it.,2
1519,The length of the longest path from the root to any of its leaves.,is the depth of its furthest leaf,1
1520,The length of the longest path from the root to any of its leaves.,the number of nodes from root to leaf,1
1521,The length of the longest path from the root to any of its leaves.,the distance from the deepest leaf to the root,2
1522,The length of the longest path from the root to any of its leaves.,the number of generations or levels of a tree,1
1523,The length of the longest path from the root to any of its leaves.,"The intensity of the children. Say you begin with one node, Thats one height. Then you add two children to that node and then two children to each of those nodes and two children to each of THOSE nodes. Youre current height would be 4.",1
1524,The length of the longest path from the root to any of its leaves.,"the number of levels of a tree, like a tree can have at minimum a depth of 3 and at most a height of 8 for 8 nodes.",1
1525,The length of the longest path from the root to any of its leaves.,The number of nodes on the longest path from the root to the leaf.,2
1526,The length of the longest path from the root to any of its leaves.,The height of a tree is the number of nodes on the longes path from the root to a leaf.,2
1527,The length of the longest path from the root to any of its leaves.,is equal to the number of levels.  levels between the root node and the terminal nodes.,1
1528,The length of the longest path from the root to any of its leaves.,the number of generations or levels the tree has,1
1529,The length of the longest path from the root to any of its leaves.,"The height of a tree is the depth of its subtrees, that is, how many layers deep it is.",1
1530,The length of the longest path from the root to any of its leaves.,is the number of generations in the tree,1
1531,The length of the longest path from the root to any of its leaves.,The number of nodes on the longest path from the root to a leaf.,2
1532,The length of the longest path from the root to any of its leaves.,the number of distinct levels of separation,1
1533,The length of the longest path from the root to any of its leaves.,the height of a tree is how many levels of nodes that it has,1
1534,The length of the longest path from the root to any of its leaves.,The connections between elements are called branches. Trees are often called inverted trees because they are normally drawn with the root at the top.,0
1535,A node that has no children.,A leaf is a child of a parent node that has no children nodes of its own.,2
1536,A node that has no children.,A leaf is a node with no children.,2
1537,A node that has no children.,A node with no children.,2
1538,A node that has no children.,A tree node with no children.,2
1539,A node that has no children.,And end point of the tree... a node that does not have any children.,2
1540,A node that has no children.,a node with no children.,2
1541,A node that has no children.,A new item to the tree--a child,1
1542,A node that has no children.,"A leaf is a node with children, it is a terminating node.",1
1543,A node that has no children.,The node with degree 0.,1
1544,A node that has no children.,the node with degree 0,1
1545,A node that has no children.,a leaf is a node with no children,2
1546,A node that has no children.,the last child on any branch,1
1547,A node that has no children.,The last value in the tree. A value with no children attatched.,2
1548,A node that has no children.,A leaf is a node with no children,2
1549,A node that has no children.,a node with degree 0.  last node in the tree and furtherest away from the root.,1
1550,A node that has no children.,an endpoint on a tree that contains no pointers or pointers that are set to null,1
1551,A node that has no children.,an element in a tree that has no children,2
1552,A node that has no children.,a leaf is a node that has no children nodes,2
1553,A node that has no children.,"The elements at the very bottom of an inverted tree (that is, those that have no elements below them) are called leaves.",2
1554,A tree for which the maximum number of children per node is two.,"A tree data structure in which each done has at most two children, typical called left and right nodes.  The right node is usually greater than the left node and the parent node.",1
1555,A tree for which the maximum number of children per node is two.,"A binary tree is a set of nodes that is either empty or partitioned into a root node and one or two subsets that are binary subtrees of the root. Each node can have no more than two children, a right and a left child.",2
1556,A tree for which the maximum number of children per node is two.,"A set of nodes that is either empty or partitioned into a root node and one or two subsets that are binary subtrees of the root.  Each node has at most two children, the left child and the right child.",2
1557,A tree for which the maximum number of children per node is two.,"A set of zero or more nodes, partitioned into a root node and two possibly empty sets that are binary trees. Thus, each node in a binary tree has at most two children, the left child and the right child.",2
1558,A tree for which the maximum number of children per node is two.,A tree in which each parent has a maximum of 2 children.,2
1559,A tree for which the maximum number of children per node is two.,a tree where each node has at most 2 children.,2
1560,A tree for which the maximum number of children per node is two.,a tree with up to two children or a right subtree and/or a left subtree,2
1561,A tree for which the maximum number of children per node is two.,"A binary tree is a tree in which all nodes have a maximum of two degrees, or can only have two children each.",2
1562,A tree for which the maximum number of children per node is two.,a binary tree is a tree data structure in which each node has at most two children.,2
1563,A tree for which the maximum number of children per node is two.,"a tree with only 2 joints, left and right",1
1564,A tree for which the maximum number of children per node is two.,A binary search tree is a tree that also has the condition that each node may have at maximum 2 children,1
1565,A tree for which the maximum number of children per node is two.,a tree where each parent can have at max two children.,2
1566,A tree for which the maximum number of children per node is two.,a list of numbers that are ordered compared to how they compare to the other numbers already added in the tree,1
1567,A tree for which the maximum number of children per node is two.,a tree where each node can have at most 2 children.,2
1568,A tree for which the maximum number of children per node is two.,"Starting at the root node, it branches off into one or two subsets that are binary subtrees of the root.  Each node has at most two children, the left child and the right child.",2
1569,A tree for which the maximum number of children per node is two.,"A binary tree is a set of nodes that is either empty or partitioned into a root node and one or two subsets that are binary subtrees of the root. Each node has at most two children, the left child and the right child.",2
1570,A tree for which the maximum number of children per node is two.,a tree that has a maximum of 2 children per node,2
1571,A tree for which the maximum number of children per node is two.,a tree with elements that can contain at most two pointers,2
1572,A tree for which the maximum number of children per node is two.,A binary tree can have only two children for each node.,2
1573,A tree for which the maximum number of children per node is two.,a tree where every parent has only two children,1
1574,A tree for which the maximum number of children per node is two.,A tree where every node has no more than two children,2
1575,A tree for which the maximum number of children per node is two.,"a binary tree is a special search tree where each node has either 2, 1, or 0 children",1
1576,A tree for which the maximum number of children per node is two.,a binary tree is a special type of tree where each node can only have at maximum 2 children,2
1577,A tree for which the maximum number of children per node is two.,A binary tree is a special type of inverted tree in which each element has only two branches below it.,1
1578,A binary tree that has the property that for any node the left child is smaller than the parent which in turn is smaller than the right child.,"A tree data structure where each node has a value, where the total order is defined on these values.  the left subtree contains only values less than the parent node, and vice versa for the right subtree.",2
1579,A binary tree that has the property that for any node the left child is smaller than the parent which in turn is smaller than the right child.,A binary search tree is a binary tree where the value in any node 'n' is greater than the value in every node in n's left subtree but less than every node in n's right subtree.,2
1580,A binary tree that has the property that for any node the left child is smaller than the parent which in turn is smaller than the right child.,"A binary tree where the value in any node n is greater than the value in every node in n's left subtree, but less than the value of every node in n's right subtree.",2
1581,A binary tree that has the property that for any node the left child is smaller than the parent which in turn is smaller than the right child.,"A binary tree where the search key in any node n is greater than the search key in any node in n's left subtree, but less than the search key in any node in n's right subtree.",2
1582,A binary tree that has the property that for any node the left child is smaller than the parent which in turn is smaller than the right child.,"A tree which is split based on values. This makes it very easy to search. One can compare the desired value to the root, and if the root is greater than, we search the left side of the tree, if it is less than, we search the right side... and do the same thing recursively. ",2
1583,A binary tree that has the property that for any node the left child is smaller than the parent which in turn is smaller than the right child.,a tree where each node has at most two nodes and the node on the left is less than the root and the node on the right is greater than the root.,1
1584,A binary tree that has the property that for any node the left child is smaller than the parent which in turn is smaller than the right child.,a special binary tree that has a rule that all the subtrees on the right are smaller than the node value and all the subtrees on the left are larger than the node value,1
1585,A binary tree that has the property that for any node the left child is smaller than the parent which in turn is smaller than the right child.,"Binary search trees are similar to binary trees, but have been implemented to organize data in a specific way for later searching.",1
1586,A binary tree that has the property that for any node the left child is smaller than the parent which in turn is smaller than the right child.,"it is a binary tree where each node has a value, a total order is defined on these values, the left subtree of a node contains only values less than the node's value, and the right subtree of a node contains only values greater than or equal to the node's value.",2
1587,A binary tree that has the property that for any node the left child is smaller than the parent which in turn is smaller than the right child.,A binary tree with the data organized in a specific arangment,1
1588,A binary tree that has the property that for any node the left child is smaller than the parent which in turn is smaller than the right child.,"A binary search tree is a tree that also has the condition that each node may have at maximum 2 children and where the input data is compared to the data in the tree starting with the root. If the value is smaller than the root it traverses left, if it is larger it traverses right until it becomes a leaf.",1
1589,A binary tree that has the property that for any node the left child is smaller than the parent which in turn is smaller than the right child.,a binary tree in which the data is in order from left to right.,1
1590,A binary tree that has the property that for any node the left child is smaller than the parent which in turn is smaller than the right child.,a tree that is set up so that it can be easily searched for numbers based on the location compared to the previous nodes.,1
1591,A binary tree that has the property that for any node the left child is smaller than the parent which in turn is smaller than the right child.,"a binary tree where the children are ordered such that the right side is greater than the current node, and the left is less than or equal the current node.",2
1592,A binary tree that has the property that for any node the left child is smaller than the parent which in turn is smaller than the right child.,"A binary tree where the value in any node n is greater than the value in every node n's left subtree, but less than every value in n's right subtree.",2
1593,A binary tree that has the property that for any node the left child is smaller than the parent which in turn is smaller than the right child.,A binary search tree is a finite set of nodes that is either empty or consits of a root and two disjoint binary trees call the left and right subtrees.,1
1594,A binary tree that has the property that for any node the left child is smaller than the parent which in turn is smaller than the right child.,it is similar to a binary tree.  The keys in a nonempty left subtree (right subtree) are smaller (larger) than the key in the root of subtree.  the values in all nodes in the left subtree of a node are less than             the node value  the values in all nodes in the right subtree of a node are greater    than the node values,2
1595,A binary tree that has the property that for any node the left child is smaller than the parent which in turn is smaller than the right child.,"a set of numbers arranged by links. each node can contain two pointers to other elements. each node to the left of the parent is smaller and each node to the right is larger. recursive implementation implies that if traversed in order, the output would be sorted",1
1596,A binary tree that has the property that for any node the left child is smaller than the parent which in turn is smaller than the right child.,"A binary search tree is a special binary tree arranged such that every left child node contains a value less than its parent, and every right child node contains a value greater its parent.",2
1597,A binary tree that has the property that for any node the left child is smaller than the parent which in turn is smaller than the right child.,"a binary tree with a special organization of data. where the left child of the element is less than it, and the right child is larger than it.",2
1598,A binary tree that has the property that for any node the left child is smaller than the parent which in turn is smaller than the right child.,A tree in which the smaller values are located on the left of a parent node and the larger values are located on the right of the parent node.,2
1599,A binary tree that has the property that for any node the left child is smaller than the parent which in turn is smaller than the right child.,"a binary search tree is a special tree in which each node has at most two children, labeled left child and right child",1
1600,A binary tree that has the property that for any node the left child is smaller than the parent which in turn is smaller than the right child.,"it is a binary tree where each node has a unique key, the left child of a node has only values less than that node, and the right child of each node has higher values than that node.",2
1601,A binary tree that has the property that for any node the left child is smaller than the parent which in turn is smaller than the right child.,"Binary search trees are a fundamental data structure used to construct more abstract data structures such as sets, multisets, and associative arrays.",1
1602,"Traverse the left subtree, then the root, then the right subtree.","For every node in the binary tree we first visit its left sub-tree (if its there) and then visit the parent node itself, and then the right sub-tree (if its there).",2
1603,"Traverse the left subtree, then the root, then the right subtree.",The inorder traversal of a binary tree visits the node of a binary tree in order according to their data values.,1
1604,"Traverse the left subtree, then the root, then the right subtree.",Traverses the binary tree in inorder.  It lets you visit the nodes in order according to their data values.,1
1605,"Traverse the left subtree, then the root, then the right subtree.",Its used to visit nodes of a binary search tree in a search key order.,1
1606,"Traverse the left subtree, then the root, then the right subtree.",(Left side of tree) (Root) (Right side of tree),2
1607,"Traverse the left subtree, then the root, then the right subtree.",printing a tree in order from least to greatest. This done by going as far left down the tree as possible and printing the parent and then right tree. Then move up the tree.,2
1608,"Traverse the left subtree, then the root, then the right subtree.","The in order is to go from left,root,right",2
1609,"Traverse the left subtree, then the root, then the right subtree.","Inorder traversal of a binary tree will retrieve start at the furthest left hand leaf and checks it, it’s parent, and it’s right side sibling, then it goes up a level and repeats until it gets to the root.",1
1610,"Traverse the left subtree, then the root, then the right subtree.",traverse the left subtree. visit the root. traverse the right subtree.,2
1611,"Traverse the left subtree, then the root, then the right subtree.",postorder,0
1612,"Traverse the left subtree, then the root, then the right subtree.",in order starts with the root then does right child then left child recursively,0
1613,"Traverse the left subtree, then the root, then the right subtree.",Left Child -&gt; Parent -&gt; Right Child,2
1614,"Traverse the left subtree, then the root, then the right subtree.",it goes from lowest to highest inside of the tree,1
1615,"Traverse the left subtree, then the root, then the right subtree.","starting by displaying the node furthest to the right, then  the node, then the node on the right, in recursive order.",1
1616,"Traverse the left subtree, then the root, then the right subtree.",It travels left to right,1
1617,"Traverse the left subtree, then the root, then the right subtree.",void inorder(ptNode ptr) { if (ptr) { inorder (ptr-&gt;left); cout&lt;&lt;ptr-&gt;data; inorder(ptr-&gt;right); } },2
1618,"Traverse the left subtree, then the root, then the right subtree.","the root is in the middle.  The left subtree is traversed first, then the root, and finally the right subtree.",2
1619,"Traverse the left subtree, then the root, then the right subtree.","a traversal that visits the left branch first, then the parent node, then the right branch, recursively.",2
1620,"Traverse the left subtree, then the root, then the right subtree.","Inorder traversal visits the left branch of a node (all the way to it's deepest left-most leaf) before visiting the node itself. After visiting the entire left branch and the node, it visits the node's right branch following the same pattern of left child, node, right child.",2
1621,"Traverse the left subtree, then the root, then the right subtree.",left middle right,2
1622,"Traverse the left subtree, then the root, then the right subtree.","You traverse all the nodes to the left, then visit the root, then traverse all the nodes on the right.",2
1623,"Traverse the left subtree, then the root, then the right subtree.","you would go to the furthest down left most node, then to the root then to the right (if left and right exist) then you would return one node previous and do the same until you reached the root, then go to the furthest down left most node on the right side of the root and continue this process",2
1624,"Traverse the left subtree, then the root, then the right subtree.","it means that you traverse one subtree of a node, then look at the node itself before traversing the other subtree of the node",1
1625,"Traverse the left subtree, then the root, then the right subtree.","Level order traversal is a traversal method by which levels are visited successively starting with level 0 (the root node), and nodes are visited from left to right on each level, with Push and Pop methods. ",1
1626,The height of the tree (or log of the number of elements in the tree).,This is on the runtime order of log(n) where n is the number of nodes in the binary tree.,2
1627,The height of the tree (or log of the number of elements in the tree).,In a binary search tree of size 'n' it takes log(n) comparisons to find a specified element.,2
1628,The height of the tree (or log of the number of elements in the tree).,n-1/2 is the algorithm to compare and find an element.,1
1629,The height of the tree (or log of the number of elements in the tree).,At most its equivalent to the height of the tree.,2
1630,The height of the tree (or log of the number of elements in the tree).,Log(n),2
1631,The height of the tree (or log of the number of elements in the tree).,O(log n),2
1632,The height of the tree (or log of the number of elements in the tree).,Depends on what half of the tree and the levels you have.,1
1633,The height of the tree (or log of the number of elements in the tree).,O(log n) in balanced trees,2
1634,The height of the tree (or log of the number of elements in the tree).,log(n),2
1635,The height of the tree (or log of the number of elements in the tree).,nLog(n),1
1636,The height of the tree (or log of the number of elements in the tree).,logn,2
1637,The height of the tree (or log of the number of elements in the tree).,"at the minimum log(n)/log(2), at the maximum N searches, where N is the number of nodes.",1
1638,The height of the tree (or log of the number of elements in the tree).,It takes at most 3 comparisons to find and element in a binary search tree,0
1639,The height of the tree (or log of the number of elements in the tree).,log (n)   where n equals the number of nodes.,2
1640,The height of the tree (or log of the number of elements in the tree).,it takes as many comparisons as the number of levels of the binary search tree. it only compares one number at each level,2
1641,The height of the tree (or log of the number of elements in the tree).,At most it takes one less comparisons than the tree's height. In big-O notation it takes O(log n) comparisons if the tree is balanced.,2
1642,The height of the tree (or log of the number of elements in the tree).,log n comparisons,2
1643,The height of the tree (or log of the number of elements in the tree).,(n^k)-1   where k is the height of the tree,0
1644,The height of the tree (or log of the number of elements in the tree).,"it takes h comparisons, where h is the height of the tree",2
1645,The height of the tree (or log of the number of elements in the tree).,2 way key comparison,0
1646,Function members and data members.,"The name of the class file, the parameters it must take to perform its function.  Also a brief description of what the class does.",1
1647,Function members and data members.,"access specifiers and functions, oftentimes a constructor.",1
1648,Function members and data members.,"The elements typically included in a class definition are the function prototypes, usually declared public, and the data members used in the class, which are usually declared private.",2
1649,Function members and data members.,"Class is user defined.  It contains members, data and functions.  The keyword class is used and includes brackets ({})",1
1650,Function members and data members.,the functions and variables used when the object is defined for the class.,1
1651,Function members and data members.,"Data members, functions and function definitions, variables.",2
1652,Function members and data members.,return type and input parameters,1
1653,Function members and data members.,Constructor Data members Methods,1
1654,Function members and data members.,"Function members and member attributes, or in other words, the class variables and functions.",2
1655,Function members and data members.,"The elements that are included in a class definition is the access-modifier, data types, variables, and function signatures.",1
1656,Function members and data members.,The variables and function prototypes.,1
1657,Function members and data members.,public and private variables and initiations of functions included in the class.,1
1658,Function members and data members.,The return value and the accepted value.,0
1659,Function members and data members.,"A class definition typically includes the class name, the classes constructor(s), and any extra functions and class variables.",1
1660,Function members and data members.,"Parameters and their type, Class name, and return type, and the code to be executed in the class.",1
1661,Function members and data members.,"data members, class variables, and functions",2
1662,Function members and data members.,"Constructor, functions, and variables native to the class.",1
1663,Function members and data members.,functions and data members,2
1664,Function members and data members.,data members and function definitions,2
1665,Function members and data members.,member functions and data members,2
1666,Function members and data members.,"constructor, and function definitions.",1
1667,Function members and data members.,class name data of class definition of functions and methods,1
1668,Function members and data members.,"A class definition includes the definitions of the class' constructor(s) and any public or private functions. Of course, it also #includes the class header and any necessary C libraries",1
1669,Function members and data members.,"Class name, {}, semicoln at the end of the defination, private and bublic followed by "": """,1
1670,Function members and data members.,"a constructor, private and public variables, and function prototypes",1
1671,Function members and data members.,"Data variables and Functions, Data members",2
1672,Function members and data members.,class definitions include the name of the class and type of parameters,1
1673,Function members and data members.,"class variables, class function prototypes",1
1674,Function members and data members.,input  & return type elements,1
1675,Private and public.,Public and private specifiers.,2
1676,Private and public.,"Public, Private, Restricted",1
1677,Private and public.,The access specifiers are public and private.,2
1678,Private and public.,public private protected,1
1679,Private and public.,Public or Private.,2
1680,Private and public.,public: the function or variable can be used outside the class private: the function or variable can only be used with the class,2
1681,Private and public.,Public and Private,2
1682,Private and public.,public private and protected,1
1683,Private and public.,Public Private,2
1684,Private and public.,"Private, public, protected",1
1685,Private and public.,The access-specifiers that can be used in a C++ class definition is private and public.,2
1686,Private and public.,public and private.,2
1687,Private and public.,"static, long, unsigned",0
1688,Private and public.,"Private, Public, Protected, or Friend.",1
1689,Private and public.,"A C++ class definition may include access-specifiers public, private, and static.",1
1690,Private and public.,"local, global, local-variable, function specific",1
1691,Private and public.,"public, private",2
1692,Private and public.,"Public, protected, and private.",1
1693,Private and public.,"private, public",2
1694,Private and public.,public - can be accessed by any of the program  private - can only be accessed by the class functions themselves and no outside functions or calls,2
1695,Private and public.,"public , private, protected",2
1696,Private and public.,public and private,2
1697,Private and public.,"public, private, protected",1
1698,Private and public.,"functions and data members can be given access-specifications of public, private, and friend. public access is given to any functions or members not given specific access rights.",1
1699,Private and public.,data member or data functions are access specifiers,0
1700,Private and public.,public or private,2
1701,Private and public.,"public - can be accessed from outside the class private - accessible only from inside the class, not inherited protected - accessible only from inside the class, inherited",1
1702,By using constructors.,ie. GradeBook myGradeBook();  call upon the class and then give it a name like shown,0
1703,By using constructors.,They are initialized as a named instance of the template formed by the class. This named instance can then be modified to be different from the class that it was created from.,1
1704,By using constructors.,Objects are initialized by a value given.  When an object is defined for a certain task.,1
1705,By using constructors.,"They are initialized with a "" . "" (dot) between the constructor and the object being created.",1
1706,By using constructors.,objectname classname();  to call a function from the class:  objectname.funciton();,0
1707,By using constructors.,"If the object refers to a class, the constructor(s) will initialize the objects based on return type and parameters passed. Compiler will auto-create one if one is not provided.",2
1708,By using constructors.,classname objectname(input parameters);,1
1709,By using constructors.,When the class is called by the Constructor,1
1710,By using constructors.,"Constructors; default when not provided by user, or programmer specified constructors.",2
1711,By using constructors.,Objects are usually initialized at the beginning of the program and are initialized usually in the main function. They are initialized after the class's name.,1
1712,By using constructors.,"&lt;variable type&gt; &lt;variable name&gt;; or, if you want to initialize a variable to a certain value, &lt;variable type&gt; &lt;variable name&gt; = &lt;value&gt;;",1
1713,By using constructors.,"variables are set to a given value, or 0 if none is given.",0
1714,By using constructors.,"When the object is initialized, its constructor is called (whether one is provided or c++ assigns a default constructor).",2
1715,By using constructors.,"Objects are initialized essentially as copies of the corresponding classes, complete with their own separate variables.",1
1716,By using constructors.,"If you had a class Gradebook, you would initialize it in your main function by use of a constructor in the Gradebook class.  If no constructor is specified or found, c++ will use a default one with no parameters.  Gradebook myGradebook;  In this bit of code, the class Gradebook has been initialized as object myGradebook.",2
1717,By using constructors.,objects are initialized by stating the classname first then assigning a name to the object. Within the object's ( ) is a place where it can be initialized.,1
1718,By using constructors.,They are initialized with a constructor.,2
1719,By using constructors.,"The value is specified after declaration,  It can initialized anywhere between the declaration and the corresponding }.",1
1720,By using constructors.,"with the default constructor for that object in its class.  if no constructor is specified, it uses the default system constructor.",1
1721,By using constructors.,initialized using the same name as the class,1
1722,By using constructors.,they are initialized to a value dependent on the compiler,0
1723,By using constructors.,memory is allocated in accordance with their type and initialization input.,0
1724,By using constructors.,Objects are assigned a space in memory when they are created. the name given to the object points to the memory address where the objects data resides.,0
1725,By using constructors.,using constructor,2
1726,By using constructors.,by giving them a value,0
1727,By using constructors.,"By declaring the class first, the name of the variable, and then any variables that need to be put in the constructor.  Ex. Class myClass(x, y)",2
1728,By using constructors.,"objects are initialized by giving the object a type, name, and initial value",1
1729,By using constructors.,they are initialized to 0,0
1730,By using constructors.,"obj. are initialized by the variables that call them, when they are created within a class.   e.i. classname objectname etc. ",1
1731,"The name of the function and the list of parameters, including their types.","Name of the function, parameters it must receive in order to perform and a return type.",2
1732,"The name of the function and the list of parameters, including their types.",a function signature is the elements that make it unique such as the variables it calls for and also I suppose this includes the program it is in.,1
1733,"The name of the function and the list of parameters, including their types.","A function signature is the return type of a function, its name, and the number and type of its parameters.",2
1734,"The name of the function and the list of parameters, including their types.",function prototype that contains functions and data members.,1
1735,"The name of the function and the list of parameters, including their types.",A function signature is a declaration of the function that includes the parameter types and the number of parameters.,2
1736,"The name of the function and the list of parameters, including their types.",the declaration of the function.,1
1737,"The name of the function and the list of parameters, including their types.","Includes the name, accepted parameters, and return type.",2
1738,"The name of the function and the list of parameters, including their types.",its return type and its input parameters,2
1739,"The name of the function and the list of parameters, including their types.",Contains the function name and its paramaters.  The return type is not included,2
1740,"The name of the function and the list of parameters, including their types.","Return type, function name, and the parameter types",2
1741,"The name of the function and the list of parameters, including their types.",The function signature tells what the function parameters and includes all the function calls,1
1742,"The name of the function and the list of parameters, including their types.","The function's name, as well as what it returns and what it accepts.",2
1743,"The name of the function and the list of parameters, including their types.",the body of the function that holds all the actual code,0
1744,"The name of the function and the list of parameters, including their types.",A function signature is the return type and accepted pass value type it takes,1
1745,"The name of the function and the list of parameters, including their types.",A function signature specifies the name and input variables of a function.,2
1746,"The name of the function and the list of parameters, including their types.",A function signature is the function's parameters and their type and the name of the function.  The return type is not a part of the function signature.,2
1747,"The name of the function and the list of parameters, including their types.",the name of the function and what it accepts/ returns,2
1748,"The name of the function and the list of parameters, including their types.","the unique identifier of a function, which includes input variables along with the function name, but excludes the output type.",1
1749,"The name of the function and the list of parameters, including their types.","The order, number, and type of data items included inside the function parameters.",1
1750,"The name of the function and the list of parameters, including their types.","its the scope, type, and parameters of that function that give it it's properties and defines it against other functions.",2
1751,"The name of the function and the list of parameters, including their types.","is the name of the fuction, return type, and parameters that are being used",2
1752,"The name of the function and the list of parameters, including their types.","a function signature should include the name of the function, parameters, and a body.",1
1753,"The name of the function and the list of parameters, including their types.",the name of the function and the arguments passed to that function,2
1754,"The name of the function and the list of parameters, including their types.","A function signature, used in a function's prototype, is the set of object types it take in as parameters, with or without names given for the objects.",2
1755,"The name of the function and the list of parameters, including their types.",function name and parameter are called function signature.,2
1756,"The name of the function and the list of parameters, including their types.",fuction name and parameters,2
1757,"The name of the function and the list of parameters, including their types.","The parameters needed, the return type, and name of the function.",2
1758,"The name of the function and the list of parameters, including their types.","the signature of a function includes the name of the function, the number and types of parameters, and the return type",2
1759,"The name of the function and the list of parameters, including their types.","It is what uniquely separates overloaded functions. It includes the return type, and the parameter list of the function.",1
1760,"The name of the function and the list of parameters, including their types.","function sig is, is what is the class recognizes as the main function, or rather its specification ",0
1761,A function that calls itself.,A function that calls upon it self to solve a problem.  Each time it calls upon it self it splits up a problem into a simplier form until it reaches a 'base case' which is the most simplest form of the problem.,2
1762,A function that calls itself.,A function that calls itself to perform an opperation such as a factorial recursive function.,2
1763,A function that calls itself.,A base case that calls upon itself until the problem becomes smaller and terminates.,1
1764,A function that calls itself.,It's a function that calls itself. It runs multiple times until the base case is reached.,2
1765,A function that calls itself.,a function that calls itself untill it reaches a base case.,2
1766,A function that calls itself.,"A function that calls itself. Each time it does, it must get smaller, and eventually MUST converge to a base case, otherwise you can start an infinite loop.",2
1767,A function that calls itself.,a function that calls itself until a base case is met,2
1768,A function that calls itself.,A function that calls itself. With each function call the problem is diminished.,2
1769,A function that calls itself.,A function that calls itself to perform a certain task,2
1770,A function that calls itself.,A recursive function is a function that calls itself. Usually called the base case. If the base case is not correct it causes a infinite loop.,2
1771,A function that calls itself.,"A function that calls itself, in order to solve a problem.",2
1772,A function that calls itself.,"a function that calls itself over and over until it finds the simplest form of solution, or the base case.",2
1773,A function that calls itself.,"A recursive function is a function that calls itself repeatedly until a base case is achieved. The fundamental idea is to break one large problem into a series of smaller, similar problems.",2
1774,A function that calls itself.,"A recursive function typically simplifies a problem by calling itself, until arriving at a base case, at which it recursively returns a solution.",2
1775,A function that calls itself.,"A recursive function is a function that breaks down a large problem into two or more smaller problems and calls itself to solve those smaller problems until a base case or terminating point is reached.  At the base case, a definite answer is called and the function no longer recurses, but unwinds itself back through function calls to determine the answer to the original large problem.",1
1776,A function that calls itself.,a function that calls itself into a loop with a base case for a loop exit.,1
1777,A function that calls itself.,a function that calls itself until the base cases are met.,2
1778,A function that calls itself.,A recursive function only knows how to solve base cases  A recursive function calls itself directly or indirectly until a base case is reached.,2
1779,A function that calls itself.,a function that calls on itself and uses a base case to stop the recursion,2
1780,A function that calls itself.,"a function that calls itself, and which eaach calls get closer and close to the base case.",2
1781,A function that calls itself.,A function that divides and conquers a problem.  There is a base case that will eventually be reached.  The function calls itself over and over until the base case is satisfied.,2
1782,A function that calls itself.,a function that calls itself in the definition code,2
1783,A function that calls itself.,A recursive function solves a problem by repeatedly calling itself. the initial problem is broken into successively smaller parts until a much simpler base case is reached. the solutions to each piece of the problem are then returned a step at a time.,2
1784,A function that calls itself.,"It invoke by itself again ana again, unless it reach bas case",1
1785,A function that calls itself.,"a function that solves a problem by dividing the problem into smaller problems, by calling its self again and again, until a base case is reached.",2
1786,A function that calls itself.,"A function that calls itself over and over again till a base case is reached, then it returns back to the original function.",2
1787,A function that calls itself.,"a recursive function is a function that during execution, calls itself over and over until a base case is reached",2
1788,A function that calls itself.,A function that calls itself. Usually used to split a problem into several smaller problems of the same type.,2
1789,A function that calls itself.,function that calls it self till the base case is met,2
1790,Through iteration.,"Iteration, performers  a series of checks and loops.",2
1791,Through iteration.,The alternative method is to use loops in the program instead of a function which calls itself.,1
1792,Through iteration.,An alternative to solving a problem using recursive functions is to solve the problem using iteration.,2
1793,Through iteration.,"Iteration, this would be more efficient and has repetition structure.",2
1794,Through iteration.,One can use iteration or by using a simple while/for loop.,2
1795,Through iteration.,iteration,2
1796,Through iteration.,"Iteration. A while loop or a for loop will be able to accomplish the same desired outcome... It may be faster than recursion, but could also be harder to understand.",2
1797,Through iteration.,you can also solve the problem iteratively,2
1798,Through iteration.,iterative,2
1799,Through iteration.,Using iteration loops.,2
1800,Through iteration.,Another alternative way to solve a problem instead of using recursive functions is by using iteration.,2
1801,Through iteration.,"A recursive function can often be solved using an iterative function, which runs faster, but is often more complicated.",2
1802,Through iteration.,Any recursive function can be solved using an iterative method.,2
1803,Through iteration.,"Many recursive solutions may also be solved with looping control statements, such as while, for, do-while, etc.",1
1804,Through iteration.,"Using an iterative function, which repeats a specified operation or set of operations until a terminating point or base case is reached.  ",2
1805,Through iteration.,iteratively,2
1806,Through iteration.,using an Iterative calls,2
1807,Through iteration.,Iteration.,2
1808,Through iteration.,iteration is the alternative way to solve a problem,2
1809,Through iteration.,using an iterative solution instead,2
1810,Through iteration.,"Using an iterative solution.  For, while, or do while loop.",2
1811,Through iteration.,the alternative way to solve a problem that could be solved using recursion is iteration.,2
1812,Through iteration.,"Any problem solved recursively could be solved with an iterative function. Iterative replacements for recursive functions may be more difficult to program, but often lead to more efficient solutions to a problem. ",2
1813,Through iteration.,by iteration,2
1814,Through iteration.,"itteration, like a for loop, a while loop, or a do while loop",2
1815,Through iteration.,Iteration by using loops,2
1816,Through iteration.,iterative functions,2
1817,Through iteration.,"the alt, way is to use a functions parameter in a call ""to"" function. ",1
1818,The static arrays are intialized only once when the function is called.,The array that is declared static retains its modified elements so once it is called upon again the latest elements are modified again.  An array that is not declared static will keep its original elements.,1
1819,The static arrays are intialized only once when the function is called.,A static array only has a specific size and it cannot grow. Also static arrays cannot be accessed outside the program which created it.,1
1820,The static arrays are intialized only once when the function is called.,Arrays declared as static are not created and initialized when a function is called and destroyed when the function terminates.,2
1821,The static arrays are intialized only once when the function is called.,Static can be initialized and non-static cannot in C++.,1
1822,The static arrays are intialized only once when the function is called.,An array declared static remains the same throughout the execution of the program.,1
1823,The static arrays are intialized only once when the function is called.,a static array will be called only once. once it has been declared the complier will ignore the static line if it comes to it again.,1
1824,The static arrays are intialized only once when the function is called.,"The static array will be available to the whole of the program, whereas an array that is not static is only available within the scope in which it is declared.   //pass-by-reference???",1
1825,The static arrays are intialized only once when the function is called.,a static array has a predetermined size and that size cannot be altered,1
1826,The static arrays are intialized only once when the function is called.,Arrays declared static can not be changed.  One not declared static can be altered.,1
1827,The static arrays are intialized only once when the function is called.,"an array that is declared as static will retain the values stored in it's elements between function calls, and will not reinitialize them to default values.",1
1828,The static arrays are intialized only once when the function is called.,An array that is declared static causes anything that is not initialized to be set to 0.,1
1829,The static arrays are intialized only once when the function is called.,A static array will have a null character at the end of the array.,1
1830,The static arrays are intialized only once when the function is called.,static arrays cannot be changed while normal arrays can be changed,1
1831,The static arrays are intialized only once when the function is called.,An array they is declared as static can be accessed outside of the method it was declared without passing it as an argument to other functions in the same class.,1
1832,The static arrays are intialized only once when the function is called.,"A static array has class scope, allowing it to remain where other arrays might be recycled.",1
1833,The static arrays are intialized only once when the function is called.,An array that is static does not change or uninitialize if called later unless explicitly acted upon.  It does not terminate or change across objects.  An automatic local array will be cleared and uninitialized if called later outside of it's specific scope.,1
1834,The static arrays are intialized only once when the function is called.,"one declared as static is one that is already defined. The program knows the length and the array from the start, whereas non-static arrays are declared or assigned later.",1
1835,The static arrays are intialized only once when the function is called.,"a non static array must reinitialize itself every function call, while a static array will only initialize itself once, unless otherwise forced.",2
1836,The static arrays are intialized only once when the function is called.,A static array retains any modified values after a function call. Automatic arrays reset to their initial values when the function ends.,1
1837,The static arrays are intialized only once when the function is called.,"a static array is one that keeps its values and is not initialized every time a class function is called, it's data is not lost at function end.",1
1838,The static arrays are intialized only once when the function is called.,an array that is declared as static can only be used in the function that its being called in. Its a constant array. Static is another way of say const.,1
1839,The static arrays are intialized only once when the function is called.,Values in an array that is not delcared as static will remain constant.  When an array is declared const values within the array can be manipulated.,1
1840,The static arrays are intialized only once when the function is called.,the data of a static array cannot be changed,1
1841,The static arrays are intialized only once when the function is called.,"Standard arrays terminate when the functions that call them finish. A static array is not removed from memory when it's parent function terminates, leaving it available for other functions (or new instances of the original function).",1
1842,The static arrays are intialized only once when the function is called.,by defining static array it doese not lose scope in locala function. static array makes programm more scalable. non static array lose scope inside the local function.,1
1843,The static arrays are intialized only once when the function is called.,static arrays can be called from anywhere,1
1844,The static arrays are intialized only once when the function is called.,A static array cannot be changed. A regular array can be changed when it is passed to a function or manually.,1
1845,The static arrays are intialized only once when the function is called.,"a static array can be can be edited throughout the program, while a non-static array can only be edited within a given function",1
1846,The static arrays are intialized only once when the function is called.,"An array that is declared static is allocated when the program begins to run, and is not freed until the program exits, but has limited scope. A non-static array is allocated and freed every time that it comes in and out of scope.",1
1847,The static arrays are intialized only once when the function is called.,static has a predetermined size that cannot be passed while vis versa.,1
1848,The char[] will automatically add a null \0 character at the end of the string.,the type char[] has a  null ('\n' ) element at the very end.,2
1849,The char[] will automatically add a null \0 character at the end of the string.,a variable char is basically any non command key on the keyboard that you can press. A string is a collection of letters or numbers that is stored together to be used later. Comonly strings are used for words. Chars can be used for less but can have opperations performed on them in a useful way.,0
1850,The char[] will automatically add a null \0 character at the end of the string.,The programmer must provide the null terminating character in a string of characters using type char[] and must also ensure that the array is large enough to contain the input string of characters and the null terminating character.,2
1851,The char[] will automatically add a null \0 character at the end of the string.,String of characters are followed by a null statement.  type string is for example   string s;,2
1852,The char[] will automatically add a null \0 character at the end of the string.,String contains a word where as char can contain phrases or a string of characters.,0
1853,The char[] will automatically add a null \0 character at the end of the string.,a string is a variable with a single entinty of letters combined into one while in a char[] each letter is assigned a memory value and each has its own variable assigned i.e. char[0] char[1].,1
1854,The char[] will automatically add a null \0 character at the end of the string.,"A string contains a null character at the end of the string, which makes it easily possible to get the string length. A char array can have a virtually unlimited length, therefore, its size must be declared/limited.",1
1855,The char[] will automatically add a null \0 character at the end of the string.,an array of characters stores a null character at the end,2
1856,The char[] will automatically add a null \0 character at the end of the string.,"When you read a string of characters, you also read in the white space.  When you read characters declared char you only read the characters, no white space.",1
1857,The char[] will automatically add a null \0 character at the end of the string.,"Character arrays will terminate at any whitespace, including spaces. Strings terminate when they encounter the new line character.",1
1858,The char[] will automatically add a null \0 character at the end of the string.,The difference is that a string that is declared a variable of type char[] is each char is included in the array versus the string of characters that is read into a variable.,0
1859,The char[] will automatically add a null \0 character at the end of the string.,"An array of strings reads the string literals, meaning anything within ""quotes"". A char array reads a string as each individual character.",0
1860,The char[] will automatically add a null \0 character at the end of the string.,character arrays can call on individual letters were a string array can only call words.,0
1861,The char[] will automatically add a null \0 character at the end of the string.,The character array has an end of line character at the end of it.,1
1862,The char[] will automatically add a null \0 character at the end of the string.,"Type char[] may contain a null value as the last element, whereas type string will not.",2
1863,The char[] will automatically add a null \0 character at the end of the string.,The variable of type string has a terminating character \0 at the end of it.,1
1864,The char[] will automatically add a null \0 character at the end of the string.,the one that is type string has an extra string member. The /0 at the end.,1
1865,The char[] will automatically add a null \0 character at the end of the string.,"a string has variable size and function calls available, while an character array usually has a static size.",1
1866,The char[] will automatically add a null \0 character at the end of the string.,a string char[] adds a null value to the end of the string.,2
1867,The char[] will automatically add a null \0 character at the end of the string.,"char array needs an end character signature and is made up of characters each separate from each other, a string is an object in itself, with a value that the user enters.",2
1868,The char[] will automatically add a null \0 character at the end of the string.,"the variable of type char[], each character is stored into a different memory address and can be accessed easly, where as in a string of character, its not easy to be able to access each character in the string.",1
1869,The char[] will automatically add a null \0 character at the end of the string.,"When the string is passed into the array char, individual characters are stored and can be manipulated.  Although when a word is stored into a string variable, it is stored as one word and not as individual characters.",1
1870,The char[] will automatically add a null \0 character at the end of the string.,"a string variable can change in size and is passed to functions by value, whereas a type char[] cannot change in size and is passed to functions by reference only",0
1871,The char[] will automatically add a null \0 character at the end of the string.,"A string type string acts as a single object, with individual char entities accessible only through specific string class functions. A char array is less robust, but allows direct access to specific char entities.",1
1872,The char[] will automatically add a null \0 character at the end of the string.,"In arrays strings are stored as a characters (char[]), each character of string will be stored in each memory location of the array, while string of characters is only one memory location.",0
1873,The char[] will automatically add a null \0 character at the end of the string.,"an array of characters has one more element, its last element,the terminating element, or null, which doesnt exist in a variable of type string",2
1874,The char[] will automatically add a null \0 character at the end of the string.,A string of characters is a specific variable type that has no extra data at the end. A string of type char[] is all the characters and a null ('\0'),2
1875,The char[] will automatically add a null \0 character at the end of the string.,a string of characters will have a null character or value at the end of the string,2
1876,The char[] will automatically add a null \0 character at the end of the string.,"when the characters are put in a char array, there is also a null terminating character added to the end, '\0'",2
1877,The char[] will automatically add a null \0 character at the end of the string.,"string of characters that is read into a variable of type string includes, ",0
1878,"Divide a problem into smaller subproblems, solve them recursively, and then combine the solutions into a solution for the original problem.","For example we have an array on n elements, the divide and conquer splits up the array into equal halves and repeats this process until each element is by itself",1
1879,"Divide a problem into smaller subproblems, solve them recursively, and then combine the solutions into a solution for the original problem.",Divide and coquer means dividing a problem into 2+ problems which are solved and then merged  back together for a final solution to the whole problem.,2
1880,"Divide a problem into smaller subproblems, solve them recursively, and then combine the solutions into a solution for the original problem.",The divide and conquer paradigm divides a problem into smaller and smaller portions that are easier to solve.,1
1881,"Divide a problem into smaller subproblems, solve them recursively, and then combine the solutions into a solution for the original problem.","Divide elements,recur then conquer, which works in merge sort and quicksort.",1
1882,"Divide a problem into smaller subproblems, solve them recursively, and then combine the solutions into a solution for the original problem.","To divide and conquer, you divide the program in half once or multiple times to the extent that the program as a whole is easier to work in groups to solve the problem.",1
1883,"Divide a problem into smaller subproblems, solve them recursively, and then combine the solutions into a solution for the original problem.",to divide one larger string/line of values and sepereate them into smallers lines to easily manipulate them and then replace them in the order in which they should be.,1
1884,"Divide a problem into smaller subproblems, solve them recursively, and then combine the solutions into a solution for the original problem.","Split the problem into smaller, more manageable parts, and proceed to address the smaller problems.",1
1885,"Divide a problem into smaller subproblems, solve them recursively, and then combine the solutions into a solution for the original problem.",dived and conquer is the breaking up of a large complex program into small easy to solve components.,1
1886,"Divide a problem into smaller subproblems, solve them recursively, and then combine the solutions into a solution for the original problem.",Dividing a larger problem into the smallest incident of the problem and solving the smallest incident.,1
1887,"Divide a problem into smaller subproblems, solve them recursively, and then combine the solutions into a solution for the original problem.","Break up very large data structures into smaller sub-units, that are easier to manipulate.",1
1888,"Divide a problem into smaller subproblems, solve them recursively, and then combine the solutions into a solution for the original problem.",The divide-and-conquer technique is where it takes the sorting algorithm and breaks up the array into smaller elements of the array to tackle the problem and run the algorithm.,1
1889,"Divide a problem into smaller subproblems, solve them recursively, and then combine the solutions into a solution for the original problem.","The divide-and-conquer paradigm divides the problem into two pieces and works on each piece separately, allowing for a faster approach to 2 separate smaller problems. ",1
1890,"Divide a problem into smaller subproblems, solve them recursively, and then combine the solutions into a solution for the original problem.","Take a problem and divide it into a smaller problem and solve that smaller problem, or divide it into a smaller problem and solve it, thus solving the whole problem in the process.",1
1891,"Divide a problem into smaller subproblems, solve them recursively, and then combine the solutions into a solution for the original problem.",The idea is to split the problem into half and solve for the smaller split-problems.,1
1892,"Divide a problem into smaller subproblems, solve them recursively, and then combine the solutions into a solution for the original problem.","The divide and conquer paradigm, splits a large problem into simpler problems, at which point it solves the simpler problems and merges the simple solutions together to answer the large problem.",2
1893,"Divide a problem into smaller subproblems, solve them recursively, and then combine the solutions into a solution for the original problem.","Divide-and-conquer refers to abstraction, the act of separating large, complex problems into smaller, easier problems that can be solved by a relatively simple algorithm.",1
1894,"Divide a problem into smaller subproblems, solve them recursively, and then combine the solutions into a solution for the original problem.","It takes a large problem and splits it into two or more easier or faster solutions, and  makes for better readability. ",1
1895,"Divide a problem into smaller subproblems, solve them recursively, and then combine the solutions into a solution for the original problem.",it is the taking of a larger problem and splitting it into simpler smaller problems.,1
1896,"Divide a problem into smaller subproblems, solve them recursively, and then combine the solutions into a solution for the original problem.",It divides the problem into singular units and works on the problem piece by piece until the problem is solved.,1
1897,"Divide a problem into smaller subproblems, solve them recursively, and then combine the solutions into a solution for the original problem.","smaller parts are easier to compare than comparing the whole, so it divides the problem down in halves until it can easily compare, then works backwards putting it back together to give the solution.",2
1898,"Divide a problem into smaller subproblems, solve them recursively, and then combine the solutions into a solution for the original problem.","a divide-and-conquer paradigm. takes some data, divides it into two parts, and works on each part indiviually until the item is found.",1
1899,"Divide a problem into smaller subproblems, solve them recursively, and then combine the solutions into a solution for the original problem.","The idea of divide and conquer is to take a large problem, split it into n smaller problems, making the program easier to read and modify.",1
1900,"Divide a problem into smaller subproblems, solve them recursively, and then combine the solutions into a solution for the original problem.",the divide and conquer paradigm is a recursive solution that keeps dividing the problem into halves until a base case is reached.,1
1901,"Divide a problem into smaller subproblems, solve them recursively, and then combine the solutions into a solution for the original problem.","dividing and conquering means breaking a problem into two smaller problems, solving both of those, and putting the two solutions together.",2
1902,"Divide a problem into smaller subproblems, solve them recursively, and then combine the solutions into a solution for the original problem.","Divide the big problem into small problem, solve small problem and join small solved elements of the problem. if there is two ore more elements in the array, divide the array into parts and compare the elements, after comperison, conquer the elements. If array have n element, first half have n/2 elements",2
1903,"Divide a problem into smaller subproblems, solve them recursively, and then combine the solutions into a solution for the original problem.","divide the array in half, sort each half, then sort them back in one array",1
1904,"Divide a problem into smaller subproblems, solve them recursively, and then combine the solutions into a solution for the original problem.",You take a class and break down everything it is supposed to do into easily managed functions.,1
1905,"Divide a problem into smaller subproblems, solve them recursively, and then combine the solutions into a solution for the original problem.","this is shown by the use of .cpp and header files.  by splitting the program up into smaller subsections of individual code, it becomes easier to write and keep up with as opposed to having all of your code in one file",1
1906,"Divide a problem into smaller subproblems, solve them recursively, and then combine the solutions into a solution for the original problem.","When a problem is too big, split it into smaller problems of the same type, and solve those, then from the solutions of the smaller problem, give the solution to the larger original problem.",1
1907,"Divide a problem into smaller subproblems, solve them recursively, and then combine the solutions into a solution for the original problem.",it is the separating of large program into smaller classes then until target is reached.,1
1908,"It splits the original array into two, sorts each of the two halves, and then merges the sorted arrays.","It uses the divide and conqure technique recursively and then when merging back together it compares each element together in a sorted list, this is done by reversing the divide and conquer technique",2
1909,"It splits the original array into two, sorts each of the two halves, and then merges the sorted arrays.",A merge sort works by removing all items to sepperate memory locations and merging them back together in order.,1
1910,"It splits the original array into two, sorts each of the two halves, and then merges the sorted arrays.","It divides the array into two halves, sorts each half, then merges the two halves together.",2
1911,"It splits the original array into two, sorts each of the two halves, and then merges the sorted arrays.","Divide into two sublists and then those sublists break into length 1, then merges the sublists sorted. ",2
1912,"It splits the original array into two, sorts each of the two halves, and then merges the sorted arrays.","Merge sort uses the ""divide and conquer"" idea where it divides the array in half multiple times and then joins each element of the array back into one sorted array. This is one of the best sorting algorithms besides Quicksort.",2
1913,"It splits the original array into two, sorts each of the two halves, and then merges the sorted arrays.",divides the line in half coninuously until you get to only a single value then recombine the values to form a sorted line.,2
1914,"It splits the original array into two, sorts each of the two halves, and then merges the sorted arrays.","Continually split array in half, sort each side of the halves, then put them back together once organized.",2
1915,"It splits the original array into two, sorts each of the two halves, and then merges the sorted arrays.",merge sort splits the array of elements into smaller arrays until the arrays reach size 1 and then the merge sort merges the smaller arrays into arrays of size 2 then it moves to the next step and merges the next arrays.,2
1916,"It splits the original array into two, sorts each of the two halves, and then merges the sorted arrays.",By divide and conquer.,1
1917,"It splits the original array into two, sorts each of the two halves, and then merges the sorted arrays.","Break a single array down into many arrays with individual elements, then sort the elements as you reconstruct them back into a single array.",2
1918,"It splits the original array into two, sorts each of the two halves, and then merges the sorted arrays.","Merge sort breaks the array in half, and continues to do so until it has 2 elements to compare and sorts them, after doing so it ""merges"" back as it keeps on sorting the algorithm as it does so.",2
1919,"It splits the original array into two, sorts each of the two halves, and then merges the sorted arrays.","Merge sort divides the problem in half, organizes each half, then brings the two halves together again.",2
1920,"It splits the original array into two, sorts each of the two halves, and then merges the sorted arrays.","Take an array and split it into two, then solve these simpler problems and merge the two answers in correct order.",2
1921,"It splits the original array into two, sorts each of the two halves, and then merges the sorted arrays.","A merge sort recursively divides the array into half until only one element remains, then it sorts the data on its way out of the recursive call by merging the cells.",2
1922,"It splits the original array into two, sorts each of the two halves, and then merges the sorted arrays.","Merge sort recursively divides an array into two arrays until all arrays have 1 element, at which point it merges the 1 element arrays into larger sorted arrays, the final returned array being the sorted version of the initial array.",2
1923,"It splits the original array into two, sorts each of the two halves, and then merges the sorted arrays.",Merge sort continuously breaks an array in half then sorts the arrays as it concatenates them back together into one sorted array.,2
1924,"It splits the original array into two, sorts each of the two halves, and then merges the sorted arrays.","It takes an array, splits itself in half, sorts the two halves (either by recursion or iteration) and compares them together giving a third array a full sorted list with both halves rejoined. ",2
1925,"It splits the original array into two, sorts each of the two halves, and then merges the sorted arrays.","it splits a large array into small arrays and recurs until the array is a size of 1, and then merges all of the arrays back together until the source array is completely sourted.",2
1926,"It splits the original array into two, sorts each of the two halves, and then merges the sorted arrays.",Mergesort divides the array into smaller halves and then combines the sorted subarrays into one sorted array.,2
1927,"It splits the original array into two, sorts each of the two halves, and then merges the sorted arrays.","merge sort breaks the array down in halves until it is comparing two values, sorts those two values, then merges that back with the other broken down parts that it sorted, each level merging more sets together till you return back to your whole array in order.",2
1928,"It splits the original array into two, sorts each of the two halves, and then merges the sorted arrays.","Divides the data into twor separate arrays, sorts the two arrays and merges them back to back together recursively. ",2
1929,"It splits the original array into two, sorts each of the two halves, and then merges the sorted arrays.","Take the initial array and split it into two, temporary, smaller arrays, sort the two smaller arrays, and merge them back into a single array.",2
1930,"It splits the original array into two, sorts each of the two halves, and then merges the sorted arrays.",merge sort divides the data into halves until data of one element is reached and then merges each element together according to its placement in comparison to the rest of the data,2
1931,"It splits the original array into two, sorts each of the two halves, and then merges the sorted arrays.","merge sort uses the divide and conquer strategy, sorting an array in parts, then merging the sorted parts back together.",2
1932,"It splits the original array into two, sorts each of the two halves, and then merges the sorted arrays.","Divide recursuivly big array into two arrays, sort two array and merge them togather recuruivly.",2
1933,"It splits the original array into two, sorts each of the two halves, and then merges the sorted arrays.","divides an array in half and sorts each half by calling its self, thus dividing each half again and again and sorting it until the array is sorted. then putting the elements back in the original array sorted.",2
1934,"It splits the original array into two, sorts each of the two halves, and then merges the sorted arrays.",Merge sort takes an array and splits it in half and sends each half back to itself recursively and merges and sorts the two halves when it starts going back up.,2
1935,"It splits the original array into two, sorts each of the two halves, and then merges the sorted arrays.","merge sort splits an array into two halves and then sorts the two smaller arrays, and then merges them back together to form a sorted array",2
1936,"It splits the original array into two, sorts each of the two halves, and then merges the sorted arrays.","the merge sort continually divides the array (or set of containers) into halves, until it reaches the point where there is just one element left, then merges each of the sets of two sorted arrays (containers).",2
1937,"It splits the original array into two, sorts each of the two halves, and then merges the sorted arrays.",merge sort splits an array of elements into smaller and smaller array's till the value of 1 is reached.,1
1938,The address of a location in memory.,A variable in memory that hold the address of another memory location to which it points too,2
1939,The address of a location in memory.,A pointer is a variable that contains the memory address of a given value.,1
1940,The address of a location in memory.,A pointer is a variable that stores the address of another variable.,2
1941,The address of a location in memory.,A pointer is a variable that holds a memory address or location of another variable.,2
1942,The address of a location in memory.,A data type that points to an address in memory which contains certain information. Used for pass-by-reference to save memory.,2
1943,The address of a location in memory.,a pointer points to a location in memory of a certain data type,1
1944,The address of a location in memory.,A pointer is a variable that points to the address location of another variable.  Represented by (*).,2
1945,The address of a location in memory.,A pointer is a variable that holds the address of a given variable (and of a given data type),2
1946,The address of a location in memory.,pointer is a programming data type whose value points to another value stored in computer memory by its address.,2
1947,The address of a location in memory.,A data type that points to a specific memory address.,2
1948,The address of a location in memory.,Its like a variable except it only holds the address in memory of the variable not the physical information.,2
1949,The address of a location in memory.,a pointer is a reference to a memory location.,2
1950,The address of a location in memory.,A pointer is an alias to an object in memory.,1
1951,The address of a location in memory.,"A pointer is a variable that contains a memory address for something that you can use, such as a value, array, or even a function.",2
1952,The address of a location in memory.,its a data type with a memory address and a value,1
1953,The address of a location in memory.,a form of storing data that keeps the location in memory of an data type or object.,2
1954,The address of a location in memory.,it contains a object's memory address,2
1955,The address of a location in memory.,variable that contains the memory address of a data object.,2
1956,The address of a location in memory.,A pointer is an element that references a memory location.,2
1957,The address of a location in memory.,"an object that points to a specific place in memory, where a variable or value is stored.",2
1958,The address of a location in memory.,a variable that stores the address of a memory location,2
1959,The address of a location in memory.,"A pointer is a variable that points to an address in memory, which contains some data. The pointer does not contain or point to any data, only a memory address.",2
1960,The address of a location in memory.,Pointer is a variable which have a memory address of a variable.,2
1961,The address of a location in memory.,a pointer points to a location in memory where data is stored,2
1962,The address of a location in memory.,a variable that holds the address of another variable and can access the contents of the variable.,2
1963,The address of a location in memory.,a pointer is a memory address that points to a data member,2
1964,The address of a location in memory.,A data type that stores the memory address of another variable.,2
1965,The address of a location in memory.,its like a variable but only holds an address in meomrry not the physical address.,1
1966,Implement the algorithm and measure the physical running time.,"Try several sets of data on an algorithm that includes worst case, best case, and random cases.  Also try and run the same program on a different computer with the same specs",1
1967,Implement the algorithm and measure the physical running time.,time complexity using big O  logarthmic O(log n) linear O(n) exponential O(n^2) quadratic O(n^k) k&gt;=1 Polynomial O(a^n) n&gt;1,1
1968,Implement the algorithm and measure the physical running time.,Using some sort of counting principle of the number of operations performed in an algorithm.,1
1969,Implement the algorithm and measure the physical running time.,Experimental means you would actually write a prototype of the algorithm and measure the time it takes to run given certain parameters.,2
1970,Implement the algorithm and measure the physical running time.,measuring the relationship of running an algorithm with different input sizes.,1
1971,Implement the algorithm and measure the physical running time.,"Oposite of a theoretical assessment of the algorithm to determine runtime, but to run the code first to determine the the runtime.  This is not recommended because it is a limited test.  It does not include all possibilities of the data, nor the hardware used to process the data.",1
1972,Implement the algorithm and measure the physical running time.,The experimental approach for measuring the running time is by using the Big O equation which tells you the running time.,1
1973,Implement the algorithm and measure the physical running time.,"You create and run  the algorithm multiple times, while measuring the amount of time it takes, you then average the results.",2
1974,Implement the algorithm and measure the physical running time.,keep a value of how many operations it takes and add to this value each time a function is called.,1
1975,Implement the algorithm and measure the physical running time.,BIG-OH,1
1976,Implement the algorithm and measure the physical running time.,Running the program with various input data and measuring the running time with system time.,2
1977,Implement the algorithm and measure the physical running time.,"You run a program with different data sizes, like 10^x.  As you increase x and measure the completion speeds for the program, you can find patterns and attempt the measure the running time.  It's very important to keep the same software and hardware however, which makes experimental testing inferior to theoretical in the eyes of most.",1
1978,Implement the algorithm and measure the physical running time.,to run the program through and see how many times each thing is called and the runtime of each function is based on that.,1
1979,Implement the algorithm and measure the physical running time.,the number of times a specific segments get called per unit work.,1
1980,Implement the algorithm and measure the physical running time.,"For every call into memory, add/ multiply it into an equation of type O(n)",1
1981,Implement the algorithm and measure the physical running time.,"adding a time marker at the before the algorithm is called and another time marker immediately after so that you have the change in time, then you can calculate the efficiency by the speed of the computers cpu.",1
1982,Implement the algorithm and measure the physical running time.,Big O(h) notation,1
1983,Implement the algorithm and measure the physical running time.,the experimental approach measures actual running time in t.  t= seconds.,2
1984,Implement the algorithm and measure the physical running time.,running an algorithm on a specific set of data,1
1985,Implement the algorithm and measure the physical running time.,"In experimental terms, the running time of an algorithm is measured by the number of operations required to complete the function. This number can usually be expressed in big-O notation.",1
1986,Implement the algorithm and measure the physical running time.,"run the code for n-times and get average values, drop the constant and lowest number. for example if             f(x) = 3n +1 the running time will bef  f(x) = O(n)",1
1987,Implement the algorithm and measure the physical running time.,to measure the actual time of the program to run. and calculate the running time using the input and operations done,2
1988,Implement the algorithm and measure the physical running time.,adding up the number of operations performed based on the worst case possible.,1
1989,Implement the algorithm and measure the physical running time.,the experimental approach would be to run through the algorithm and see how long it takes,2
1990,Implement the algorithm and measure the physical running time.,"trying it with different sets of inputs, and measuring the amount of time that the algorithm actually takes.",2
1991,Implement the algorithm and measure the physical running time.,running the input with various inputs measuring the running time with  system time,1
1992,"It selects the minimum from an array and places it on the first position, then it selects the minimum from the rest of the array and places it on the second position, and so forth.","it scans the list and selects the smallest(largest) element and places it in the front, increment the curPtr by one, scan the list again for the next smallest(largest) element and place it in with respect with the other sorted elements.",2
1993,"It selects the minimum from an array and places it on the first position, then it selects the minimum from the rest of the array and places it on the second position, and so forth.","Selection sort searches the array for the lowest value and swaps it with the first value in the array. Then searches for the next lowest value and swaps it with the second item in the array, and so on.",2
1994,"It selects the minimum from an array and places it on the first position, then it selects the minimum from the rest of the array and places it on the second position, and so forth.",Compare the largest element to the front element and swap data according to value if needed.,1
1995,"It selects the minimum from an array and places it on the first position, then it selects the minimum from the rest of the array and places it on the second position, and so forth.","Selection sort is a sorting algorithm that divides a list in half and has two lists. It then compares the first elements in both these lists and puts these elements in another list, having the smaller element before the bigger one.",1
1996,"It selects the minimum from an array and places it on the first position, then it selects the minimum from the rest of the array and places it on the second position, and so forth.","Iterate through the list (assume list of integers), find the smallest one, and put it in a separate ""sorted"" list... then traverse again and find the next smallest, and move it to the sorted section... and repeat until you run out of elements to sort.",1
1997,"It selects the minimum from an array and places it on the first position, then it selects the minimum from the rest of the array and places it on the second position, and so forth.",selection sort selects the smallest element out of the list then the second smallest ....and sorts them acordingly.,2
1998,"It selects the minimum from an array and places it on the first position, then it selects the minimum from the rest of the array and places it on the second position, and so forth.",You select the smallest element and place it on the left.  You select the smallest element and sort it with respect the the item already on the left.  You continue this till the end of the collection of items.,2
1999,"It selects the minimum from an array and places it on the first position, then it selects the minimum from the rest of the array and places it on the second position, and so forth.","A selection sort scrolls through the data structure looking for the lowest (or highest) unsorted piece of data, moves it to the held spot, increments that spot by one, and starts the process over.",2
2000,"It selects the minimum from an array and places it on the first position, then it selects the minimum from the rest of the array and places it on the second position, and so forth.",Selection sort works by finding the smallest element and then compares it with the largest and sorts the elements.,0
2001,"It selects the minimum from an array and places it on the first position, then it selects the minimum from the rest of the array and places it on the second position, and so forth.","Selection sort is usually a recursive sorting method where you divide the elements to be sorted in half repeatedly. You then sort the smallest case, then work your way up, sorting each until they are all sorted.",1
2002,"It selects the minimum from an array and places it on the first position, then it selects the minimum from the rest of the array and places it on the second position, and so forth.","goes to the middle of the list, checks to see if it is greater or less then the value given and moves through the list accordingly to add the value into the proper place.",0
2003,"It selects the minimum from an array and places it on the first position, then it selects the minimum from the rest of the array and places it on the second position, and so forth.",selection sort finds the lowest element in the data set and places it behind the pivot point.,1
2004,"It selects the minimum from an array and places it on the first position, then it selects the minimum from the rest of the array and places it on the second position, and so forth.","Selection sort iterates through the array one element at a time, seeking the least value from the right and replacing the current value with it.",1
2005,"It selects the minimum from an array and places it on the first position, then it selects the minimum from the rest of the array and places it on the second position, and so forth.","Selection sort traverses an unsorted array looking for the smallest value, when it's found it is put at the beginning of the unsorted array.  Performed several times, this will output a sorted array.",2
2006,"It selects the minimum from an array and places it on the first position, then it selects the minimum from the rest of the array and places it on the second position, and so forth.",it runs through the list and finds the smallest (or largest) value and puts it at the appropriate position,1
2007,"It selects the minimum from an array and places it on the first position, then it selects the minimum from the rest of the array and places it on the second position, and so forth.","pick a number, and set all values less than that number to the left, while all numbers on the right of that number is larger.",1
2008,"It selects the minimum from an array and places it on the first position, then it selects the minimum from the rest of the array and places it on the second position, and so forth.",It takes the largest item in the unsorted array and swaps it with last item in the unsorted array.,1
2009,"It selects the minimum from an array and places it on the first position, then it selects the minimum from the rest of the array and places it on the second position, and so forth.","by selecting the first object and comparing it with the next objects to find one that is smaller, if it does it switches the two.  then it comes back the other way and sees if the objects previous to the last one is greater, if it does it switches them.  it does this while decreasing the range it looks at until it finishes in the middle.",1
2010,"It selects the minimum from an array and places it on the first position, then it selects the minimum from the rest of the array and places it on the second position, and so forth.","Selection sorts works by going through a certain list. Goes through the unsorted list and selecting the largest item in the list and placing it in a sorted array. There are two arrays, unsorted and sorted. Complete these steps until the list is sorted.",1
2011,"It selects the minimum from an array and places it on the first position, then it selects the minimum from the rest of the array and places it on the second position, and so forth.","selection sort works by pulling all of the values off to the side, leaving one value in the list.  It will then insert a value into the list.  if the value is bigger it will go to the right, if smaller if will go to the left.",1
2012,"It selects the minimum from an array and places it on the first position, then it selects the minimum from the rest of the array and places it on the second position, and so forth.",selection sort searches for the smallest element of the remaining data organization and places it at the largest point of the new data organization,1
2013,"It selects the minimum from an array and places it on the first position, then it selects the minimum from the rest of the array and places it on the second position, and so forth.","Selection sort sorts an array one element at at time. It first finds the element with the smallest key and puts it into the first location within its array or list, then finds the next smallest and puts it in the second location, and so on.",2
2014,"It selects the minimum from an array and places it on the first position, then it selects the minimum from the rest of the array and places it on the second position, and so forth.","select an element compare it with 2nd element if it is greater, swap it ",1
2015,"It selects the minimum from an array and places it on the first position, then it selects the minimum from the rest of the array and places it on the second position, and so forth.","it selects the smallest element in a list and switches it with the element in its correct position, then it selects the next smallest and does the same...",1
2016,"It selects the minimum from an array and places it on the first position, then it selects the minimum from the rest of the array and places it on the second position, and so forth.",It starts at the first element and replaces it with the smallest element found to the right. It then repeats with the next element in the list.,1
2017,"It selects the minimum from an array and places it on the first position, then it selects the minimum from the rest of the array and places it on the second position, and so forth.","selection sort is when you pick a data member and put it in a new array, then you pick another data member and put it in order with the new array, then pick another and insert it in the correct place in the new array, etc etc",1
2018,"It selects the minimum from an array and places it on the first position, then it selects the minimum from the rest of the array and places it on the second position, and so forth.","it searches through the entire data set for the best element to go in the current position, then it moves up a position and searches through the remainder of the set for the best element for the new position.",1
2019,"It selects the minimum from an array and places it on the first position, then it selects the minimum from the rest of the array and places it on the second position, and so forth.",selection sort  iterates through the array one element @ a time searching for the right and replacing current value with it.,1
2020,"Linked lists are dynamic structures, which allow for a variable number of elements to be stored.",A link list can grow to a infinite size as a array has a fixes size.,2
2021,"Linked lists are dynamic structures, which allow for a variable number of elements to be stored.",The advantage of linked lists is that they are not limited in size like arrays.,2
2022,"Linked lists are dynamic structures, which allow for a variable number of elements to be stored.",link lists dont have a fixed size,2
2023,"Linked lists are dynamic structures, which allow for a variable number of elements to be stored.","Linked Lists can be of variable size, where arrays have fixed size.",2
2024,"Linked lists are dynamic structures, which allow for a variable number of elements to be stored.","Linked lists do not have a definite size. They can be as big or as small as needed, and they don't have to allocate extra memory for elements you don't need. Arrays size must be defined.",2
2025,"Linked lists are dynamic structures, which allow for a variable number of elements to be stored.","a linked list has a dynamic size , but an array only has a fixed size and takes allot of extra operations to increase its size.",2
2026,"Linked lists are dynamic structures, which allow for a variable number of elements to be stored.",You do not have to predetermine your list size as you do with arrays. Linked list have the ability to be as large as you want them adding memory as needed.,2
2027,"Linked lists are dynamic structures, which allow for a variable number of elements to be stored.",The main advantage to a linked list is that it can have it's size adjusted during runtime.,2
2028,"Linked lists are dynamic structures, which allow for a variable number of elements to be stored.",Linked lists are able to grow in size. So elements can be added to the list.,2
2029,"Linked lists are dynamic structures, which allow for a variable number of elements to be stored.","Linked lists are not confined to a specific size, and can have elements added and removed far easier. They are also easier to traverse.",1
2030,"Linked lists are dynamic structures, which allow for a variable number of elements to be stored.",There is no predetermined length,2
2031,"Linked lists are dynamic structures, which allow for a variable number of elements to be stored.","Inserts into a linked list are far cheaper than an insert into an array. With an array, all items after the one being inserted must me shifted, with a linked list, only the pointers are replaced.",1
2032,"Linked lists are dynamic structures, which allow for a variable number of elements to be stored.",Linked lists may be dynamically grown.,2
2033,"Linked lists are dynamic structures, which allow for a variable number of elements to be stored.","Linked lists are very dynamic in that they can change and be added/subtracted to very easily because they are not linear in memory.   Arrays are pre-specified in size to be cast over a certain amount of disk space.  This makes insertion into Arrays difficult because all elements must be shifted, and if you reach the end of the array, you are done even if you have more data to input.  Linked Lists do not run into these problems.",2
2034,"Linked lists are dynamic structures, which allow for a variable number of elements to be stored.","linked lists have an indefinite size, whereas arrays are a specific size.",2
2035,"Linked lists are dynamic structures, which allow for a variable number of elements to be stored.","Linked lists have no predefined length, and thus you can have virtually unlimited items in that list.",2
2036,"Linked lists are dynamic structures, which allow for a variable number of elements to be stored.","They grow dynamically, unlike the fixed size array",2
2037,"Linked lists are dynamic structures, which allow for a variable number of elements to be stored.","you can add as many nodes as you like without having to specify a list size, if an array gets too big you have to copy its entire contents to another larger array to get more room",2
2038,"Linked lists are dynamic structures, which allow for a variable number of elements to be stored.",Linkded list does not have a fixed size. Arrays have a fixed size.,2
2039,"Linked lists are dynamic structures, which allow for a variable number of elements to be stored.","Linked lists have a dynamic size, where as arrays have a static size.",2
2040,"Linked lists are dynamic structures, which allow for a variable number of elements to be stored.",linked lists do not have a memory constraint other than total memory,2
2041,"Linked lists are dynamic structures, which allow for a variable number of elements to be stored.","The primary advantage of linked lists over arrays is their ability to become larger or smaller as data is added and removed from the list, whereas arrays may waste memory for small data sets, and run out of space for large data sets.",2
2042,"Linked lists are dynamic structures, which allow for a variable number of elements to be stored.","Array have fixed size, in Link List are flexible for adding or deleting an element. ",2
2043,"Linked lists are dynamic structures, which allow for a variable number of elements to be stored.",they are resizeable,2
2044,"Linked lists are dynamic structures, which allow for a variable number of elements to be stored.",Linked lists can be dynamically allocated and their size can change as needed.,2
2045,"Linked lists are dynamic structures, which allow for a variable number of elements to be stored.","linked lists do not have to have a specified size, they are easier to add to and remove from",2
2046,"Linked lists are dynamic structures, which allow for a variable number of elements to be stored.","they dont have a fixed size, no shiftnig needs to be done for insertion/deletion.",2
2047,"Linked lists are dynamic structures, which allow for a variable number of elements to be stored.",linked list many be dynamically grown. It has not limit,2
2048,A data structure that stores elements following the first in first out principle. The main operations in a queue are enqueue and dequeue.,A data structure in C++ where the the first element in the queue is the first element taken out of the queue.,2
2049,A data structure that stores elements following the first in first out principle. The main operations in a queue are enqueue and dequeue.,A queue is an abstract data type that performs operations on both ends of the list and exhibits first-in first-out behavior.,2
2050,A data structure that stores elements following the first in first out principle. The main operations in a queue are enqueue and dequeue.,First in first out.,1
2051,A data structure that stores elements following the first in first out principle. The main operations in a queue are enqueue and dequeue.,"A queue is an abstract data type that involves putting an element at the back of the list. Queues use the FIFO, first in first out, idea where the first element in the list is the first that comes out.",2
2052,A data structure that stores elements following the first in first out principle. The main operations in a queue are enqueue and dequeue.,"A data structure that implements first in, first out. The element that has been there the longest is the first to get served.",2
2053,A data structure that stores elements following the first in first out principle. The main operations in a queue are enqueue and dequeue.,a data structure that inserts elements at the end of it and removes elements from the front.,2
2054,A data structure that stores elements following the first in first out principle. The main operations in a queue are enqueue and dequeue.,A queue is a collection of elements with the characteristics of first in first out (FIFO).  The first item in is the first item out.  All additional items are added to the end of the list.,2
2055,A data structure that stores elements following the first in first out principle. The main operations in a queue are enqueue and dequeue.,"A queue is a data structure that inserts data into a FIFO configuration, that is, data input to the structure is always at it's end, and data taken is always from the beginning.",2
2056,A data structure that stores elements following the first in first out principle. The main operations in a queue are enqueue and dequeue.,It is a particular set of entities that are put in to a certain order by the enqueue and the dequeue functions.,1
2057,A data structure that stores elements following the first in first out principle. The main operations in a queue are enqueue and dequeue.,A queue is a data type that operates under a FILO (First In Last Out) method. This means that the first element inserted into the queue is the first element removed.,1
2058,A data structure that stores elements following the first in first out principle. The main operations in a queue are enqueue and dequeue.,like a linked list except it is first in last out,1
2059,A data structure that stores elements following the first in first out principle. The main operations in a queue are enqueue and dequeue.,A queue is like a stack except it follows FIFO (First in first out) .,2
2060,A data structure that stores elements following the first in first out principle. The main operations in a queue are enqueue and dequeue.,A queue is a data structure where the first node in is the first node out.,2
2061,A data structure that stores elements following the first in first out principle. The main operations in a queue are enqueue and dequeue.,A queue is a First in First out data structure much like a line for a movie theatre.  The first object in line is the first object to be handled or enacted upon.,2
2062,A data structure that stores elements following the first in first out principle. The main operations in a queue are enqueue and dequeue.,"its a lot like a stack, except that the first item put into the list is the first item to be taken from the list.",2
2063,A data structure that stores elements following the first in first out principle. The main operations in a queue are enqueue and dequeue.,"a first in first out list of items, like if you put 5, 4, 3, 2, and 1 in the queue it will when you dequeue items remove the items in the same order as put in, so thus it will put out, 5, 4, 3, 2, and 1 in that exact order.",2
2064,A data structure that stores elements following the first in first out principle. The main operations in a queue are enqueue and dequeue.,"A linked list with a First In, Out structure dequeue at the head of the list enqueue at the end of the list",2
2065,A data structure that stores elements following the first in first out principle. The main operations in a queue are enqueue and dequeue.,"a list of objects that follow the rule first in first out, essentially a linked list that goes in order of the first object in the list is the first to be taken off.",2
2066,A data structure that stores elements following the first in first out principle. The main operations in a queue are enqueue and dequeue.,A queue is an abstract data type that is based off of the priniple of first in first out. FIFO. The first item inserted into the list will the first item taken out.,2
2067,A data structure that stores elements following the first in first out principle. The main operations in a queue are enqueue and dequeue.,"It is a ""first in first out"" data structure.  It can be implemented with either a linked list or an array.",2
2068,A data structure that stores elements following the first in first out principle. The main operations in a queue are enqueue and dequeue.,an ordered list that performs task in the order of first in first out. adding items to the queue places items behind the rest of them. taking items off the queue takes the one that has waited the longest.,2
2069,A data structure that stores elements following the first in first out principle. The main operations in a queue are enqueue and dequeue.,"A queue is a linear, first-in first-out data structure. Data must be accessed in the same order it was put into the queue, so only the oldest item in the queue is accessible at any time. Main functions defined are enqueue and dequeue.",2
2070,A data structure that stores elements following the first in first out principle. The main operations in a queue are enqueue and dequeue.,"Queue is a buffer, it follows the rule of First In and First out. Queue is very useful in computer science for scheduleing .",2
2071,A data structure that stores elements following the first in first out principle. The main operations in a queue are enqueue and dequeue.,a queue is a set of elements where the first element inserted is the first element to be removed,2
2072,A data structure that stores elements following the first in first out principle. The main operations in a queue are enqueue and dequeue.,Is a list of items where the the user only has access to the first element and each new element is added at the end.,2
2073,A data structure that stores elements following the first in first out principle. The main operations in a queue are enqueue and dequeue.,"a queue is a list of data that follows the fifo principle, an example of this would be when you get into a line at a movie theater...the first one there gets to buy a ticket first",2
2074,A data structure that stores elements following the first in first out principle. The main operations in a queue are enqueue and dequeue.,"A queue is a data structure that holds a set of objects, which has a FIFO (first in first out) priority.",2
2075,A data structure that stores elements following the first in first out principle. The main operations in a queue are enqueue and dequeue.,like a linked list expect first in last out,0
2076,push and pop,"Pop, which removes the head, or least recently inserted node from the stack. Push, which inserts a new node at the head of the stack.",2
2077,push and pop,Push and pop,2
2078,push and pop,The Push function and the Pop function.,2
2079,push and pop,push - puts an element on the stack pop- takes an element off the stack,2
2080,push and pop,Push  and pop.,2
2081,push and pop,"Push and Pop. Push adds an element to the stack, while Pop removes the top element from a stack.",2
2082,push and pop,"push,pop,search,isEmpty",1
2083,push and pop,"Push, Pop, isEmpty, isFull  Maybe List to show all elements or an operation to count how many elements in the stack.",1
2084,push and pop,"pop, push",2
2085,push and pop,"isempty, push and pop, along with usually, ",2
2086,push and pop,push and pop. push puts objects into the stack and pop takes them out following the first in last out rule.,2
2087,push and pop,"The main operations in a stack are push and pop. Push adds an item to the top of the stack, pop removes the top item from the stack.",2
2088,push and pop,"push, which adds an item to the top of the stack, and pop, which takes the first item off the top to the stack",2
2089,push and pop,"the main functions defined for a stack are push, which puts an element on the top of the stack, and pop, which removes an item from the top.",2
2090,push and pop,Push() Pop() Full() IsEmpty(),1
2091,push and pop,pop and push to remove an element and to insert an element,2
2092,push and pop,"Push, Pop",2
2093,push and pop,push - Add an element to the top of the stack pop - remove the top element from the stack,2
2094,"A walk around the tree, starting with the root, where each node is seen three times: from the left, from below, from the right.",When you traverse a tree of any size you will visit each node three times.  Its on the order of 3n or O(n) running time.,1
2095,"A walk around the tree, starting with the root, where each node is seen three times: from the left, from below, from the right.","The Euler tour traversal of a tree begins at the root and visits each node in the tree from the left, then bottom, then right sides.",2
2096,"A walk around the tree, starting with the root, where each node is seen three times: from the left, from below, from the right.",Where you visit the in order according to its data value.,1
2097,"A walk around the tree, starting with the root, where each node is seen three times: from the left, from below, from the right.","It is a tree that shows how it functions. It contains parents, children, siblings, ancestors and descendents. The use of tree type algorithm is also an alternative sorting algorithm. ",0
2098,"A walk around the tree, starting with the root, where each node is seen three times: from the left, from below, from the right.","Start from the root, circle around the _whole_ ""tree"", naming each node as you see it.",1
2099,"A walk around the tree, starting with the root, where each node is seen three times: from the left, from below, from the right.",it is where you visit the parent then you vistit the children,0
2100,"A walk around the tree, starting with the root, where each node is seen three times: from the left, from below, from the right.","To start from the root , traveling left and visiting ever child along the way till you return to the root from the right.",1
2101,"A walk around the tree, starting with the root, where each node is seen three times: from the left, from below, from the right.","Traversing a tree down to it's terminal child and then all of it's siblings, then it traverses up the terminal child's parent and all of it's siblings (repeating the first step if those siblings have children) until the root node has been visited.",1
2102,"A walk around the tree, starting with the root, where each node is seen three times: from the left, from below, from the right.",The Euler tour traversal of a tree the function that iteratively keeps track of the pointer on each node.,1
2103,"A walk around the tree, starting with the root, where each node is seen three times: from the left, from below, from the right.","You travel the outside edge of the tree, clockwise, while naming each node.",1
2104,"A walk around the tree, starting with the root, where each node is seen three times: from the left, from below, from the right.",children to root,0
2105,"A walk around the tree, starting with the root, where each node is seen three times: from the left, from below, from the right.",go to the bottom of the left sub tree and visit the parent and then its children,1
2106,"A walk around the tree, starting with the root, where each node is seen three times: from the left, from below, from the right.",The Euler tour traverses through the tree in a rubber-band style shape.,1
2107,"A walk around the tree, starting with the root, where each node is seen three times: from the left, from below, from the right.","The Euler tour traversal of a tree is a specific way of navigating a tree that involves following the tree starting at the very top and moving along the left side of the tree first, cupping in to visit the parents of children nodes.  It allows for each node to be visited from the left, the right and the bottom.  The Euler tour first progresses to a left child if there is one, then progresses to it's parent, then it's next child, then it's parent's parent.",1
2108,"A walk around the tree, starting with the root, where each node is seen three times: from the left, from below, from the right.",it runs through the parents and the children in order,1
2109,"A walk around the tree, starting with the root, where each node is seen three times: from the left, from below, from the right.","it starts node on the left of the root and then proceeds to visits each node in a left to right order, visits the root, and then proceeds to repeat the previous step on the right side of the tree.",1
2110,"A walk around the tree, starting with the root, where each node is seen three times: from the left, from below, from the right.","Travel from the root to the farthest left child Backup, travel the leftmost children in the right side repeat until reaching the rightmost child.",1
2111,"A walk around the tree, starting with the root, where each node is seen three times: from the left, from below, from the right.","has preorder, in order, and postorder of a tree.  preorder = puts the parent node in front of the child node(s).  in order = puts the parent node between the left child and right child node(s).  postorder = puts the parent node after the child node(s).",1
2112,"A walk around the tree, starting with the root, where each node is seen three times: from the left, from below, from the right.","The Euler traveral is when you go through a tree looking for nodes to put in the order of left, root, right. Like inOrder traversal. ",1
2113,"A walk around the tree, starting with the root, where each node is seen three times: from the left, from below, from the right.","An Euler traversal is a traversal that begins with the root, and travels around the outside of the tree.  Each element in the tree is visited 3 times.  From the left, from the bottom and from the right.",2
2114,"A walk around the tree, starting with the root, where each node is seen three times: from the left, from below, from the right.",Euler tour traversal of a tree traverses down each branch straight to one leaf then starts again at the root and repeats until all elements have been traversed.,1
2115,"A walk around the tree, starting with the root, where each node is seen three times: from the left, from below, from the right.","The Euler tour visits every node in a tree, starting with the root and working around the tree counterclockwise. in-order, post-order, and pre-order traversals can be seen as variations of the Euler tour traversal.",1
2116,"A walk around the tree, starting with the root, where each node is seen three times: from the left, from below, from the right.",to traverse going down to the left then go to the right of last children and back to the top.. kind of like going around the tree,1
2117,"A walk around the tree, starting with the root, where each node is seen three times: from the left, from below, from the right.","You recursively visit every node on the list. You visit the node from the left, the bottom, and from the right.",2
2118,"A walk around the tree, starting with the root, where each node is seen three times: from the left, from below, from the right.","the euler tour is a way to traverse a tree where you come into contact with each node three times, from the left, from the right, and from the bottom",2
2119,"A walk around the tree, starting with the root, where each node is seen three times: from the left, from below, from the right.",traversing a tree level by level,0
2120,"A walk around the tree, starting with the root, where each node is seen three times: from the left, from below, from the right.",The Euler traversal through the tree in a rubber band style shape.,1
2121,"Find the node, then replace it with the leftmost node from its right subtree (or the rightmost node from its left subtree).","if root, set root to NULL else if deleting right leaf, set rightPtr of parent node to NULL else if deleting left leaf, set leftPtr of parent node to NULL else if deleting a left or right subtree child node, set the max leaf child in the left subtree as the new child node.",1
2122,"Find the node, then replace it with the leftmost node from its right subtree (or the rightmost node from its left subtree).","Traverse the tree and find the node, if the node has no children, simply delete it; otherwise set the node's data equal to the data of one of its children then set the pointer for that child to NULL.",1
2123,"Find the node, then replace it with the leftmost node from its right subtree (or the rightmost node from its left subtree).",first attaching the elements from the node to be deleting to alternate nodes and then deleting that node.    delete node;,1
2124,"Find the node, then replace it with the leftmost node from its right subtree (or the rightmost node from its left subtree).","If you delete a node from a tree, you have to link that nodes parents to the children of that node.",1
2125,"Find the node, then replace it with the leftmost node from its right subtree (or the rightmost node from its left subtree).","Must delete the information that the node contains (to free up memory/ ""garbage collect"") and also delete the pointer (in that node's ""parent"") that points to the node you wish to delete.",0
2126,"Find the node, then replace it with the leftmost node from its right subtree (or the rightmost node from its left subtree).",you replace the node with the largest element of its left subtree or replace it with the smallest element of the right subtree.,2
2127,"Find the node, then replace it with the leftmost node from its right subtree (or the rightmost node from its left subtree).","You traverse the tree till you find the node you are wanting to delete.  If the node has no children you delete it.  If the node has children, before you delete, you find the left-most of its children and attach it to the root then you can delete the node.",1
2128,"Find the node, then replace it with the leftmost node from its right subtree (or the rightmost node from its left subtree).",Link the to-be-deleted's left child to the to-be-deleted's parent's left child pointer.,1
2129,"Find the node, then replace it with the leftmost node from its right subtree (or the rightmost node from its left subtree).",The way you delete a node from a binary search tree is first you have take the root and then see the nodes that are coming from the root. And delete the nodes and set the root to NULL.,0
2130,"Find the node, then replace it with the leftmost node from its right subtree (or the rightmost node from its left subtree).",You remove the element from the tree and move the next highest element from the left into its place.,1
2131,"Find the node, then replace it with the leftmost node from its right subtree (or the rightmost node from its left subtree).",delete node;,0
2132,"Find the node, then replace it with the leftmost node from its right subtree (or the rightmost node from its left subtree).","the deletion of a node depends upon if it has children and if it is an AVL binary search tree. Assuming it is not an AVL tree, and the node being deleted has no children, you just set its pointer to null. If it has a left child or a right child exclusively, that child replaces the deleted node, if it has two children, the left most child of the right sub tree (or right most child of the left subtree)will replace it",2
2133,"Find the node, then replace it with the leftmost node from its right subtree (or the rightmost node from its left subtree).","If the node is a leaf, just set it's parent's pointer to null and delete it, if it has a single child, set the parent's pointer to the child and delete; if it has two children, set the node to one of the middle children and remove that child from its previous position as a leaf (rightmost child of the left subtree or leftmost child of the right subtree).",2
2134,"Find the node, then replace it with the leftmost node from its right subtree (or the rightmost node from its left subtree).","In a binary search tree, you must first establish a proper replacement for the node you are about to delete, usually a child from the soon to be deleted node.  Once that replacement node has been found, you simply reassign it to where the node that is going to be deleted is.  After the deleted node has been usurped, you remove the deleted node from memory so it may be used again. ",1
2135,"Find the node, then replace it with the leftmost node from its right subtree (or the rightmost node from its left subtree).",It all depends on where the node is located. If its a child it can just be deleted but for a node inside the tree it must be replaced with another node that works in its place.,1
2136,"Find the node, then replace it with the leftmost node from its right subtree (or the rightmost node from its left subtree).","if the node has no children, delete it right away, otherwise, put either the furthest right node on the left side or the furthest left node on the right side in that place and perform a the above on that node to guarantee that it's children get handled properly.",2
2137,"Find the node, then replace it with the leftmost node from its right subtree (or the rightmost node from its left subtree).",Create a temp Node  Set temp's values to the Node after head  or NULL in the case of only head Node in the list.   Set head equal to temp. Delete temp,0
2138,"Find the node, then replace it with the leftmost node from its right subtree (or the rightmost node from its left subtree).","by searching down the tree until you find the node, and replacing the link to that node with the greatest child node on the left subtree or the least child node on the right subtree.",1
2139,"Find the node, then replace it with the leftmost node from its right subtree (or the rightmost node from its left subtree).","Set the nodes to NULL, where that it doesn't point to anything, and the use the DELETE opertator to clear space from memory.",0
2140,"Find the node, then replace it with the leftmost node from its right subtree (or the rightmost node from its left subtree).","You must first traverse the tree to find the appropriate value.  Then you must make sure that the node is a leaf node.  If it is, then you can delete the pointer to that specific node.",1
2141,"Find the node, then replace it with the leftmost node from its right subtree (or the rightmost node from its left subtree).","if the node is a leaf, you set it's parent's pointer to null. if the node is in the tree you must replace the node with one in the tree: either the largest in the left of the tree or the smallest in the right of the tree. this can be done recursively if needed.",2
2142,"Find the node, then replace it with the leftmost node from its right subtree (or the rightmost node from its left subtree).","if the node is a leaf it can simply be deallocated/deleted from memory, and its parent's reference to it changed to NULL. If the node has a single child, the pointer to it should be made to point to its child before deleting the node. Should the node have two children, the easiest solution may be to copy the node's entire subtree to a new array or tree, delete the node and all descendants, then add the elements taken from the subtree back into the main tree.",1
2143,"Find the node, then replace it with the leftmost node from its right subtree (or the rightmost node from its left subtree).",you cannot delete a node because that can cause a node to have more than 2 children,0
2144,"Find the node, then replace it with the leftmost node from its right subtree (or the rightmost node from its left subtree).","You search the tree for the node using recursion. When you find the node, you determine whether it is a leaf or a internal node. If it is a leaf, you just delete it and set the parent pointer to that node to NULL. If it is a  node, you replace the node with either of the children nodes.",1
2145,"Find the node, then replace it with the leftmost node from its right subtree (or the rightmost node from its left subtree).","to delete the node, you would have to link the children nodes that are connected to the node to be deleted to the remaining nodes of the tree in such a way that nodes on the right of the parent node are larger than the parent and nodes on the left of the parent node are smaller",1
2146,"Find the node, then replace it with the leftmost node from its right subtree (or the rightmost node from its left subtree).","if it has no children, you just delete it. if it only has one child, just replace the node with whichever child it has. if it has both children, replace it with one of its children, and send the other child down along the other side of the new node.",1
2147,"Find the node, then replace it with the leftmost node from its right subtree (or the rightmost node from its left subtree).",pointer to the child and delete it has 2 children set the node to the child and delete it. the node to th middle will then take its place,1
2148,The height of the tree.,Log(n) where n is the number of nodes.,1
2149,The height of the tree.,log(n) steps,1
2150,The height of the tree.,The number of levels and the height of the tree,2
2151,The height of the tree.,It is the same as the height of the tree.,2
2152,The height of the tree.,"Given n elements, it would take n/2 steps to find the search criteria.",0
2153,The height of the tree.,log n,1
2154,The height of the tree.,Depends on the location of the node you are looking for. If it is the root it is one step.  else If it is smaller than the current you are on node you go to the left.  If it is larger than the current node you are on go to the right.,0
2155,The height of the tree.,2^n where n is the # of levels the binary tree has,0
2156,The height of the tree.,The number of steps to search a node is the function n-1.,1
2157,The height of the tree.,"It would take n/2 elements, given n.",0
2158,The height of the tree.,O( Log (n) ),1
2159,The height of the tree.,"If the binary search tree is constructed efficiently, best case scenario is O(log n) time.  Where n is the number of items in the tree.  If the binary search tree is constructed poorly, with for instance the root of the tree being 1, and progressing downwards and to the right its children are each more than the last: you have a one-way linear linked list.  That worse case scenario would be a full traversal at O(n) time. Where n is the number of items in the tree.",2
2160,The height of the tree.,"N, n being the number of nodes.",1
2161,The height of the tree.,"depending on the way that the tree is ordered, it could be anywhere between log(n) and N steps.",2
2162,The height of the tree.,"worst case scenario = the number of levels of the tree, ie: the node at the farthest position from the root node.  best case = 1 step if its the root node.",2
2163,The height of the tree.,3 steps at most.  There are 3 cases.,0
2164,The height of the tree.,log(n)    where n equals the total number of nodes in the tree.,1
2165,The height of the tree.,the same number of steps as the number of levels or generations in the tree,2
2166,The height of the tree.,to find a node in a binary search tree takes at most the same number of steps as there are levels of the tree.,2
2167,The height of the tree.,"three steps visit the root node, then go to right subtree, after visiting right subtree visit left subtree",1
2168,The height of the tree.,( n(n-1) ) / 2,0
2169,The height of the tree.,2n-1,1
2170,The height of the tree.,"it takes at most h steps, where h is the height of the tree.",2
2171,The height of the tree.,it depends on the install search tree then from there for whatever the case is the it repeats it back along the case of the primary node,0
2172,To simulate the behaviour of portions of the desired software product,High risk problems are address in the prototype program to make sure that the program is feasible A prototype may also be used to show a company that the software can be possibly programmed,1
2173,To simulate the behaviour of portions of the desired software product,A prototype program simulates the behaviors of portions of the desired software product to allow for error checking,1
2174,To simulate the behaviour of portions of the desired software product,It is used to let the users have a first idea of the completed program and allow the clients to evaluate the program This can generate much feedback including software specifications and project estimations of the total project,1
2175,To simulate the behaviour of portions of the desired software product,To address major issues in the creation of the program There is no way to account for all possible bugs in the program but it is possible to prove the program is tangible,1
2176,To simulate the behaviour of portions of the desired software product,To provide an example or model of how the finished program should perfom Provides forsight of some of the challanges that would be encountered Provides opportunity To introduce changes To the finished program,1
2177,To simulate the behaviour of portions of the desired software product,To lay out the basics and give you a starting point in the actual problem solving,1
2178,To simulate the behaviour of portions of the desired software product,A prototype program provides a basic groundwork from which to further enhance and improve a solution to a problem,1
2179,To simulate the behaviour of portions of the desired software product,A prototype program is a part of the Specification phase of Software Problem Solvin It is employed to illustrate how the key problem or problems will be solved in a program and sometimes serves as a base program to expand upon,1
2180,To simulate the behaviour of portions of the desired software product,it provides a limited proof of concept to verify with the client before actually programming the whole application,1
2181,To simulate the behaviour of portions of the desired software product,It tests the main function of the program while leaving out the finer details,1
2182,To simulate the behaviour of portions of the desired software product,To get early feedback from users in early stages of development To show users a first idea of what the program will do or look like To make sure the program will meet requirements before intense programming begins,1
2183,To simulate the behaviour of portions of the desired software product,A prototype program is used in problem solving to collect data for the problem,0
2184,To simulate the behaviour of portions of the desired software product,The role of a prototype program is to help spot key problems that may arise during the actual programing,1
2185,To simulate the behaviour of portions of the desired software product,the prototype program gives a general idea of what the end product will do without the time and effort to write out the entire program,1
2186,To simulate the behaviour of portions of the desired software product,Prototype programming is an approach to programming that enables one to take an organized approach to developing an effective program with minimal errors and a strategic pattern when solving a problem i e book gave an example of a costumer withdrawing money from a bank the approach that was taking on a pseudo code level during the OOA or Design lvl before proceeding into creating a solution,1
2187,To simulate portions of the desired final product with a quick and easy program that does a small specific job It is a way to help see what the problem is and how you may solve it in the final project,To simulate portions of the desired final product with a quick and easy program that does a small specific job It is a way to help see what the problem is and how you may solve it in the final project,2
2188,To simulate portions of the desired final product with a quick and easy program that does a small specific job It is a way to help see what the problem is and how you may solve it in the final project,Defined in the Specification phase a prototype stimulates the behavior of portions of the desired software product Meaning the role of a prototype is a temporary solution until the program itself is refined to be used extensively in problem solving,2
2189,To simulate portions of the desired final product with a quick and easy program that does a small specific job It is a way to help see what the problem is and how you may solve it in the final project,Simulating the behavior of only a portion of the desired software product,2
2190,To simulate portions of the desired final product with a quick and easy program that does a small specific job It is a way to help see what the problem is and how you may solve it in the final project,A program that stimulates the behavior of portions of the desired software product,2
2191,To simulate portions of the desired final product with a quick and easy program that does a small specific job It is a way to help see what the problem is and how you may solve it in the final project,A program that simulates the behavior of portions of the desired software product,2
2192,To simulate portions of the desired final product with a quick and easy program that does a small specific job It is a way to help see what the problem is and how you may solve it in the final project,It simulates the behavior of portions of the desired software product,2
2193,The testing stage can influence both the coding stage phase 5 and the solution refinement stage phase 7,Refining and possibly the design if the testing phase reveals problems in the design Production can be affected if the program is unworkable in its current form which will lead to a later production time than originally estimated Also affects coding because after testing you may need to rewrite the code for the program to remove errors,1
2194,The testing stage can influence both the coding stage phase 5 and the solution refinement stage phase 7,Verification coding refining the solution and maintenance are all influenced by the testing stage,1
2195,The testing stage can influence both the coding stage phase 5 and the solution refinement stage phase 7,In RUP the stages in the software life cycle are influenced by the testing stage is : Elaboration phase refined progject vision iterative devilopment of core system development of system requirements more accurate time and cost estimates Construction phase iterative development of remaining system Transition phase testing and deployment of the system,1
2196,The testing stage can influence both the coding stage phase 5 and the solution refinement stage phase 7,Refining the solution Production and Maintenance are all influenced by the Testing stage,1
2197,The testing stage can influence both the coding stage phase 5 and the solution refinement stage phase 7,Elaboration Construction and Transition are all affected by testing,1
2198,The testing stage can influence both the coding stage phase 5 and the solution refinement stage phase 7,Refining Production Maintenance,1
2199,The testing stage can influence both the coding stage phase 5 and the solution refinement stage phase 7,Verification Debugging,1
2200,The testing stage can influence both the coding stage phase 5 and the solution refinement stage phase 7,The second half of the Elaboration phase Construction phase and the Transition phase,1
2201,The testing stage can influence both the coding stage phase 5 and the solution refinement stage phase 7,The refining step the production step and the maintenance stage,1
2202,The testing stage can influence both the coding stage phase 5 and the solution refinement stage phase 7,Elaboration Construction Transition,1
2203,The testing stage can influence both the coding stage phase 5 and the solution refinement stage phase 7,Refining,1
2204,The testing stage can influence both the coding stage phase 5 and the solution refinement stage phase 7,The testing stage has a direct influence on the final version of a program being as it is the debugging and finalization of a software revision,0
2205,The testing stage can influence both the coding stage phase 5 and the solution refinement stage phase 7,Testing refining production and maintenance,1
2206,The testing stage can influence both the coding stage phase 5 and the solution refinement stage phase 7,Depending on how the work is done Testing is spread throughout the process as to prevent errors from showing up later on due to lack of foresight,0
2207,The testing stage can influence both the coding stage phase 5 and the solution refinement stage phase 7,Elaboration construction and transition,1
2208,The testing stage can influence both the coding stage phase 5 and the solution refinement stage phase 7,All stages are influenced except setting the program requirements If a test fails it can change the whole design implementation etc of a program as well as the final outcome,0
2209,The testing stage can influence both the coding stage phase 5 and the solution refinement stage phase 7,Refining production and maintenance,1
2210,The testing stage can influence both the coding stage phase 5 and the solution refinement stage phase 7,refining production maintenance,1
2211,The testing stage can influence both the coding stage phase 5 and the solution refinement stage phase 7,Removing logical errors testing for valid data random data and actual data,0
2212,The testing stage can influence both the coding stage phase 5 and the solution refinement stage phase 7,1 specification 2 design 3 risk analysis 4 verification 5 coding 6 testing 7 refining 8 production 9 maintenance,1
2213,The testing stage can influence both the coding stage phase 5 and the solution refinement stage phase 7,Refining stage Production stage and Maintenance stage,1
2214,The testing stage can influence both the coding stage phase 5 and the solution refinement stage phase 7,Testing could affect all parts of the life cycle; it could make you go back to specification if it does not test well,1
2215,The testing stage can influence both the coding stage phase 5 and the solution refinement stage phase 7,The Individual components and steps such as analysis design and implementing code as well as the entire system are tested for execution of the requirements identified during the analysis stage i e Main output,0
2216,Refining and Coding,Directly : Refining coding Because Refining is right before the Testing Phase and Coding is right after the Testing Phase Indirectly : Production Maintenance Because Refining occurs before these last two stages in the Software Life Cycle,2
2217,Abstraction and reusability,Modularability the ability to reuse parts of the program later in another program sometimes with completely different goals for the program Also it makes it easier to debug code by dividing up the code into classes that each do a specific job and when the program fails at one job you only have one class to debug Good for security purposes because it allows you to let someone use a program which sorts lists without having to give them access to the source code ALso allows you to use inheritance and polymorphism,1
2218,Abstraction and reusability,The main advantages to object oriented programming are that existing classes can be reused and program maintenance and verification are easier,1
2219,Abstraction and reusability,The advantages is that OOP allows us to build classes of objects Three principles that make up OOP are : Encapsulation Objects combine data and operations Inheritance Classes can inherit properties from other classes Polymorphism Objects can determine appropriate operations at execution time,1
2220,Abstraction and reusability,Some advantages are existing classes can be reused and program maintenance and verification are easier to accomplish,1
2221,Abstraction and reusability,Object oriented programming allows programmers to use an object with classes that can be changed and manipulated while not affecting the entire object at once The classes all hold attrubutes that affect the object,0
2222,Abstraction and reusability,Reusable components Extensibility Maintainability it reduces large problems into smaller more manageable problems,1
2223,Abstraction and reusability,Encapsulation objects combine data and operations Inheritance classes can inherit properties from other classes Polymorphism Objects can determine appropriate operations at execution time,1
2224,Abstraction and reusability,Easier to debugg Reusability,1
2225,Abstraction and reusability,Re usability and ease of maintenance,1
2226,Abstraction and reusability,Existing classes can be reused and program maintenance and verification are easier,1
2227,Abstraction and reusability,Data encapsulation concept the use of functions or methods to manipulate data,1
2228,Abstraction and reusability,Modular reusable code allowing faster deployment of solutions and a more general view of a solution,1
2229,Abstraction and reusability,Variables can remain private The code is easily modified and reusable as well as easily implemented Not to mention easier to read and follow along as an observer,1
2230,Abstraction and reusability,Data Abstraction and control it is possible to isolate elements from other elements a lot easier and prevent tampering of data,1
2231,Abstraction and reusability,Encapsulation Objects use operations without knowing how the operation works Inheritance cuts redundancy by reusing earlier classes Polymorphism objects select the correct operation to use in the situation,1
2232,Abstraction and reusability,They make it easier to reuse and adapt previously written code and they separate complex programs into smaller easier to understand classes,1
2233,Abstraction and reusability,Existing classes can be reused Program maintenance and verification are easier,1
2234,Abstraction and reusability,Existing classes can be feused Program maintenance and verification are easier,1
2235,Abstraction and reusability,1 Existing classes can be reused 2 Program maintenance and verification are easier,1
2236,Abstraction and reusability,Information can be hidden It is easier to debug Programming is easier and more manageable,1
2237,Abstraction and reusability,Existing classes can be reused program maintenance and verification are easier,1
2238,Abstraction and reusability,Well for one encapsulation the values of the variables inside an object are private unless methods are written to pass info outside of the object As well as Inheritance where each subclass inherits all variables and methods of its super class Example in the book included obj clock and how obj alarm would still use clock from the first class,1
2239,This type of programming is more flexible making it easier to add and modify the program It is also a type of a fail safe program you check each individual module This eliminates redundant code and makes the program easier to read for other programmers When debugging the program it is easier to track down the source of a problem within a module rather than a 2 million line program,This type of programming is more flexible making it easier to add and modify the program It is also a type of a fail safe program you check each individual module This eliminates redundant code and makes the program easier to read for other programmers When debugging the program it is easier to track down the source of a problem within a module rather than a 2 million line program,2
2240,This type of programming is more flexible making it easier to add and modify the program It is also a type of a fail safe program you check each individual module This eliminates redundant code and makes the program easier to read for other programmers When debugging the program it is easier to track down the source of a problem within a module rather than a 2 million line program,One of the main advantages is you can hide inner details a technique known by encapsulation Objects combine the data and operations but you cannot see how it works Another advantage is you can reuse classes that have been defined earlier in the program a method known as inheritance Finally another advantage is objects can determine appropriate operations at execution time a technique known as polymorphism,2
2241,This type of programming is more flexible making it easier to add and modify the program It is also a type of a fail safe program you check each individual module This eliminates redundant code and makes the program easier to read for other programmers When debugging the program it is easier to track down the source of a problem within a module rather than a 2 million line program,Coding and Debugging programs are usually easier as either the compiler will specify the object that is working incorrectly or the function an object was assigned to will be easier to identify The code itself also looks more organized and is easier to read and will help to avoid redundant coding Post programming maintenance is also easier Also modules can be reused several times in other programs without too much hassle Abstraction is the art of breaking down one big problem into smaller simpler problems and solving them Many of the smaller problems are shared between unique complex problems and creating modules to these solve these smaller repeated problems can save time when you encounter them again,2
2242,This type of programming is more flexible making it easier to add and modify the program It is also a type of a fail safe program you check each individual module This eliminates redundant code and makes the program easier to read for other programmers When debugging the program it is easier to track down the source of a problem within a module rather than a 2 million line program,the main advantages to object oriented programming is data abstraction easier maintenance and re usability,2
2243,At function int main,At function int main,2
2244,At function int main,the Function main,2
2245,At function int main,c plus plus programs begin to execute in the main method,2
2246,At function int main,A C plus plus program will begin to execute at the main function,2
2247,At function int main,They begin in the main function,2
2248,At function int main,Int main,2
2249,At function int main,At the MAIN function,2
2250,At function int main,They begin to execute at the funcion main,2
2251,At function int main,The main method,2
2252,At function int main,In the main function,2
2253,At function int main,C plus plus programs begin execution at main,2
2254,At function int main,In the Main function,2
2255,At function int main,At the main function,2
2256,At function int main,The main function,2
2257,At function int main,After loading the required include statements and libraries the main method begins the execution,2
2258,At function int main,C plus plus programs begin execution at the main function,2
2259,At function int main,at the main function int main,2
2260,At function int main,in the main function,2
2261,A location in memory that can store a value,Variable can be a integer or a string in a program,1
2262,A location in memory that can store a value,In programming a structure that holds data and is uniquely named by the programmer It holds the data assigned to it until a new value is assigned or the program is finished,1
2263,A location in memory that can store a value,It is a sybol or name for a value or number Example : a used number can stand for any given number and the programmer can refer to that number by using the variable name,1
2264,A location in memory that can store a value,An identifier that holds a location in memory,1
2265,A location in memory that can store a value,a value or word that can assume any of a set of values,1
2266,A location in memory that can store a value,A pointer to a location in memory,1
2267,A location in memory that can store a value,a symbol that stands in for a value that may or may not change depending on the program,1
2268,A location in memory that can store a value,a placeholder to hold information used in the program for example : int can hold : 1 2 3 4 68 72 256 etc float can hold : 1 54 55 55 1 24 5 657 8 8123 et char can hold : A B C D E F ! 4 5 6 P etc,1
2269,A location in memory that can store a value,A way to store different values into the program such as numbers words letters etc,1
2270,A location in memory that can store a value,a variable is an object where data is stored,1
2271,A variable is a location in memory where a value can be stored,A variable is a location in memory where a value can be stored,2
2272,A variable is a location in memory where a value can be stored,Variable is a location in the computer memory in which a value can be stored and later can retrieve that value,2
2273,A variable is a location in memory where a value can be stored,A variable is a location in the computer memory where a value can be stored for use by a program Each variable has a name a value a type and a size,2
2274,A variable is a location in memory where a value can be stored,It is a location in the computer memory where it can be stored for use by a program,2
2275,A variable is a location in memory where a value can be stored,A location in memory where value can be stored,2
2276,A variable is a location in memory where a value can be stored,A variable is the memory address for a specific type of stored data or from a mathematical perspective a symbol representing a fixed definition with changing values,2
2277,A variable is a location in memory where a value can be stored,A variable is a value that is subject to change in a computer memory that can be used by programs Programs can change the value of the variable and recall it later or act on it directly,2
2278,A variable is a location in memory where a value can be stored,Location in memory where a value can be stored,2
2279,A variable is a location in memory where a value can be stored,A variable is the location in a computer memory where a value can be stored for use by a program,2
2280,A variable is a location in memory where a value can be stored,A variable is a location in a computers memory where a value can be stored for use by a program,2
2281,A variable is a location in memory where a value can be stored,Is a method or identifier I would say we use to bind a data object to memory location; which is then stored in a location that can be accessed when and manipulated later when the variable name is called,2
2282,Variables can be declared anywhere in a program They can be declared inside a function local variables or outside the functions global variables,They can be declared right before they are used but it is a good practice to declare them at the beginning of the program and label what they are food,1
2283,Variables can be declared anywhere in a program They can be declared inside a function local variables or outside the functions global variables,In the Function main before using the variable,1
2284,Variables can be declared anywhere in a program They can be declared inside a function local variables or outside the functions global variables,Variables are declared where ever it is defined either inside a block locally or outside a block globally,1
2285,Variables can be declared anywhere in a program They can be declared inside a function local variables or outside the functions global variables,Variables are declared before they are actually used They can be declared before main to use globally,1
2286,Variables can be declared anywhere in a program They can be declared inside a function local variables or outside the functions global variables,For good programing practice they should be declared before main but should at least be declared before they are used,1
2287,Variables can be declared anywhere in a program They can be declared inside a function local variables or outside the functions global variables,Any where in the main function,1
2288,Variables can be declared anywhere in a program They can be declared inside a function local variables or outside the functions global variables,Globally for an entire program and locally for individual functions including FOR statements,1
2289,Variables can be declared anywhere in a program They can be declared inside a function local variables or outside the functions global variables,They are usually declared at the beginning before they can be used in the program They always contain a name and a data type,1
2290,Variables can be declared anywhere in a program They can be declared inside a function local variables or outside the functions global variables,Inside the method,1
2291,Variables can be declared anywhere in a program They can be declared inside a function local variables or outside the functions global variables,Variables are usually declared at the beginning of a module of C plus plus code,1
2292,Variables can be declared anywhere in a program They can be declared inside a function local variables or outside the functions global variables,In the main function usually at the top of code They can be declared almost anywhere but must be declared before the code can use or act upon them,1
2293,Variables can be declared anywhere in a program They can be declared inside a function local variables or outside the functions global variables,in the very beginning of the program Before the main starts,1
2294,Variables can be declared anywhere in a program They can be declared inside a function local variables or outside the functions global variables,In the declaration of Functions for statements and while statements in the body of If For while do while statements in namespaces headers etc almost anywhere anywhere in the program as long as it is on it is own line,1
2295,Variables can be declared anywhere in a program They can be declared inside a function local variables or outside the functions global variables,After declaration of the variable data type,0
2296,Variables can be declared anywhere in a program They can be declared inside a function local variables or outside the functions global variables,anywhere in the code can be at the top or in the middle of the code or anywhere,1
2297,Variables can be declared anywhere in a program They can be declared inside a function local variables or outside the functions global variables,Before they are used,1
2298,Variables can be declared anywhere in a program They can be declared inside a function local variables or outside the functions global variables,variables can be declared in classes and methods,1
2299,Variables can be declared anywhere in a program They can be declared inside a function local variables or outside the functions global variables,Variables are usually declared at the very beginning of a C plus plus program but can be declared any in the program as long as they appear before they are called upon,1
2300,Variables can be declared anywhere in a program They can be declared inside a function local variables or outside the functions global variables,Variables are declared in the main function before any operation is attempted with the variables,1
2301,Variables can be declared anywhere in a program They can be declared inside a function local variables or outside the functions global variables,anywhere but where you declare them depends on where you want them to be accessible their scope,1
2302,Variables can be declared anywhere in a program They can be declared inside a function local variables or outside the functions global variables,It depends if it s a global then they have to be declared out side the source code to be used in every scope however a local variable is one declared in a local function etc which obviously doesn t need to be declared outside the variable seeing how it is used for the function or block its being called for,1
2303,Local variables are declared inside the method or function they will be used in at the beginning of the method Global variables are declared outside of any function or method generally before functions are defined,Local variables are declared inside the method or function they will be used in at the beginning of the method Global variables are declared outside of any function or method generally before functions are defined,2
2304,Local variables are declared inside the method or function they will be used in at the beginning of the method Global variables are declared outside of any function or method generally before functions are defined,They can be declared globally just before the main method but also outside of it or variables can be subject to only the method they are scoped within but would still be declared at the beginning of that method but inside of it,2
2305,Local variables are declared inside the method or function they will be used in at the beginning of the method Global variables are declared outside of any function or method generally before functions are defined,local variables are declared inside the method while global variables are declared in the body,2
2306,Local variables are declared inside the method or function they will be used in at the beginning of the method Global variables are declared outside of any function or method generally before functions are defined,Global variables are declared in the body of the code Local variables are declared in the function they are to be used unless the function is being passed a variable Variables should always be declared before use,2
2307,The block inside a do while statement will execute at least once,The do statement first evaluates the condition and then executes the lines of code in the statement 0 or more times The do while statement executes the lines of code and then it evaluates the condition,1
2308,The block inside a do while statement will execute at least once,The loop of a do while statement always executes once,1
2309,The block inside a do while statement will execute at least once,Do while runs the embedded code at least once the do command does not necessarily,1
2310,The block inside a do while statement will execute at least once,A while loop terminates at the beginning of the loop a do or while terminates at the end of the loop,1
2311,do while statements evaluate whether or not to loop after running the block contained within it at least once So the main differance is that while statements have a possibility of never being used Do while statements on the other hand are always run at least once before evaluating whether to run again,do while statements evaluate whether or not to loop after running the block contained within it at least once So the main differance is that while statements have a possibility of never being used Do while statements on the other hand are always run at least once before evaluating whether to run again,2
2312,do while statements evaluate whether or not to loop after running the block contained within it at least once So the main differance is that while statements have a possibility of never being used Do while statements on the other hand are always run at least once before evaluating whether to run again,The main difference between a while and a do while loop is that the do while loop always cycles through the loop at least once but the while loop does not always do so,2
2313,do while statements evaluate whether or not to loop after running the block contained within it at least once So the main differance is that while statements have a possibility of never being used Do while statements on the other hand are always run at least once before evaluating whether to run again,While loop used to execute a block of code as long as some condition is true A do while loop used to execute a block of code as long as some condition is satisfied The difference between while and do while is while loop tests its condition before the execution of its contents and the do while loop tests its condition after the execution of its contents at least once,2
2314,do while statements evaluate whether or not to loop after running the block contained within it at least once So the main differance is that while statements have a possibility of never being used Do while statements on the other hand are always run at least once before evaluating whether to run again,The termination condition of a do while statement is usually at the end of the loop so it will run at least once As for the while statement if the condition is false to begin with then the loop will never run,2
2315,do while statements evaluate whether or not to loop after running the block contained within it at least once So the main differance is that while statements have a possibility of never being used Do while statements on the other hand are always run at least once before evaluating whether to run again,A while loop will check the statement to make sure it is true before executing A do while loop will execute before checking the statement to see if it should run again,2
2316,do while statements evaluate whether or not to loop after running the block contained within it at least once So the main differance is that while statements have a possibility of never being used Do while statements on the other hand are always run at least once before evaluating whether to run again,A while statement will test the condition of the while loop FIRST there is a chance the loop will never run A do while loop will ALWAYS run once and then the while test will determine if it will run again,2
2317,do while statements evaluate whether or not to loop after running the block contained within it at least once So the main differance is that while statements have a possibility of never being used Do while statements on the other hand are always run at least once before evaluating whether to run again,a do while loop always executes once A while loop conditional statement has to be true for it to run,2
2318,do while statements evaluate whether or not to loop after running the block contained within it at least once So the main differance is that while statements have a possibility of never being used Do while statements on the other hand are always run at least once before evaluating whether to run again,WHILE statement The condition is checked for validity then is repeated until the conditon is false Do WHILE statement The code is performed at least once then checked for valid condition Will continue to,2
2319,do while statements evaluate whether or not to loop after running the block contained within it at least once So the main differance is that while statements have a possibility of never being used Do while statements on the other hand are always run at least once before evaluating whether to run again,while statements will evaluate the statement BEFORE executing a cycle of the loop including the first cycle meaning that a while loop will not always execute A do while will run evaluate the statement AFTER running through a cycle of the loop ensuring that the loop always executes at least one time,2
2320,do while statements evaluate whether or not to loop after running the block contained within it at least once So the main differance is that while statements have a possibility of never being used Do while statements on the other hand are always run at least once before evaluating whether to run again,The main difference between a do and a do while statement is in a do while statement is the statements in a do block are always executed atleast once The while statement will only execute if its condition is true,2
2321,do while statements evaluate whether or not to loop after running the block contained within it at least once So the main differance is that while statements have a possibility of never being used Do while statements on the other hand are always run at least once before evaluating whether to run again,a while statement will only process if the statement is met while a do while will always process once then only continue if the statement is met,2
2322,do while statements evaluate whether or not to loop after running the block contained within it at least once So the main differance is that while statements have a possibility of never being used Do while statements on the other hand are always run at least once before evaluating whether to run again,While tests for true first before running do while runs once first before checking,2
2323,do while statements evaluate whether or not to loop after running the block contained within it at least once So the main differance is that while statements have a possibility of never being used Do while statements on the other hand are always run at least once before evaluating whether to run again,A do while statement body always executes at least once Where as a while statement will not execute at all unless the condition for the while is true,2
2324,do while statements evaluate whether or not to loop after running the block contained within it at least once So the main differance is that while statements have a possibility of never being used Do while statements on the other hand are always run at least once before evaluating whether to run again,The statements within the block of the do while loop will always be executed at least once regardless of the conditions Whereas the while loops may never be executed if the conditions are not met,2
2325,do while statements evaluate whether or not to loop after running the block contained within it at least once So the main differance is that while statements have a possibility of never being used Do while statements on the other hand are always run at least once before evaluating whether to run again,a do while loop will always run through once while an while loop performs a test before running through the loop,2
2326,do while statements evaluate whether or not to loop after running the block contained within it at least once So the main differance is that while statements have a possibility of never being used Do while statements on the other hand are always run at least once before evaluating whether to run again,A while statement tests the condition before it can start A do while statement loops through once before the condition is tested,2
2327,do while statements evaluate whether or not to loop after running the block contained within it at least once So the main differance is that while statements have a possibility of never being used Do while statements on the other hand are always run at least once before evaluating whether to run again,While loop evaluates its expression at the top of its loop and decides if it needs to execute and the do while always executes at least once and then evaluates its expression at the bottom of its loop,2
2328,do while statements evaluate whether or not to loop after running the block contained within it at least once So the main differance is that while statements have a possibility of never being used Do while statements on the other hand are always run at least once before evaluating whether to run again,A do while statement will always execute the do piece of code at least once before checking the condition A while statement will always check the condition first,2
2329,do while statements evaluate whether or not to loop after running the block contained within it at least once So the main differance is that while statements have a possibility of never being used Do while statements on the other hand are always run at least once before evaluating whether to run again,A do while passes atleast 1 time before checking the condition however a while would fail to enter the loop if the condition fails in its first place,2
2330,do while statements evaluate whether or not to loop after running the block contained within it at least once So the main differance is that while statements have a possibility of never being used Do while statements on the other hand are always run at least once before evaluating whether to run again,a while loop checks if the condition is true or not first if it was true it excutes the statement a do while loop executes the statement before it checks the condition if the condition was true it would excute the statement again so a do while loop would excute the statement atleast once,2
2331,do while statements evaluate whether or not to loop after running the block contained within it at least once So the main differance is that while statements have a possibility of never being used Do while statements on the other hand are always run at least once before evaluating whether to run again,A do while loop will always execute atleast once a while loop may never execute depending on teh conditions,2
2332,do while statements evaluate whether or not to loop after running the block contained within it at least once So the main differance is that while statements have a possibility of never being used Do while statements on the other hand are always run at least once before evaluating whether to run again,a while loop is pre check it checks the condition statement before it executes the code within the while block a do while loop is post check it checks the condition AFTER the block executes it runs at least once no matter what the condition statement is,2
2333,do while statements evaluate whether or not to loop after running the block contained within it at least once So the main differance is that while statements have a possibility of never being used Do while statements on the other hand are always run at least once before evaluating whether to run again,What is the main difference between a while and a do while statement The do while construct consists of a block of code and a condition First the code within the block is executed and then the condition is evaluated this is done until it is proven false The difference between the While loop is it tests the condition before the code within the block is executed,2
2334,A collection of nodes which has a special node called root and the rest of the nodes are partitioned into one or more disjoint sets each set being a tree,A hierarchy of nodes that are sorted in a particular order Each node has a ancestor except for the root and children except for the leaves,1
2335,A collection of nodes which has a special node called root and the rest of the nodes are partitioned into one or more disjoint sets each set being a tree,A tree is a finite set of one or more nodes such that : there is a specially designated node called the root,1
2336,A collection of nodes which has a special node called root and the rest of the nodes are partitioned into one or more disjoint sets each set being a tree,A connected undirected graph without cycles,1
2337,A collection of nodes which has a special node called root and the rest of the nodes are partitioned into one or more disjoint sets each set being a tree,a tree is a series of nodes where each node has links to other nodes,1
2338,A collection of nodes which has a special node called root and the rest of the nodes are partitioned into one or more disjoint sets each set being a tree,an infinite set of nodes that have a root and descendants and each addition is a leaf,1
2339,A collection of nodes which has a special node called root and the rest of the nodes are partitioned into one or more disjoint sets each set being a tree,A set of one or more nodes that are hierarchically organized with one special root node,1
2340,A collection of nodes which has a special node called root and the rest of the nodes are partitioned into one or more disjoint sets each set being a tree,A tree is a finite set of one or more nodes such that there is a specially designated node called the root,1
2341,A collection of nodes which has a special node called root and the rest of the nodes are partitioned into one or more disjoint sets each set being a tree,A tree is a data structure where nodes are linked to each other in a hierarchical manner,1
2342,A collection of nodes which has a special node called root and the rest of the nodes are partitioned into one or more disjoint sets each set being a tree,It is a list of numbers in a list made by comparing values of nodes already in the tree and adding to the appropriate spot Its a list made up of nodes with left and right pointers,1
2343,A collection of nodes which has a special node called root and the rest of the nodes are partitioned into one or more disjoint sets each set being a tree,A tree is a branched data structure with nodes and leaves a special node called root has no parent node but however like all other nodes can and does have 2 nodes that it links to namely one on the right and one on the left,1
2344,A collection of nodes which has a special node called root and the rest of the nodes are partitioned into one or more disjoint sets each set being a tree,A finite set of nodes that starts with the root and terminates with leaves,1
2345,A collection of nodes which has a special node called root and the rest of the nodes are partitioned into one or more disjoint sets each set being a tree,a set of data arranged with pointers each element can have many pointers but no two pointers point to the same element,1
2346,A collection of nodes which has a special node called root and the rest of the nodes are partitioned into one or more disjoint sets each set being a tree,A Tree is a data structure with one or more data nodes each of which contains some data Each node itself can have a number of attached child nodes creating the branched structure Trees are named for,1
2347,A collection of nodes which has a special node called root and the rest of the nodes are partitioned into one or more disjoint sets each set being a tree,a finite collection of nodes where it starts with an element called the root which has children and its children have children until you get to the leaves which are the last elements and have to children,1
2348,A collection of nodes which has a special node called root and the rest of the nodes are partitioned into one or more disjoint sets each set being a tree,A nonlinear two dimensional data structure,1
2349,A collection of nodes which has a special node called root and the rest of the nodes are partitioned into one or more disjoint sets each set being a tree,A type of data structure in which each element is attached to one or more elements directly beneath it,1
2350,A tree is a finite set of one or more nodes with a specially designated node called the root and the remaining nodes are partitioned into disjoint sets where each of these sets is a tree,A tree is a finite set of one or more nodes with a specially designated node called the root and the remaining nodes are partitioned into disjoint sets where each of these sets is a tree,2
2351,A tree is a finite set of one or more nodes with a specially designated node called the root and the remaining nodes are partitioned into disjoint sets where each of these sets is a tree,A data structure that contains a root internal nodes and external nodes Each node references another node by means of pointers pass by reference The root is the base of the tree it has no parents A leaf is a node at the end of the tree which points to NULL,2
2352,A tree is a finite set of one or more nodes with a specially designated node called the root and the remaining nodes are partitioned into disjoint sets where each of these sets is a tree,It organizes data in a nonlinear hierarchical form where items can have more than one successor Partitioned into a root node and subsets are general subtrees of the root,2
2353,A tree is a finite set of one or more nodes with a specially designated node called the root and the remaining nodes are partitioned into disjoint sets where each of these sets is a tree,A tree is a finite set of one or more nodes such that there is a specially designated node called the root The remaining nodes are partitioned into n is greater than or equal to 0 disjoint sets T the n plus 1 where each element set is a tree,2
2354,A tree is a finite set of one or more nodes with a specially designated node called the root and the remaining nodes are partitioned into disjoint sets where each of these sets is a tree,A finite number of nodes such that there is one root node each node has a certain number of children nodes and each child is also a tree,2
2355,The length of the longest path from the root to any of its leaves,Each level of a generation in the tree some people do not count the root as a generation,1
2356,The length of the longest path from the root to any of its leaves,The height of a tree is in terms of the levels of its nodes such that if the tree is empty its height is 0 otherwise its height is equal to the maximum level of its nodes,1
2357,The length of the longest path from the root to any of its leaves,The height is the number of generations levels from the root,1
2358,The length of the longest path from the root to any of its leaves,The intensity of the children Say you begin with one node Thats one height Then you add two children to that node and then two children to each of those nodes and two children to each of THOSE nodes Youre current height would be 4,1
2359,The length of the longest path from the root to any of its leaves,the number of levels of a tree like a tree can have at minimum a depth of 3 and at most a height of 8 for 8 nodes,1
2360,The length of the longest path from the root to any of its leaves,is equal to the number of levels levels between the root node and the terminal nodes,1
2361,The length of the longest path from the root to any of its leaves,The height of a tree is the depth of its subtrees that is how many layers deep it is,1
2362,The length of the longest path from the root to any of its leaves,The connections between elements are called branches Trees are often called inverted trees because they are normally drawn with the root at the top,0
2363,The height of a tree is the number of nodes on the longest path from the root to a leaf,The height of a tree is the number of nodes on the longest path from the root to a leaf,2
2364,The height of a tree is the number of nodes on the longest path from the root to a leaf,The number of nodes on the longest path from the root of the tree to a leaf,2
2365,The height of a tree is the number of nodes on the longest path from the root to a leaf,Height equals the number of times you must progress down the levels of a tree to reach a leaf of the greatest distance from the root,2
2366,The height of a tree is the number of nodes on the longest path from the root to a leaf,The height of a tree is the number of levels between the root and the leaf farthest away from it,2
2367,The height of a tree is the number of nodes on the longest path from the root to a leaf,The number of nodes on the longest path from the root to the leaf,2
2368,The height of a tree is the number of nodes on the longest path from the root to a leaf,The height of a tree is the number of nodes on the longes path from the root to a leaf,2
2369,The height of a tree is the number of nodes on the longest path from the root to a leaf,The number of nodes on the longest path from the root to a leaf,2
2370,A node that has no children,A new item to the tree a child,0
2371,A node that has no children,A leaf is a node with children it is a terminating node,1
2372,A node that has no children,The node with degree 0,1
2373,A node that has no children,a node with degree 0 last node in the tree and furtherest away from the root,1
2374,A leaf is a child of a parent node that has no children nodes of its own,A leaf is a child of a parent node that has no children nodes of its own,2
2375,A leaf is a child of a parent node that has no children nodes of its own,A node with no children,2
2376,A leaf is a child of a parent node that has no children nodes of its own,A tree node with no children,2
2377,A leaf is a child of a parent node that has no children nodes of its own,And end point of the tree a node that does not have any children,2
2378,A leaf is a child of a parent node that has no children nodes of its own,a node with no children,2
2379,A leaf is a child of a parent node that has no children nodes of its own,The last value in the tree A value with no children attatched,2
2380,A leaf is a child of a parent node that has no children nodes of its own,The elements at the very bottom of an inverted tree that is those that have no elements below them are called leaves,2
2381,A tree for which the maximum number of children per node is two,A tree data structure in which each done has at most two children typical called left and right nodes The right node is usually greater than the left node and the parent node,1
2382,A tree for which the maximum number of children per node is two,a tree with only 2 joints left and right,1
2383,A tree for which the maximum number of children per node is two,a binary tree is a special search tree where each node has either 2 1 or 0 children,1
2384,A tree for which the maximum number of children per node is two,A binary tree is a special type of inverted tree in which each element has only two branches below it,1
2385,A binary tree is a set of nodes that is either empty or partitioned into a root node and one or two subsets that are binary subtrees of the root Each node can have no more than two children a right and a left child,A binary tree is a set of nodes that is either empty or partitioned into a root node and one or two subsets that are binary subtrees of the root Each node can have no more than two children a right and a left child,2
2386,A binary tree is a set of nodes that is either empty or partitioned into a root node and one or two subsets that are binary subtrees of the root Each node can have no more than two children a right and a left child,A set of nodes that is either empty or partitioned into a root node and one or two subsets that are binary subtrees of the root Each node has at most two children the left child and the right child,2
2387,A binary tree is a set of nodes that is either empty or partitioned into a root node and one or two subsets that are binary subtrees of the root Each node can have no more than two children a right and a left child,A set of zero or more nodes partitioned into a root node and two possibly empty sets that are binary trees Thus each node in a binary tree has at most two children the left child and the right child,2
2388,A binary tree is a set of nodes that is either empty or partitioned into a root node and one or two subsets that are binary subtrees of the root Each node can have no more than two children a right and a left child,A tree in which each parent has a maximum of 2 children,2
2389,A binary tree is a set of nodes that is either empty or partitioned into a root node and one or two subsets that are binary subtrees of the root Each node can have no more than two children a right and a left child,a tree where each node has at most 2 children,2
2390,A binary tree is a set of nodes that is either empty or partitioned into a root node and one or two subsets that are binary subtrees of the root Each node can have no more than two children a right and a left child,a tree with up to two children or a right subtree and a left subtree,2
2391,A binary tree is a set of nodes that is either empty or partitioned into a root node and one or two subsets that are binary subtrees of the root Each node can have no more than two children a right and a left child,A binary tree is a tree in which all nodes have a maximum of two degrees or can only have two children each,2
2392,A binary tree is a set of nodes that is either empty or partitioned into a root node and one or two subsets that are binary subtrees of the root Each node can have no more than two children a right and a left child,a binary tree is a tree data structure in which each node has at most two children,2
2393,A binary tree is a set of nodes that is either empty or partitioned into a root node and one or two subsets that are binary subtrees of the root Each node can have no more than two children a right and a left child,a tree where each parent can have at max two children,2
2394,A binary tree is a set of nodes that is either empty or partitioned into a root node and one or two subsets that are binary subtrees of the root Each node can have no more than two children a right and a left child,a tree where each node can have at most 2 children,2
2395,A binary tree is a set of nodes that is either empty or partitioned into a root node and one or two subsets that are binary subtrees of the root Each node can have no more than two children a right and a left child,Starting at the root node it branches off into one or two subsets that are binary subtrees of the root Each node has at most two children the left child and the right child,2
2396,A binary tree is a set of nodes that is either empty or partitioned into a root node and one or two subsets that are binary subtrees of the root Each node can have no more than two children a right and a left child,A binary tree is a set of nodes that is either empty or partitioned into a root node and one or two subsets that are binary subtrees of the root Each node has at most two children the left child and the right child,2
2397,A binary tree is a set of nodes that is either empty or partitioned into a root node and one or two subsets that are binary subtrees of the root Each node can have no more than two children a right and a left child,A binary tree can have only two children for each node,2
2398,A binary tree that has the property that for any node the left child is smaller than the parent which in turn is smaller than the right child,a tree where each node has at most two nodes and the node on the left is less than the root and the node on the right is greater than the root,1
2399,A binary tree that has the property that for any node the left child is smaller than the parent which in turn is smaller than the right child,Binary search trees are similar to binary trees but have been implemented to organize data in a specific way for later searching,1
2400,A binary tree that has the property that for any node the left child is smaller than the parent which in turn is smaller than the right child,A binary search tree is a tree that also has the condition that each node may have at maximum 2 children and where the input data is compared to the data in the tree starting with the root If the value is smaller than the root it traverses left if it is larger it traverses right until it becomes a leaf,1
2401,A binary tree that has the property that for any node the left child is smaller than the parent which in turn is smaller than the right child,a binary tree in which the data is in order from left to right,1
2402,A binary tree that has the property that for any node the left child is smaller than the parent which in turn is smaller than the right child,a tree that is set up so that it can be easily searched for numbers based on the location compared to the previous nodes,1
2403,A binary tree that has the property that for any node the left child is smaller than the parent which in turn is smaller than the right child,A binary search tree is a finite set of nodes that is either empty or consits of a root and two disjoint binary trees call the left and right subtrees,1
2404,A binary tree that has the property that for any node the left child is smaller than the parent which in turn is smaller than the right child,a set of numbers arranged by links each node can contain two pointers to other elements each node to the left of the parent is smaller and each node to the right is larger recursive implementation implies that if traversed in order the output would be sorted,1
2405,A binary tree that has the property that for any node the left child is smaller than the parent which in turn is smaller than the right child,a binary search tree is a special tree in which each node has at most two children labeled left child and right child,1
2406,A binary tree that has the property that for any node the left child is smaller than the parent which in turn is smaller than the right child,Binary search trees are a fundamental data structure used to construct more abstract data structures such as sets multisets and associative arrays,1
2407,A tree data structure where each node has a value where the total order is defined on these values the left subtree contains only values less than the parent node and vice versa for the right subtree,A tree data structure where each node has a value where the total order is defined on these values the left subtree contains only values less than the parent node and vice versa for the right subtree,2
2408,A tree data structure where each node has a value where the total order is defined on these values the left subtree contains only values less than the parent node and vice versa for the right subtree,A binary search tree is a binary tree where the value in any node n is greater than the value in every node in n left subtree but less than every node in n s right subtree,2
2409,A tree data structure where each node has a value where the total order is defined on these values the left subtree contains only values less than the parent node and vice versa for the right subtree,A binary tree where the value in any node n is greater than the value in every node in n left subtree but less than the value of every node in n right subtree,2
2410,A tree data structure where each node has a value where the total order is defined on these values the left subtree contains only values less than the parent node and vice versa for the right subtree,A binary tree where the search key in any node n is greater than the search key in any node in n left subtree but less than the search key in any node in n right subtree,2
2411,A tree data structure where each node has a value where the total order is defined on these values the left subtree contains only values less than the parent node and vice versa for the right subtree,A tree which is split based on values This makes it very easy to search One can compare the desired value to the root and if the root is greater than we search the left side of the tree if it is less than we search the right side and do the same thing recursively,2
2412,A tree data structure where each node has a value where the total order is defined on these values the left subtree contains only values less than the parent node and vice versa for the right subtree,it is a binary tree where each node has a value a total order is defined on these values the left subtree of a node contains only values less than the node value and the right subtree of a node contains only values greater than or equal to the node value,2
2413,A tree data structure where each node has a value where the total order is defined on these values the left subtree contains only values less than the parent node and vice versa for the right subtree,a binary tree where the children are ordered such that the right side is greater than the current node and the left is less than or equal the current node,2
2414,A tree data structure where each node has a value where the total order is defined on these values the left subtree contains only values less than the parent node and vice versa for the right subtree,A binary tree where the value in any node n is greater than the value in every node n left subtree but less than every value in n right subtree,2
2415,A tree data structure where each node has a value where the total order is defined on these values the left subtree contains only values less than the parent node and vice versa for the right subtree,it is similar to a binary tree The keys in a nonempty left subtree right subtree are smaller larger than the key in the root of subtree the values in all nodes in the left subtree of a node are less than the node value the values in all nodes in the right subtree of a node are greater than the node values,2
2416,A tree data structure where each node has a value where the total order is defined on these values the left subtree contains only values less than the parent node and vice versa for the right subtree,A binary search tree is a special binary tree arranged such that every left child node contains a value less than its parent and every right child node contains a value greater its parent,2
2417,A tree data structure where each node has a value where the total order is defined on these values the left subtree contains only values less than the parent node and vice versa for the right subtree,a binary tree with a special organization of data where the left child of the element is less than it and the right child is larger than it,2
2418,A tree data structure where each node has a value where the total order is defined on these values the left subtree contains only values less than the parent node and vice versa for the right subtree,A tree in which the smaller values are located on the left of a parent node and the larger values are located on the right of the parent node,2
2419,A tree data structure where each node has a value where the total order is defined on these values the left subtree contains only values less than the parent node and vice versa for the right subtree,it is a binary tree where each node has a unique key the left child of a node has only values less than that node and the right child of each node has higher values than that node,2
2420,Traverse the left subtree then the root then the right subtree,The inorder traversal of a binary tree visits the node of a binary tree in order according to their data values,1
2421,Traverse the left subtree then the root then the right subtree,Traverses the binary tree in inorder It lets you visit the nodes in order according to their data values,1
2422,Traverse the left subtree then the root then the right subtree,Its used to visit nodes of a binary search tree in a search key order,1
2423,Traverse the left subtree then the root then the right subtree,Inorder traversal of a binary tree will retrieve start at the furthest left hand leaf and checks it it s parent and it s right side sibling then it goes up a level and repeats until it gets to the root,1
2424,Traverse the left subtree then the root then the right subtree,starting by displaying the node furthest to the right then the node then the node on the right in recursive order,1
2425,Traverse the left subtree then the root then the right subtree,it means that you traverse one subtree of a node then look at the node itself before traversing the other subtree of the node,1
2426,Traverse the left subtree then the root then the right subtree,Level order traversal is a traversal method by which levels are visited successively starting with level 0 the root node and nodes are visited from left to right on each level with Push and Pop methods,1
2427,For every node in the binary tree we first visit its left sub tree if its there and then visit the parent node itself and then the right sub tree if its there,For every node in the binary tree we first visit its left sub tree if its there and then visit the parent node itself and then the right sub tree if its there,2
2428,For every node in the binary tree we first visit its left sub tree if its there and then visit the parent node itself and then the right sub tree if its there,Left side of tree Root Right side of tree,2
2429,For every node in the binary tree we first visit its left sub tree if its there and then visit the parent node itself and then the right sub tree if its there,printing a tree in order from least to greatest This done by going as far left down the tree as possible and printing the parent and then right tree Then move up the tree,2
2430,For every node in the binary tree we first visit its left sub tree if its there and then visit the parent node itself and then the right sub tree if its there,The in order is to go from left root right,2
2431,For every node in the binary tree we first visit its left sub tree if its there and then visit the parent node itself and then the right sub tree if its there,traverse the left subtree visit the root traverse the right subtree,2
2432,For every node in the binary tree we first visit its left sub tree if its there and then visit the parent node itself and then the right sub tree if its there,Left Child implies Parent implies Right Child,2
2433,For every node in the binary tree we first visit its left sub tree if its there and then visit the parent node itself and then the right sub tree if its there,void inorder ptNode ptr if ptr inorder ptr implies left ; coutdata; inorder ptr implies right ;,2
2434,For every node in the binary tree we first visit its left sub tree if its there and then visit the parent node itself and then the right sub tree if its there,the root is in the middle The left subtree is traversed first then the root and finally the right subtree,2
2435,For every node in the binary tree we first visit its left sub tree if its there and then visit the parent node itself and then the right sub tree if its there,a traversal that visits the left branch first then the parent node then the right branch recursively,2
2436,For every node in the binary tree we first visit its left sub tree if its there and then visit the parent node itself and then the right sub tree if its there,Inorder traversal visits the left branch of a node all the way to it is deepest left most leaf before visiting the node itself After visiting the entire left branch and the node it visits the node right branch following the same pattern of left child node right child,2
2437,For every node in the binary tree we first visit its left sub tree if its there and then visit the parent node itself and then the right sub tree if its there,You traverse all the nodes to the left then visit the root then traverse all the nodes on the right,2
2438,For every node in the binary tree we first visit its left sub tree if its there and then visit the parent node itself and then the right sub tree if its there,you would go to the furthest down left most node then to the root then to the right if left and right exist then you would return one node previous and do the same until you reached the root then go to the furthest down left most node on the right side of the root and continue this process,2
2439,The height of the tree or log of the number of elements in the tree,n minus 1 divided by 2 is the algorithm to compare and find an element,1
2440,The height of the tree or log of the number of elements in the tree,Depends on what half of the tree and the levels you have,1
2441,The height of the tree or log of the number of elements in the tree,n minus 1,1
2442,The height of the tree or log of the number of elements in the tree,O nlog n,1
2443,The height of the tree or log of the number of elements in the tree,nLog n,1
2444,The height of the tree or log of the number of elements in the tree,at the minimum log n or log 2 at the maximum N searches where N is the number of nodes,1
2445,The height of the tree or log of the number of elements in the tree,O n,1
2446,The height of the tree or log of the number of elements in the tree                                                                                                                                                                                                                                                                                                                                    n to the power of k minus 1 where k is the height of the tree,1.5,0
2447,This is on the runtime order of log n where n is the number of nodes in the binary tree,This is on the runtime order of log n where n is the number of nodes in the binary tree,2
2448,This is on the runtime order of log n where n is the number of nodes in the binary tree,In a binary search tree of size n it takes log n comparisons to find a specified element,2
2449,This is on the runtime order of log n where n is the number of nodes in the binary tree,At most its equivalent to the height of the tree,2
2450,This is on the runtime order of log n where n is the number of nodes in the binary tree,Log n,2
2451,This is on the runtime order of log n where n is the number of nodes in the binary tree,O log n,2
2452,This is on the runtime order of log n where n is the number of nodes in the binary tree,O log n in balanced trees,2
2453,This is on the runtime order of log n where n is the number of nodes in the binary tree,log n where n equals the number of nodes,2
2454,This is on the runtime order of log n where n is the number of nodes in the binary tree,it takes as many comparisons as the number of levels of the binary search tree it only compares one number at each level,2
2455,This is on the runtime order of log n where n is the number of nodes in the binary tree,At most it takes one less comparisons than the tree height In big O notation it takes O log n comparisons if the tree is balanced,2
2456,This is on the runtime order of log n where n is the number of nodes in the binary tree,it takes h comparisons where h is the height of the tree,2
2457,Function members and data members,The name of the class file the parameters it must take to perform its function Also a brief description of what the class does,1
2458,Function members and data members,access specifiers and functions oftentimes a constructor,1
2459,Function members and data members,Class is user defined It contains members data and functions The keyword class is used and includes brackets,1
2460,Function members and data members,the functions and variables used when the object is defined for the class,1
2461,Function members and data members,The elements that are included in a class definition is the access modifier data types variables and function signatures,1
2462,Function members and data members,The variables and function prototypes,1
2463,Function members and data members,public and private variables and initiations of functions included in the class,1
2464,Function members and data members,The return value and the accepted value,0
2465,Function members and data members,A class definition typically includes the class name the classes constructor s and any extra functions and class variables,1
2466,Function members and data members,Parameters and their type Class name and return type and the code to be executed in the class,1
2467,Function members and data members,Constructor functions and variables native to the class,1
2468,Function members and data members,constructor and function definitions,1
2469,Function members and data members,A class definition includes the definitions of the class constructor s and any public or private functions Of course it also includes the class header and any necessary C libraries,1
2470,Function members and data members,Class name semicoln at the end of the defination private and bublic followed by :,1
2471,Function members and data members,a constructor private and public variables and function prototypes,1
2472,Function members and data members,class variables class function prototypes,1
2473,Function members and data members,input ADDRESS return type elements,1
2474,The elements typically included in a class definition are the function prototypes usually declared public and the data members used in the class which are usually declared private,The elements typically included in a class definition are the function prototypes usually declared public and the data members used in the class which are usually declared private,2
2475,The elements typically included in a class definition are the function prototypes usually declared public and the data members used in the class which are usually declared private,Member functions and data members,2
2476,The elements typically included in a class definition are the function prototypes usually declared public and the data members used in the class which are usually declared private,Data members functions and function definitions variables,2
2477,The elements typically included in a class definition are the function prototypes usually declared public and the data members used in the class which are usually declared private,Function members and member attributes or in other words the class variables and functions,2
2478,The elements typically included in a class definition are the function prototypes usually declared public and the data members used in the class which are usually declared private,data members class variables and functions,2
2479,The elements typically included in a class definition are the function prototypes usually declared public and the data members used in the class which are usually declared private,Data variables and Functions Data members,2
2480,It splits the original array into two sorts each of the two halves and then merges the sorted arrays,A merge sort works by removing all items to sepperate memory locations and merging them back together in order,1
2481,It splits the original array into two sorts each of the two halves and then merges the sorted arrays,By divide and conquer,1
2482,It splits the original array into two sorts each of the two halves and then merges the sorted arrays,merge sort splits an array of elements into smaller and smaller array till the value of 1 is reached,1
2483,It uses the divide and conqure technique recursively and then when merging back together it compares each element together in a sorted list this is done by reversing the divide and conquer technique,It uses the divide and conqure technique recursively and then when merging back together it compares each element together in a sorted list this is done by reversing the divide and conquer technique,2
2484,It uses the divide and conqure technique recursively and then when merging back together it compares each element together in a sorted list this is done by reversing the divide and conquer technique,It divides the array into two halves sorts each half then merges the two halves together,2
2485,It uses the divide and conqure technique recursively and then when merging back together it compares each element together in a sorted list this is done by reversing the divide and conquer technique,Divide into two sublists and then those sublists break into length 1 then merges the sublists sorted,2
2486,It uses the divide and conqure technique recursively and then when merging back together it compares each element together in a sorted list this is done by reversing the divide and conquer technique,Merge sort uses the divide and conquer idea where it divides the array in half multiple times and then joins each element of the array back into one sorted array This is one of the best sorting algorithms besides Quicksort,2
2487,It uses the divide and conqure technique recursively and then when merging back together it compares each element together in a sorted list this is done by reversing the divide and conquer technique,divides the line in half coninuously until you get to only a single value then recombine the values to form a sorted line,2
2488,It uses the divide and conqure technique recursively and then when merging back together it compares each element together in a sorted list this is done by reversing the divide and conquer technique,Continually split array in half sort each side of the halves then put them back together once organized,2
2489,It uses the divide and conqure technique recursively and then when merging back together it compares each element together in a sorted list this is done by reversing the divide and conquer technique,merge sort splits the array of elements into smaller arrays until the arrays reach size 1 and then the merge sort merges the smaller arrays into arrays of size 2 then it moves to the next step and merges the next arrays,2
2490,It uses the divide and conqure technique recursively and then when merging back together it compares each element together in a sorted list this is done by reversing the divide and conquer technique,Break a single array down into many arrays with individual elements then sort the elements as you reconstruct them back into a single array,2
2491,It uses the divide and conqure technique recursively and then when merging back together it compares each element together in a sorted list this is done by reversing the divide and conquer technique,Merge sort breaks the array in half and continues to do so until it has 2 elements to compare and sorts them after doing so it merges back as it keeps on sorting the algorithm as it does so,2
2492,It uses the divide and conqure technique recursively and then when merging back together it compares each element together in a sorted list this is done by reversing the divide and conquer technique,Merge sort divides the problem in half organizes each half then brings the two halves together again,2
2493,It uses the divide and conqure technique recursively and then when merging back together it compares each element together in a sorted list this is done by reversing the divide and conquer technique,Take an array and split it into two then solve these simpler problems and merge the two answers in correct order,2
2494,It uses the divide and conqure technique recursively and then when merging back together it compares each element together in a sorted list this is done by reversing the divide and conquer technique,A merge sort recursively divides the array into half until only one element remains then it sorts the data on its way out of the recursive call by merging the cells,2
2495,It uses the divide and conqure technique recursively and then when merging back together it compares each element together in a sorted list this is done by reversing the divide and conquer technique,Merge sort recursively divides an array into two arrays until all arrays have 1 element at which point it merges the 1 element arrays into larger sorted arrays the final returned array being the sorted version of the initial array,2
2496,It uses the divide and conqure technique recursively and then when merging back together it compares each element together in a sorted list this is done by reversing the divide and conquer technique,Merge sort continuously breaks an array in half then sorts the arrays as it concatenates them back together into one sorted array,2
2497,It uses the divide and conqure technique recursively and then when merging back together it compares each element together in a sorted list this is done by reversing the divide and conquer technique,It takes an array splits itself in half sorts the two halves either by recursion or iteration and compares them together giving a third array a full sorted list with both halves rejoined,2
2498,It uses the divide and conqure technique recursively and then when merging back together it compares each element together in a sorted list this is done by reversing the divide and conquer technique,it splits a large array into small arrays and recurs until the array is a size of 1 and then merges all of the arrays back together until the source array is completely sourted,2
2499,It uses the divide and conqure technique recursively and then when merging back together it compares each element together in a sorted list this is done by reversing the divide and conquer technique,Mergesort divides the array into smaller halves and then combines the sorted subarrays into one sorted array,2
2500,It uses the divide and conqure technique recursively and then when merging back together it compares each element together in a sorted list this is done by reversing the divide and conquer technique,merge sort breaks the array down in halves until it is comparing two values sorts those two values then merges that back with the other broken down parts that it sorted each level merging more sets together till you return back to your whole array in order,2
2501,It uses the divide and conqure technique recursively and then when merging back together it compares each element together in a sorted list this is done by reversing the divide and conquer technique,Divides the data into twor separate arrays sorts the two arrays and merges them back to back together recursively,2
2502,It uses the divide and conqure technique recursively and then when merging back together it compares each element together in a sorted list this is done by reversing the divide and conquer technique,Take the initial array and split it into two temporary smaller arrays sort the two smaller arrays and merge them back into a single array,2
2503,It uses the divide and conqure technique recursively and then when merging back together it compares each element together in a sorted list this is done by reversing the divide and conquer technique,merge sort uses the divide and conquer strategy sorting an array in parts then merging the sorted parts back together,2
2504,It uses the divide and conqure technique recursively and then when merging back together it compares each element together in a sorted list this is done by reversing the divide and conquer technique,Divide recursuivly big array into two arrays sort two array and merge them togather recuruivly,2
2505,It uses the divide and conqure technique recursively and then when merging back together it compares each element together in a sorted list this is done by reversing the divide and conquer technique,divides an array in half and sorts each half by calling its self thus dividing each half again and again and sorting it until the array is sorted then putting the elements back in the original array sorted,2
2506,It uses the divide and conqure technique recursively and then when merging back together it compares each element together in a sorted list this is done by reversing the divide and conquer technique,Merge sort takes an array and splits it in half and sends each half back to itself recursively and merges and sorts the two halves when it starts going back up,2
2507,It uses the divide and conqure technique recursively and then when merging back together it compares each element together in a sorted list this is done by reversing the divide and conquer technique,merge sort splits an array into two halves and then sorts the two smaller arrays and then merges them back together to form a sorted array,2
2508,It uses the divide and conqure technique recursively and then when merging back together it compares each element together in a sorted list this is done by reversing the divide and conquer technique,the merge sort continually divides the array or set of containers into halves until it reaches the point where there is just one element left then merges each of the sets of two sorted arrays containers,2
2509,Private and public,static long unsigned,0
2510,Private and public,A C plus plus class definition may include access specifiers public private and static,1
2511,Private and public,local global local variable function specific,1
2512,Public and private specifiers,Public and private specifiers,2
2513,Public and private specifiers,Public Private Restricted,2
2514,Public and private specifiers,The access specifiers are public and private,2
2515,Public and private specifiers,Public or Private,2
2516,Public and private specifiers,public : the function or variable can be used outside the class private : the function or variable can only be used with the class,2
2517,Public and private specifiers,Private public protected,2
2518,Public and private specifiers,The access specifiers that can be used in a C plus plus class definition is private and public,2
2519,Public and private specifiers,Private Public Protected or Friend,2
2520,Public and private specifiers,public private,2
2521,Public and private specifiers,Public protected and private,2
2522,Public and private specifiers,private public,2
2523,Public and private specifiers,public can be accessed by any of the program private can only be accessed by the class functions themselves and no outside functions or calls,2
2524,Public and private specifiers,functions and data members can be given access specifications of public private and friend public access is given to any functions or members not given specific access rights,2
2525,Public and private specifiers,public can be accessed from outside the class private accessible only from inside the class not inherited protected accessible only from inside the class inherited,2
2526,By using constructors,ie GradeBook myGradeBook ; call upon the class and then give it a name like shown,0
2527,By using constructors,They are initialized as a named instance of the template formed by the class This named instance can then be modified to be different from the class that it was created from,1
2528,By using constructors,Objects are initialized by a value given When an object is defined for a certain task,1
2529,By using constructors,They are initialized with a dot between the constructor and the object being created,1
2530,By using constructors,objectname classname ; to call a function from the class : objectname funciton ;,0
2531,By using constructors,classname objectname input parameters ;,1
2532,By using constructors,Objects are usually initialized at the beginning of the program and are initialized usually in the main function They are initialized after the class name,1
2533,By using constructors,; or if you want to initialize a variable to a certain value equals;,1
2534,By using constructors,variables are set to a given value or 0 if none is given,0
2535,By using constructors,Objects are initialized essentially as copies of the corresponding classes complete with their own separate variables,1
2536,By using constructors,objects are initialized by stating the classname first then assigning a name to the object Within the object is a place where it can be initialized,1
2537,By using constructors,The value is specified after declaration It can initialized anywhere between the declaration and the corresponding,1
2538,By using constructors,with the default constructor for that object in its class if no constructor is specified it uses the default system constructor,1
2539,By using constructors,memory is allocated in accordance with their type and initialization input,1
2540,By using constructors,Objects are assigned a space in memory when they are created the name given to the object points to the memory address where the objects data resides,0
2541,By using constructors,objects are initialized by giving the object a type name and initial value,1
2542,By using constructors,obj are initialized by the variables that call them when they are created within a class e i classname objectname etc,1
2543,If the object refers to a class the constructor s will initialize the objects based on return type and parameters passed Compiler will auto create one if one is not provided,If the object refers to a class the constructor s will initialize the objects based on return type and parameters passed Compiler will auto create one if one is not provided,2
2544,If the object refers to a class the constructor s will initialize the objects based on return type and parameters passed Compiler will auto create one if one is not provided,Constructors; default when not provided by user or programmer specified constructors,2
2545,If the object refers to a class the constructor s will initialize the objects based on return type and parameters passed Compiler will auto create one if one is not provided,When the object is initialized its constructor is called whether one is provided or c plus plus assigns a default constructor,2
2546,If the object refers to a class the constructor s will initialize the objects based on return type and parameters passed Compiler will auto create one if one is not provided,If you had a class Gradebook you would initialize it in your main function by use of a constructor in the Gradebook class If no constructor is specified or found c plus plus will use a default one with no parameters Gradebook myGradebook; In this bit of code the class Gradebook has been initialized as object myGradebook,2
2547,If the object refers to a class the constructor s will initialize the objects based on return type and parameters passed Compiler will auto create one if one is not provided,They are initialized with a constructor,2
2548,If the object refers to a class the constructor s will initialize the objects based on return type and parameters passed Compiler will auto create one if one is not provided,By declaring the class first the name of the variable and then any variables that need to be put in the constructor Ex Class myClass x y,2
2549,The name of the function and the list of parameters including their types,a function signature is the elements that make it unique such as the variables it calls for and also I suppose this includes the program it is in,1
2550,The name of the function and the list of parameters including their types,function prototype that contains functions and data members,1
2551,The name of the function and the list of parameters including their types,the declaration of the function,1
2552,The name of the function and the list of parameters including their types,the unique identifier of a function which includes input variables along with the function name but excludes the output type,1
2553,The name of the function and the list of parameters including their types,a function signature should include the name of the function parameters and a body,1
2554,The name of the function and the list of parameters including their types,function sig is is what is the class recognizes as the main function or rather its specification,1
2555,Name of the function parameters it must receive in order to perform and a return type,Name of the function parameters it must receive in order to perform and a return type,2
2556,Name of the function parameters it must receive in order to perform and a return type,A function signature is the return type of a function its name and the number and type of its parameters,2
2557,Name of the function parameters it must receive in order to perform and a return type,A function signature is a declaration of the function that includes the parameter types and the number of parameters,2
2558,Name of the function parameters it must receive in order to perform and a return type,Includes the name accepted parameters and return type,2
2559,Name of the function parameters it must receive in order to perform and a return type,Contains the function name and its paramaters The return type is not included,2
2560,Name of the function parameters it must receive in order to perform and a return type,Return type function name and the parameter types,2
2561,Name of the function parameters it must receive in order to perform and a return type,The function name as well as what it returns and what it accepts,2
2562,Name of the function parameters it must receive in order to perform and a return type,A function signature specifies the name and input variables of a function,2
2563,Name of the function parameters it must receive in order to perform and a return type,A function signature is the function parameters and their type and the name of the function The return type is not a part of the function signature,2
2564,Name of the function parameters it must receive in order to perform and a return type,the name of the function and what it accepts or returns,2
2565,Name of the function parameters it must receive in order to perform and a return type,The order number and type of data items included inside the function parameters,2
2566,Name of the function parameters it must receive in order to perform and a return type,its the scope type and parameters of that function that give it it is properties and defines it against other functions,2
2567,Name of the function parameters it must receive in order to perform and a return type,is the name of the fuction return type and parameters that are being used,2
2568,Name of the function parameters it must receive in order to perform and a return type,A function signature used in a function prototype is the set of object types it take in as parameters with or without names given for the objects,2
2569,Name of the function parameters it must receive in order to perform and a return type,function name and parameter are called function signature,2
2570,Name of the function parameters it must receive in order to perform and a return type,The parameters needed the return type and name of the function,2
2571,Name of the function parameters it must receive in order to perform and a return type,the signature of a function includes the name of the function the number and types of parameters and the return type,2
2572,Name of the function parameters it must receive in order to perform and a return type,It is what uniquely separates overloaded functions It includes the return type and the parameter list of the function,2
2573,A function that calls itself,A base case that calls upon itself until the problem becomes smaller and terminates,1
2574,A function that calls itself,A recursive function is a function that breaks down a large problem into two or more smaller problems and calls itself to solve those smaller problems until a base case or terminating point is reached At the base case a definite answer is called and the function no longer recurses but unwinds itself back through function calls to determine the answer to the original large problem,1
2575,A function that calls itself,a function that calls itself into a loop with a base case for a loop exit,1
2576,A function that calls itself,It invoke by itself again ana again unless it reach bas case,1
2577,A function that calls upon it self to solve a problem Each time it calls upon it self it splits up a problem into a simplier form until it reaches a base case which is the most simplest form of the problem,A function that calls upon it self to solve a problem Each time it calls upon it self it splits up a problem into a simplier form until it reaches a base case which is the most simplest form of the problem,2
2578,A function that calls upon it self to solve a problem Each time it calls upon it self it splits up a problem into a simplier form until it reaches a base case which is the most simplest form of the problem,A function that calls itself to perform an opperation such as a factorial recursive function,2
2579,A function that calls upon it self to solve a problem Each time it calls upon it self it splits up a problem into a simplier form until it reaches a base case which is the most simplest form of the problem,It is a function that calls itself It runs multiple times until the base case is reached,2
2580,A function that calls upon it self to solve a problem Each time it calls upon it self it splits up a problem into a simplier form until it reaches a base case which is the most simplest form of the problem,a function that calls itself untill it reaches a base case,2
2581,A function that calls upon it self to solve a problem Each time it calls upon it self it splits up a problem into a simplier form until it reaches a base case which is the most simplest form of the problem,A function that calls itself Each time it does it must get smaller and eventually MUST converge to a base case otherwise you can start an infinite loop,2
2582,A function that calls upon it self to solve a problem Each time it calls upon it self it splits up a problem into a simplier form until it reaches a base case which is the most simplest form of the problem,A function that calls itself With each function call the problem is diminished,2
2583,A function that calls upon it self to solve a problem Each time it calls upon it self it splits up a problem into a simplier form until it reaches a base case which is the most simplest form of the problem,A recursive function is a function that calls itself Usually called the base case If the base case is not correct it causes a infinite loop,2
2584,A function that calls upon it self to solve a problem Each time it calls upon it self it splits up a problem into a simplier form until it reaches a base case which is the most simplest form of the problem,A function that calls itself in order to solve a problem,2
2585,A function that calls upon it self to solve a problem Each time it calls upon it self it splits up a problem into a simplier form until it reaches a base case which is the most simplest form of the problem,a function that calls itself over and over until it finds the simplest form of solution or the base case,2
2586,A function that calls upon it self to solve a problem Each time it calls upon it self it splits up a problem into a simplier form until it reaches a base case which is the most simplest form of the problem,A recursive function is a function that calls itself repeatedly until a base case is achieved The fundamental idea is to break one large problem into a series of smaller similar problems,2
2587,A function that calls upon it self to solve a problem Each time it calls upon it self it splits up a problem into a simplier form until it reaches a base case which is the most simplest form of the problem,A recursive function typically simplifies a problem by calling itself until arriving at a base case at which it recursively returns a solution,2
2588,A function that calls upon it self to solve a problem Each time it calls upon it self it splits up a problem into a simplier form until it reaches a base case which is the most simplest form of the problem,a function that calls itself until the base cases are met,2
2589,A function that calls upon it self to solve a problem Each time it calls upon it self it splits up a problem into a simplier form until it reaches a base case which is the most simplest form of the problem,A recursive function only knows how to solve base cases A recursive function calls itself directly or indirectly until a base case is reached,2
2590,A function that calls upon it self to solve a problem Each time it calls upon it self it splits up a problem into a simplier form until it reaches a base case which is the most simplest form of the problem,a function that calls itself and which eaach calls get closer and close to the base case,2
2591,A function that calls upon it self to solve a problem Each time it calls upon it self it splits up a problem into a simplier form until it reaches a base case which is the most simplest form of the problem,A function that divides and conquers a problem There is a base case that will eventually be reached The function calls itself over and over until the base case is satisfied,2
2592,A function that calls upon it self to solve a problem Each time it calls upon it self it splits up a problem into a simplier form until it reaches a base case which is the most simplest form of the problem,A recursive function solves a problem by repeatedly calling itself the initial problem is broken into successively smaller parts until a much simpler base case is reached the solutions to each piece of the problem are then returned a step at a time,2
2593,A function that calls upon it self to solve a problem Each time it calls upon it self it splits up a problem into a simplier form until it reaches a base case which is the most simplest form of the problem,a function that solves a problem by dividing the problem into smaller problems by calling its self again and again until a base case is reached,2
2594,A function that calls upon it self to solve a problem Each time it calls upon it self it splits up a problem into a simplier form until it reaches a base case which is the most simplest form of the problem,A function that calls itself over and over again till a base case is reached then it returns back to the original function,2
2595,A function that calls upon it self to solve a problem Each time it calls upon it self it splits up a problem into a simplier form until it reaches a base case which is the most simplest form of the problem,a recursive function is a function that during execution calls itself over and over until a base case is reached,2
2596,A function that calls upon it self to solve a problem Each time it calls upon it self it splits up a problem into a simplier form until it reaches a base case which is the most simplest form of the problem,A function that calls itself Usually used to split a problem into several smaller problems of the same type,2
2597,Through iteration,The alternative method is to use loops in the program instead of a function which calls itself,1
2598,Through iteration,Many recursive solutions may also be solved with looping control statements such as while for do while etc,1
2599,Through iteration,the alt way is to use a functions parameter in a call to function,1
2600,Iteration performers a series of checks and loops,Iteration performers a series of checks and loops,2
2601,Iteration performers a series of checks and loops,An alternative to solving a problem using recursive functions is to solve the problem using iteration,2
2602,Iteration performers a series of checks and loops,Iteration this would be more efficient and has repetition structure,2
2603,Iteration performers a series of checks and loops,One can use iteration or by using a simple while or for loop,2
2604,Iteration performers a series of checks and loops,Iteration A while loop or a for loop will be able to accomplish the same desired outcome It may be faster than recursion but could also be harder to understand,2
2605,Iteration performers a series of checks and loops,Using iteration loops,2
2606,Iteration performers a series of checks and loops,Another alternative way to solve a problem instead of using recursive functions is by using iteration,2
2607,Iteration performers a series of checks and loops,A recursive function can often be solved using an iterative function which runs faster but is often more complicated,2
2608,Iteration performers a series of checks and loops,Any recursive function can be solved using an iterative method,2
2609,Iteration performers a series of checks and loops,Using an iterative function which repeats a specified operation or set of operations until a terminating point or base case is reached,2
2610,Iteration performers a series of checks and loops,Iteration,2
2611,Iteration performers a series of checks and loops,Using an iterative solution For while or do while loop,2
2612,Iteration performers a series of checks and loops,the alternative way to solve a problem that could be solved using recursion is iteration,2
2613,Iteration performers a series of checks and loops,Any problem solved recursively could be solved with an iterative function Iterative replacements for recursive functions may be more difficult to program but often lead to more efficient solutions to a problem,2
2614,Iteration performers a series of checks and loops,itteration like a for loop a while loop or a do while loop,2
2615,The static arrays are intialized only once when the function is called,A static array only has a specific size and it cannot grow Also static arrays cannot be accessed outside the program which created it,1
2616,The static arrays are intialized only once when the function is called,Static can be initialized and non static cannot in C plus plus,1
2617,The static arrays are intialized only once when the function is called,An array declared static remains the same throughout the execution of the program,1
2618,The static arrays are intialized only once when the function is called,a static array will be called only once once it has been declared the complier will ignore the static line if it comes to it again,1
2619,The static arrays are intialized only once when the function is called,The static array will be available to the whole of the program whereas an array that is not static is only available within the scope in which it is declared or or pass by reference,1
2620,The static arrays are intialized only once when the function is called,Arrays declared static can not be changed One not declared static can be altered,1
2621,The static arrays are intialized only once when the function is called,an array that is declared as static will retain the values stored in it is elements between function calls and will not reinitialize them to default values,1
2622,The static arrays are intialized only once when the function is called,An array that is declared static causes anything that is not initialized to be set to 0,1
2623,The static arrays are intialized only once when the function is called,A static array will have a null character at the end of the array,1
2624,The static arrays are intialized only once when the function is called,An array they is declared as static can be accessed outside of the method it was declared without passing it as an argument to other functions in the same class,1
2625,The static arrays are intialized only once when the function is called,A static array has class scope allowing it to remain where other arrays might be recycled,1
2626,The static arrays are intialized only once when the function is called,one declared as static is one that is already defined The program knows the length and the array from the start whereas non static arrays are declared or assigned later,1
2627,The static arrays are intialized only once when the function is called,A static array retains any modified values after a function call Automatic arrays reset to their initial values when the function ends,1
2628,The static arrays are intialized only once when the function is called,a static array is one that keeps its values and is not initialized every time a class function is called it is data is not lost at function end,1
2629,The static arrays are intialized only once when the function is called,an array that is declared as static can only be used in the function that its being called in Its a constant array Static is another way of say const,1
2630,The static arrays are intialized only once when the function is called,Values in an array that is not delcared as static will remain constant When an array is declared const values within the array can be manipulated,1
2631,The static arrays are intialized only once when the function is called,Standard arrays terminate when the functions that call them finish A static array is not removed from memory when it is parent function terminates leaving it available for other functions or new instances of the original function,1
2632,The static arrays are intialized only once when the function is called,by defining static array it doese not lose scope in locala function static array makes programm more scalable non static array lose scope inside the local function,1
2633,The static arrays are intialized only once when the function is called,A static array cannot be changed A regular array can be changed when it is passed to a function or manually,1
2634,The static arrays are intialized only once when the function is called,a static array can be can be edited throughout the program while a non static array can only be edited within a given function,1
2635,The static arrays are intialized only once when the function is called,An array that is declared static is allocated when the program begins to run and is not freed until the program exits but has limited scope A non static array is allocated and freed every time that it comes in and out of scope,1
2636,The static arrays are intialized only once when the function is called,static has a predetermined size that cannot be passed while vis versa,1
2637,The array that is declared static retains its modified elements so once it is called upon again the latest elements are modified again An array that is not declared static will keep its original elements,The array that is declared static retains its modified elements so once it is called upon again the latest elements are modified again An array that is not declared static will keep its original elements,2
2638,The array that is declared static retains its modified elements so once it is called upon again the latest elements are modified again An array that is not declared static will keep its original elements,Arrays declared as static are not created and initialized when a function is called and destroyed when the function terminates,2
2639,The array that is declared static retains its modified elements so once it is called upon again the latest elements are modified again An array that is not declared static will keep its original elements,An array that is static does not change or uninitialize if called later unless explicitly acted upon It does not terminate or change across objects An automatic local array will be cleared and uninitialized if called later outside of it is specific scope,2
2640,The array that is declared static retains its modified elements so once it is called upon again the latest elements are modified again An array that is not declared static will keep its original elements,a non static array must reinitialize itself every function call while a static array will only initialize itself once unless otherwise forced,2
2641,The char will automatically add a null 0 character at the end of the string,a variable char is basically any non command key on the keyboard that you can press A string is a collection of letters or numbers that is stored together to be used later Comonly strings are used for words Chars can be used for less but can have opperations performed on them in a useful way,1
2642,The char will automatically add a null 0 character at the end of the string,String contains a word where as char can contain phrases or a string of characters,1
2643,The char will automatically add a null 0 character at the end of the string,a string is a variable with a single entinty of letters combined into one while in a char each letter is assigned a memory value and each has its own variable assigned i e char 0 char 1,1
2644,The char will automatically add a null 0 character at the end of the string,A string contains a null character at the end of the string which makes it easily possible to get the string length A char array can have a virtually unlimited length therefore its size must be declared or limited,1
2645,The char will automatically add a null 0 character at the end of the string,When you read a string of characters you also read in the white space When you read characters declared char you only read the characters no white space,1
2646,The char will automatically add a null 0 character at the end of the string,Character arrays will terminate at any whitespace including spaces Strings terminate when they encounter the new line character,1
2647,The char will automatically add a null 0 character at the end of the string,The difference is that a string that is declared a variable of type char is each char is included in the array versus the string of characters that is read into a variable,1
2648,The char will automatically add a null 0 character at the end of the string,An array of strings reads the string literals meaning anything within quotes A char array reads a string as each individual character,1
2649,The char will automatically add a null 0 character at the end of the string,character arrays can call on individual letters were a string array can only call words,1
2650,The char will automatically add a null 0 character at the end of the string,The variable of type string has a terminating character 0 at the end of it,1
2651,The char will automatically add a null 0 character at the end of the string,the one that is type string has an extra string member The or 0 at the end,1
2652,The char will automatically add a null 0 character at the end of the string,a string has variable size and function calls available while an character array usually has a static size,1
2653,The char will automatically add a null 0 character at the end of the string,the variable of type char each character is stored into a different memory address and can be accessed easly where as in a string of character its not easy to be able to access each character in the string,1
2654,The char will automatically add a null 0 character at the end of the string,When the string is passed into the array char individual characters are stored and can be manipulated Although when a word is stored into a string variable it is stored as one word and not as individual characters,1
2655,The char will automatically add a null 0 character at the end of the string,a string variable can change in size and is passed to functions by value whereas a type char cannot change in size and is passed to functions by reference only,1
2656,The char will automatically add a null 0 character at the end of the string,A string type string acts as a single object with individual char entities accessible only through specific string class functions A char array is less robust but allows direct access to specific char entities,1
2657,The char will automatically add a null 0 character at the end of the string,In arrays strings are stored as a characters char each character of string will be stored in each memory location of the array while string of characters is only one memory location,1
2658,The char will automatically add a null 0 character at the end of the string,string of characters that is read into a variable of type string includes,0
2659,the type char has a null n element at the very end,the type char has a null n element at the very end,2
2660,the type char has a null n element at the very end,The programmer must provide the null terminating character in a string of characters using type char and must also ensure that the array is large enough to contain the input string of characters and the null terminating character,2
2661,the type char has a null n element at the very end,String of characters are followed by a null statement type string is for example string s;,2
2662,the type char has a null n element at the very end,The character array has an end of line character at the end of it,2
2663,the type char has a null n element at the very end,Type char may contain a null value as the last element whereas type string will not,2
2664,the type char has a null n element at the very end,a string char adds a null value to the end of the string,2
2665,the type char has a null n element at the very end,char array needs an end character signature and is made up of characters each separate from each other a string is an object in itself with a value that the user enters,2
2666,the type char has a null n element at the very end,an array of characters has one more element its last element the terminating element or null which doesnt exist in a variable of type string,2
2667,the type char has a null n element at the very end,A string of characters is a specific variable type that has no extra data at the end A string of type char is all the characters and a null 0,2
2668,the type char has a null n element at the very end,when the characters are put in a char array there is also a null terminating character added to the end 0,2
2669,Divide a problem into smaller subproblems solve them recursively and then combine the solutions into a solution for the original problem,For example we have an array on n elements the divide and conquer splits up the array into equal halves and repeats this process until each element is by itself,1
2670,Divide a problem into smaller subproblems solve them recursively and then combine the solutions into a solution for the original problem,The divide and conquer paradigm divides a problem into smaller and smaller portions that are easier to solve,1
2671,Divide a problem into smaller subproblems solve them recursively and then combine the solutions into a solution for the original problem,Divide elements recur then conquer which works in merge sort and quicksort,1
2672,Divide a problem into smaller subproblems solve them recursively and then combine the solutions into a solution for the original problem,To divide and conquer you divide the program in half once or multiple times to the extent that the program as a whole is easier to work in groups to solve the problem,1
2673,Divide a problem into smaller subproblems solve them recursively and then combine the solutions into a solution for the original problem,to divide one larger string or line of values and sepereate them into smallers lines to easily manipulate them and then replace them in the order in which they should be,1
2674,Divide a problem into smaller subproblems solve them recursively and then combine the solutions into a solution for the original problem,Split the problem into smaller more manageable parts and proceed to address the smaller problems,1
2675,Divide a problem into smaller subproblems solve them recursively and then combine the solutions into a solution for the original problem,dived and conquer is the breaking up of a large complex program into small easy to solve components,1
2676,Divide a problem into smaller subproblems solve them recursively and then combine the solutions into a solution for the original problem,Dividing a larger problem into the smallest incident of the problem and solving the smallest incident,1
2677,Divide a problem into smaller subproblems solve them recursively and then combine the solutions into a solution for the original problem,Break up very large data structures into smaller sub units that are easier to manipulate,1
2678,Divide a problem into smaller subproblems solve them recursively and then combine the solutions into a solution for the original problem,The divide and conquer technique is where it takes the sorting algorithm and breaks up the array into smaller elements of the array to tackle the problem and run the algorithm,1
2679,Divide a problem into smaller subproblems solve them recursively and then combine the solutions into a solution for the original problem,The divide and conquer paradigm divides the problem into two pieces and works on each piece separately allowing for a faster approach to 2 separate smaller problems,1
2680,Divide a problem into smaller subproblems solve them recursively and then combine the solutions into a solution for the original problem,The idea is to split the problem into half and solve for the smaller split problems,1
2681,Divide a problem into smaller subproblems solve them recursively and then combine the solutions into a solution for the original problem,Divide and conquer refers to abstraction the act of separating large complex problems into smaller easier problems that can be solved by a relatively simple algorithm,1
2682,Divide a problem into smaller subproblems solve them recursively and then combine the solutions into a solution for the original problem,It takes a large problem and splits it into two or more easier or faster solutions and makes for better readability,1
2683,Divide a problem into smaller subproblems solve them recursively and then combine the solutions into a solution for the original problem,it is the taking of a larger problem and splitting it into simpler smaller problems,1
2684,Divide a problem into smaller subproblems solve them recursively and then combine the solutions into a solution for the original problem,It divides the problem into singular units and works on the problem piece by piece until the problem is solved,1
2685,Divide a problem into smaller subproblems solve them recursively and then combine the solutions into a solution for the original problem,a divide and conquer paradigm takes some data divides it into two parts and works on each part indiviually until the item is found,1
2686,Divide a problem into smaller subproblems solve them recursively and then combine the solutions into a solution for the original problem,The idea of divide and conquer is to take a large problem split it into n smaller problems making the program easier to read and modify,1
2687,Divide a problem into smaller subproblems solve them recursively and then combine the solutions into a solution for the original problem,the divide and conquer paradigm is a recursive solution that keeps dividing the problem into halves until a base case is reached,1
2688,Divide a problem into smaller subproblems solve them recursively and then combine the solutions into a solution for the original problem,divide the array in half sort each half then sort them back in one array,1
2689,Divide a problem into smaller subproblems solve them recursively and then combine the solutions into a solution for the original problem,You take a class and break down everything it is supposed to do into easily managed functions,1
2690,Divide a problem into smaller subproblems solve them recursively and then combine the solutions into a solution for the original problem,this is shown by the use of cpp and header files by splitting the program up into smaller subsections of individual code it becomes easier to write and keep up with as opposed to having all of your code in one file,1
2691,Divide a problem into smaller subproblems solve them recursively and then combine the solutions into a solution for the original problem,it is the separating of large program into smaller classes then until target is reached,1
2692,Divide and coquer means dividing a problem into 2 plus problems which are solved and then merged back together for a final solution to the whole problem,Divide and coquer means dividing a problem into 2 plus problems which are solved and then merged back together for a final solution to the whole problem,2
2693,Divide and coquer means dividing a problem into 2 plus problems which are solved and then merged back together for a final solution to the whole problem,Take a problem and divide it into a smaller problem and solve that smaller problem or divide it into a smaller problem and solve it thus solving the whole problem in the process,2
2694,Divide and coquer means dividing a problem into 2 plus problems which are solved and then merged back together for a final solution to the whole problem,The divide and conquer paradigm splits a large problem into simpler problems at which point it solves the simpler problems and merges the simple solutions together to answer the large problem,2
2695,Divide and coquer means dividing a problem into 2 plus problems which are solved and then merged back together for a final solution to the whole problem,smaller parts are easier to compare than comparing the whole so it divides the problem down in halves until it can easily compare then works backwards putting it back together to give the solution,2
2696,Divide and coquer means dividing a problem into 2 plus problems which are solved and then merged back together for a final solution to the whole problem,dividing and conquering means breaking a problem into two smaller problems solving both of those and putting the two solutions together,2
2697,Divide and coquer means dividing a problem into 2 plus problems which are solved and then merged back together for a final solution to the whole problem,Divide the big problem into small problem solve small problem and join small solved elements of the problem if there is two ore more elements in the array divide the array into parts and compare the elements after comperison conquer the elements If array have n element first half have n divided by 2 elements,2
2698,Divide and coquer means dividing a problem into 2 plus problems which are solved and then merged back together for a final solution to the whole problem,When a problem is too big split it into smaller problems of the same type and solve those then from the solutions of the smaller problem give the solution to the larger original problem,2
2699,The address of a location in memory,A pointer is an alias to an object in memory,1
2700,The address of a location in memory,its like a variable but only holds an address in meomrry not the physical address,1
2701,A variable in memory that hold the address of another memory location to which it points too,A pointer is a variable that contains the memory address of a given value,2
2702,A variable in memory that hold the address of another memory location to which it points too,A pointer is a variable that stores the address of another variable,2
2703,A variable in memory that hold the address of another memory location to which it points too,A pointer is a variable that holds a memory address or location of another variable,2
2704,A variable in memory that hold the address of another memory location to which it points too,A data type that points to an address in memory which contains certain information Used for pass by reference to save memory,2
2705,A variable in memory that hold the address of another memory location to which it points too,A pointer is a variable that points to the address location of another variable Represented by STAR,2
2706,A variable in memory that hold the address of another memory location to which it points too,A pointer is a variable that holds the address of a given variable and of a given data type,2
2707,A variable in memory that hold the address of another memory location to which it points too,pointer is a programming data type whose value points to another value stored in computer memory by its address,2
2708,A variable in memory that hold the address of another memory location to which it points too,A data type that points to a specific memory address,2
2709,A variable in memory that hold the address of another memory location to which it points too,Its like a variable except it only holds the address in memory of the variable not the physical information,2
2710,A variable in memory that hold the address of another memory location to which it points too,a pointer is a reference to a memory location,2
2711,A variable in memory that hold the address of another memory location to which it points too,A pointer is a variable that contains a memory address for something that you can use such as a value array or even a function,2
2712,A variable in memory that hold the address of another memory location to which it points too,a form of storing data that keeps the location in memory of an data type or object,2
2713,A variable in memory that hold the address of another memory location to which it points too,it contains a object memory address,2
2714,A variable in memory that hold the address of another memory location to which it points too,variable that contains the memory address of a data object,2
2715,A variable in memory that hold the address of another memory location to which it points too,A pointer is an element that references a memory location,2
2716,A variable in memory that hold the address of another memory location to which it points too,an object that points to a specific place in memory where a variable or value is stored,2
2717,A variable in memory that hold the address of another memory location to which it points too,A pointer is a variable that points to an address in memory which contains some data The pointer does not contain or point to any data only a memory address,2
2718,A variable in memory that hold the address of another memory location to which it points too,Pointer is a variable which have a memory address of a variable,2
2719,A variable in memory that hold the address of another memory location to which it points too,a variable that holds the address of another variable and can access the contents of the variable,2
2720,A variable in memory that hold the address of another memory location to which it points too,A data type that stores the memory address of another variable,2
2721,The height of the tree,Given n elements it would take n divided by 2 steps to find the search criteria,0
2722,The height of the tree,Depends on the location of the node you are looking for If it is the root it is one step else If it is smaller than the current you are on node you go to the left If it is larger than the current node you are on go to the right,1
2723,The height of the tree,2 to the power of n where n is the of levels the binary tree has,1
2724,The height of the tree,The number of steps to search a node is the function n minus 1,1
2725,The height of the tree,It would take n divided by 2 elements given n,0
2726,The height of the tree,N n being the number of nodes,1
2727,The height of the tree,3 steps at most There are 3 cases,0
2728,The height of the tree,three steps visit the root node then go to right subtree after visiting right subtree visit left subtree,1
2729,The height of the tree,2n 1,1
2730,Log n where n is the number of nodes,Log n where n is the number of nodes,2
2731,Log n where n is the number of nodes,log n steps,2
2732,Log n where n is the number of nodes,It is the same as the height of the tree,2
2733,Log n where n is the number of nodes,O Log n,2
2734,Log n where n is the number of nodes,If the binary search tree is constructed efficiently best case scenario is O log n time Where n is the number of items in the tree If the binary search tree is constructed poorly with for instance the root of the tree being 1 and progressing downwards and to the right its children are each more than the last : you have a one way linear linked list That worse case scenario would be a full traversal at O n time Where n is the number of items in the tree,2
2735,Log n where n is the number of nodes,depending on the way that the tree is ordered it could be anywhere between log n and N steps,2
2736,Log n where n is the number of nodes,worst case scenario equals the number of levels of the tree ie : the node at the farthest position from the root node best case equals 1 step if its the root node,2
2737,Log n where n is the number of nodes,log n where n equals the total number of nodes in the tree,2
2738,Log n where n is the number of nodes,to find a node in a binary search tree takes at most the same number of steps as there are levels of the tree,2
2739,Log n where n is the number of nodes,it takes at most h steps where h is the height of the tree,2
2740,Implement the algorithm and measure the physical running time,Try several sets of data on an algorithm that includes worst case best case and random cases Also try and run the same program on a different computer with the same specs,1
2741,Implement the algorithm and measure the physical running time,time complexity using big O logarthmic O log n linear O n exponential O n to the power of 2 quadratic O n to the power of k k is greater than or equal to 1 Polynomial O a to the power of n n is greater than 1,1
2742,Implement the algorithm and measure the physical running time,Using some sort of counting principle of the number of operations performed in an algorithm,1
2743,Implement the algorithm and measure the physical running time,measuring the relationship of running an algorithm with different input sizes,1
2744,Implement the algorithm and measure the physical running time,Oposite of a theoretical assessment of the algorithm to determine runtime but to run the code first to determine the the runtime This is not recommended because it is a limited test It does not include all possibilities of the data nor the hardware used to process the data,1
2745,Implement the algorithm and measure the physical running time,The experimental approach for measuring the running time is by using the Big O equation which tells you the running time,1
2746,Implement the algorithm and measure the physical running time,keep a value of how many operations it takes and add to this value each time a function is called,1
2747,Implement the algorithm and measure the physical running time,BIG OH,1
2748,Implement the algorithm and measure the physical running time,You run a program with different data sizes like 10 to the power of x As you increase x and measure the completion speeds for the program you can find patterns and attempt the measure the running time It is very important to keep the same software and hardware however which makes experimental testing inferior to theoretical in the eyes of most,1
2749,Implement the algorithm and measure the physical running time,to run the program through and see how many times each thing is called and the runtime of each function is based on that,1
2750,Implement the algorithm and measure the physical running time,the number of times a specific segments get called per unit work,1
2751,Implement the algorithm and measure the physical running time,For every call into memory add or multiply it into an equation of type O n,1
2752,Implement the algorithm and measure the physical running time,adding a time marker at the before the algorithm is called and another time marker immediately after so that you have the change in time then you can calculate the efficiency by the speed of the computers cpu,1
2753,Implement the algorithm and measure the physical running time,Big O h notation,1
2754,Implement the algorithm and measure the physical running time,In experimental terms the running time of an algorithm is measured by the number of operations required to complete the function This number can usually be expressed in big O notation,1
2755,Implement the algorithm and measure the physical running time,run the code for n times and get average values drop the constant and lowest number for example if f x equals 3n plus 1 the running time will bef f x equals O n,1
2756,Implement the algorithm and measure the physical running time,adding up the number of operations performed based on the worst case possible,1
2757,Implement the algorithm and measure the physical running time,running the input with various inputs measuring the running time with system time,1
2758,Experimental means you would actually write a prototype of the algorithm and measure the time it takes to run given certain parameters,Experimental means you would actually write a prototype of the algorithm and measure the time it takes to run given certain parameters,2
2759,Experimental means you would actually write a prototype of the algorithm and measure the time it takes to run given certain parameters,You create and run the algorithm multiple times while measuring the amount of time it takes you then average the results,2
2760,Experimental means you would actually write a prototype of the algorithm and measure the time it takes to run given certain parameters,Running the program with various input data and measuring the running time with system time,2
2761,Experimental means you would actually write a prototype of the algorithm and measure the time it takes to run given certain parameters,the experimental approach measures actual running time in t t equals seconds,2
2762,Experimental means you would actually write a prototype of the algorithm and measure the time it takes to run given certain parameters,to measure the actual time of the program to run and calculate the running time using the input and operations done,2
2763,Experimental means you would actually write a prototype of the algorithm and measure the time it takes to run given certain parameters,trying it with different sets of inputs and measuring the amount of time that the algorithm actually takes,2
2764,log log n; 2 to the power of log n; n to the power of 2; n to the power of 3; n!,log log n n to the power of 2 n to the power of 3 2 to the power of log n n!,1
2765,log log n; 2 to the power of log n; n to the power of 2; n to the power of 3; n!,log logn 2 to the power of logn n! n to the power of 3 n to the power of 2,1
2766,log log n; 2 to the power of log n; n to the power of 2; n to the power of 3; n!,log log n ; 2 to the power of log n ; n! ; n to the power of 2; n to the power of 3;,1
2767,log log n; 2 to the power of log n; n to the power of 2; n to the power of 3; n!,2 to the power of log n log log n n! n to the power of 2 n to the power of 3,0
2768,log log n; 2 to the power of log n; n to the power of 2; n to the power of 3; n!,log log n ; n! ; n to the power of 2; n to the power of 3; n to the power of log n,1
2769,log log n; 2 to the power of log n; n to the power of 2; n to the power of 3; n!,2 to the power of log n log log n n to the power of 2 n to the power of 3 n!,1
2770,log log n; 2 to the power of log n; n to the power of 2; n to the power of 3; n!,from lowest to longest log log n ; 2 to the power of log n ; n! ; n to the power of 2; n to the power of 3;,1
2771,log log n; 2 to the power of log n; n to the power of 2; n to the power of 3; n!,2 to the power of log n n to the power of 3 n to the power of 2 log log n n!,1
2772,log log n; 2 to the power of log n; n to the power of 2; n to the power of 3; n!,linear logarithmic exponential linear linear,0
2773,log log n; 2 to the power of log n; n to the power of 2; n to the power of 3; n!,quickest at top slowest at bottom log log n n to the power of 2 n to the power of 3 2 to the power of log n n!,1
2774,log log n; 2 to the power of log n; n to the power of 2; n to the power of 3; n!,longest to shortest : n to the power of 3; n! ; n to the power of 2; 2 to the power of log n ; log log n,1
2775,log log n; 2 to the power of log n; n to the power of 2; n to the power of 3; n!,2 to the power of log n n to the power of 2 to the power of 3 log long n n!,1
2776,log log n; 2 to the power of log n; n to the power of 2; n to the power of 3; n!,log log n ; n to the power of 2; n to the power of 3; n! ; 2 to the power of log n,1
2777,log log n; 2 to the power of log n; n to the power of 2; n to the power of 3; n!,n to the power of 2; n! ; n to the power of 3; 2 to the power of log n ; log log n,1
2778,log log n; 2 to the power of log n; n to the power of 2; n to the power of 3; n!,log long n 2 to the power of log n ; n to the power of 2 n to the power of 3;,1
2779,log log n; 2 to the power of log n; n to the power of 2; n to the power of 3; n!,log log n 2 to the power of log n n to the power of 2 n to the power of 3 n!,2
2780,log log n; 2 to the power of log n; n to the power of 2; n to the power of 3; n!,log logn 2 to the power of log n n to the power of 2 n to the power of 3 n!,2
2781,log log n; 2 to the power of log n; n to the power of 2; n to the power of 3; n!,this goes from largest to smallest : n! n to the power of 3 n to the power of 2 2 to the power of log n log log n,2
2782,log log n; 2 to the power of log n; n to the power of 2; n to the power of 3; n!,log log n ; 2 to the power of log n ; n to the power of 2; n to the power of 3; n!,2
2783,log log n; 2 to the power of log n; n to the power of 2; n to the power of 3; n!,From least to greatest : log log n 2 to the power of log n n to the power of 2 n to the power of 3 n!,2
2784,log log n; 2 to the power of log n; n to the power of 2; n to the power of 3; n!,log log n 2 to the power of log n is just n n to the power of 2 n to the power of 3 n!,2
2785,log log n; 2 to the power of log n; n to the power of 2; n to the power of 3; n!,from lowest to highest 1 long long n 2 minus 2 to the power of log n 3 minus n to the power of 2 4 minus N to the power of 3 5 minus n!,2
2786,log log n; 2 to the power of log n; n to the power of 2; n to the power of 3; n!,worst to best : n! n to the power of 3 n to the power of 2 2 to the power of log n log log n,2
2787,It selects the minimum from an array and places it on the first position then it selects the minimum from the rest of the array and places it on the second position and so forth,Compare the largest element to the front element and swap data according to value if needed,1
2788,It selects the minimum from an array and places it on the first position then it selects the minimum from the rest of the array and places it on the second position and so forth,Selection sort is a sorting algorithm that divides a list in half and has two lists It then compares the first elements in both these lists and puts these elements in another list having the smaller element before the bigger one,1
2789,It selects the minimum from an array and places it on the first position then it selects the minimum from the rest of the array and places it on the second position and so forth,Selection sort works by finding the smallest element and then compares it with the largest and sorts the elements,1
2790,It selects the minimum from an array and places it on the first position then it selects the minimum from the rest of the array and places it on the second position and so forth,Selection sort is usually a recursive sorting method where you divide the elements to be sorted in half repeatedly You then sort the smallest case then work your way up sorting each until they are all sorted,1
2791,It selects the minimum from an array and places it on the first position then it selects the minimum from the rest of the array and places it on the second position and so forth,goes to the middle of the list checks to see if it is greater or less then the value given and moves through the list accordingly to add the value into the proper place,1
2792,It selects the minimum from an array and places it on the first position then it selects the minimum from the rest of the array and places it on the second position and so forth,selection sort finds the lowest element in the data set and places it behind the pivot point,1
2793,It selects the minimum from an array and places it on the first position then it selects the minimum from the rest of the array and places it on the second position and so forth,Selection sort iterates through the array one element at a time seeking the least value from the right and replacing the current value with it,1
2794,It selects the minimum from an array and places it on the first position then it selects the minimum from the rest of the array and places it on the second position and so forth,it runs through the list and finds the smallest or largest value and puts it at the appropriate position,1
2795,It selects the minimum from an array and places it on the first position then it selects the minimum from the rest of the array and places it on the second position and so forth,pick a number and set all values less than that number to the left while all numbers on the right of that number is larger,1
2796,It selects the minimum from an array and places it on the first position then it selects the minimum from the rest of the array and places it on the second position and so forth,It takes the largest item in the unsorted array and swaps it with last item in the unsorted array,1
2797,It selects the minimum from an array and places it on the first position then it selects the minimum from the rest of the array and places it on the second position and so forth,by selecting the first object and comparing it with the next objects to find one that is smaller if it does it switches the two then it comes back the other way and sees if the objects previous to the last one is greater if it does it switches them it does this while decreasing the range it looks at until it finishes in the middle,1
2798,It selects the minimum from an array and places it on the first position then it selects the minimum from the rest of the array and places it on the second position and so forth,Selection sorts works by going through a certain list Goes through the unsorted list and selecting the largest item in the list and placing it in a sorted array There are two arrays unsorted and sorted Complete these steps until the list is sorted,1
2799,It selects the minimum from an array and places it on the first position then it selects the minimum from the rest of the array and places it on the second position and so forth,selection sort works by pulling all of the values off to the side leaving one value in the list It will then insert a value into the list if the value is bigger it will go to the right if smaller if will go to the left,1
2800,It selects the minimum from an array and places it on the first position then it selects the minimum from the rest of the array and places it on the second position and so forth,select an element compare it with 2nd element if it is greater swap it,1
2801,It selects the minimum from an array and places it on the first position then it selects the minimum from the rest of the array and places it on the second position and so forth,it selects the smallest element in a list and switches it with the element in its correct position then it selects the next smallest and does the same,1
2802,It selects the minimum from an array and places it on the first position then it selects the minimum from the rest of the array and places it on the second position and so forth,It starts at the first element and replaces it with the smallest element found to the right It then repeats with the next element in the list,1
2803,It selects the minimum from an array and places it on the first position then it selects the minimum from the rest of the array and places it on the second position and so forth,selection sort is when you pick a data member and put it in a new array then you pick another data member and put it in order with the new array then pick another and insert it in the correct place in the new array etc etc,1
2804,It selects the minimum from an array and places it on the first position then it selects the minimum from the rest of the array and places it on the second position and so forth,it searches through the entire data set for the best element to go in the current position then it moves up a position and searches through the remainder of the set for the best element for the new position,1
2805,It selects the minimum from an array and places it on the first position then it selects the minimum from the rest of the array and places it on the second position and so forth,selection sort iterates through the array one element a time searching for the right and replacing current value with it,1
2806,it scans the list and selects the smallest largest element and places it in the front increment the curPtr by one scan the list again for the next smallest largest element and place it in with respect with the other sorted elements,it scans the list and selects the smallest largest element and places it in the front increment the curPtr by one scan the list again for the next smallest largest element and place it in with respect with the other sorted elements,2
2807,it scans the list and selects the smallest largest element and places it in the front increment the curPtr by one scan the list again for the next smallest largest element and place it in with respect with the other sorted elements,Selection sort searches the array for the lowest value and swaps it with the first value in the array Then searches for the next lowest value and swaps it with the second item in the array and so on,2
2808,it scans the list and selects the smallest largest element and places it in the front increment the curPtr by one scan the list again for the next smallest largest element and place it in with respect with the other sorted elements,Iterate through the list assume list of integers find the smallest one and put it in a separate sorted list then traverse again and find the next smallest and move it to the sorted section and repeat until you run out of elements to sort,2
2809,it scans the list and selects the smallest largest element and places it in the front increment the curPtr by one scan the list again for the next smallest largest element and place it in with respect with the other sorted elements,selection sort selects the smallest element out of the list then the second smallest and sorts them acordingly,2
2810,it scans the list and selects the smallest largest element and places it in the front increment the curPtr by one scan the list again for the next smallest largest element and place it in with respect with the other sorted elements,You select the smallest element and place it on the left You select the smallest element and sort it with respect the the item already on the left You continue this till the end of the collection of items,2
2811,it scans the list and selects the smallest largest element and places it in the front increment the curPtr by one scan the list again for the next smallest largest element and place it in with respect with the other sorted elements,A selection sort scrolls through the data structure looking for the lowest or highest unsorted piece of data moves it to the held spot increments that spot by one and starts the process over,2
2812,it scans the list and selects the smallest largest element and places it in the front increment the curPtr by one scan the list again for the next smallest largest element and place it in with respect with the other sorted elements,Selection sort traverses an unsorted array looking for the smallest value when it is found it is put at the beginning of the unsorted array Performed several times this will output a sorted array,2
2813,it scans the list and selects the smallest largest element and places it in the front increment the curPtr by one scan the list again for the next smallest largest element and place it in with respect with the other sorted elements,Selection sort sorts an array one element at at time It first finds the element with the smallest key and puts it into the first location within its array or list then finds the next smallest and puts it in the second location and so on,2
2814,Linked lists are dynamic structures which allow for a variable number of elements to be stored,Inserts into a linked list are far cheaper than an insert into an array With an array all items after the one being inserted must me shifted with a linked list only the pointers are replaced,1
2815,A link list can grow to a infinite size as a array has a fixes size,A link list can grow to a infinite size as a array has a fixes size,2
2816,A link list can grow to a infinite size as a array has a fixes size,The advantage of linked lists is that they are not limited in size like arrays,2
2817,A link list can grow to a infinite size as a array has a fixes size,Linked Lists can be of variable size where arrays have fixed size,2
2818,A link list can grow to a infinite size as a array has a fixes size,Linked lists do not have a definite size They can be as big or as small as needed and they do not have to allocate extra memory for elements you do not need Arrays size must be defined,2
2819,A link list can grow to a infinite size as a array has a fixes size,a linked list has a dynamic size but an array only has a fixed size and takes allot of extra operations to increase its size,2
2820,A link list can grow to a infinite size as a array has a fixes size,You do not have to predetermine your list size as you do with arrays Linked list have the ability to be as large as you want them adding memory as needed,2
2821,A link list can grow to a infinite size as a array has a fixes size,The main advantage to a linked list is that it can have it is size adjusted during runtime,2
2822,A link list can grow to a infinite size as a array has a fixes size,Linked lists are able to grow in size So elements can be added to the list,2
2823,A link list can grow to a infinite size as a array has a fixes size,Linked lists are not confined to a specific size and can have elements added and removed far easier They are also easier to traverse,2
2824,A link list can grow to a infinite size as a array has a fixes size,Linked lists may be dynamically grown,2
2825,A link list can grow to a infinite size as a array has a fixes size,Linked lists are very dynamic in that they can change and be added or subtracted to very easily because they are not linear in memory Arrays are pre specified in size to be cast over a certain amount of disk space This makes insertion into Arrays difficult because all elements must be shifted and if you reach the end of the array you are done even if you have more data to input Linked Lists do not run into these problems,2
2826,A link list can grow to a infinite size as a array has a fixes size,linked lists have an indefinite size whereas arrays are a specific size,2
2827,A link list can grow to a infinite size as a array has a fixes size,Linked lists have no predefined length and thus you can have virtually unlimited items in that list,2
2828,A link list can grow to a infinite size as a array has a fixes size,They grow dynamically unlike the fixed size array,2
2829,A link list can grow to a infinite size as a array has a fixes size,you can add as many nodes as you like without having to specify a list size if an array gets too big you have to copy its entire contents to another larger array to get more room,2
2830,A link list can grow to a infinite size as a array has a fixes size,Linkded list does not have a fixed size Arrays have a fixed size,2
2831,A link list can grow to a infinite size as a array has a fixes size,Linked lists have a dynamic size where as arrays have a static size,2
2832,A link list can grow to a infinite size as a array has a fixes size,The primary advantage of linked lists over arrays is their ability to become larger or smaller as data is added and removed from the list whereas arrays may waste memory for small data sets and run out of space for large data sets,2
2833,A link list can grow to a infinite size as a array has a fixes size,Array have fixed size in Link List are flexible for adding or deleting an element,2
2834,A link list can grow to a infinite size as a array has a fixes size,Linked lists can be dynamically allocated and their size can change as needed,2
2835,A link list can grow to a infinite size as a array has a fixes size,linked lists do not have to have a specified size they are easier to add to and remove from,2
2836,A link list can grow to a infinite size as a array has a fixes size,they dont have a fixed size no shiftnig needs to be done for insertion or deletion,2
2837,A link list can grow to a infinite size as a array has a fixes size,linked list many be dynamically grown It has not limit,2
2838,A data structure that stores elements following the first in first out principle The main operations in a queue are enqueue and dequeue,First in first out,1
2839,A data structure that stores elements following the first in first out principle The main operations in a queue are enqueue and dequeue,It is a particular set of entities that are put in to a certain order by the enqueue and the dequeue functions,1
2840,A data structure that stores elements following the first in first out principle The main operations in a queue are enqueue and dequeue,A queue is a data type that operates under a FILO First In Last Out method This means that the first element inserted into the queue is the first element removed,1
2841,A data structure in C plus plus where the the first element in the queue is the first element taken out of the queue,A data structure in C plus plus where the the first element in the queue is the first element taken out of the queue,2
2842,A data structure in C plus plus where the the first element in the queue is the first element taken out of the queue,A queue is an abstract data type that performs operations on both ends of the list and exhibits first in first out behavior,2
2843,A data structure in C plus plus where the the first element in the queue is the first element taken out of the queue,A queue is an abstract data type that involves putting an element at the back of the list Queues use the FIFO first in first out idea where the first element in the list is the first that comes out,2
2844,A data structure in C plus plus where the the first element in the queue is the first element taken out of the queue,A data structure that implements first in first out The element that has been there the longest is the first to get served,2
2845,A data structure in C plus plus where the the first element in the queue is the first element taken out of the queue,a data structure that inserts elements at the end of it and removes elements from the front,2
2846,A data structure in C plus plus where the the first element in the queue is the first element taken out of the queue,A queue is a collection of elements with the characteristics of first in first out FIFO The first item in is the first item out All additional items are added to the end of the list,2
2847,A data structure in C plus plus where the the first element in the queue is the first element taken out of the queue,A queue is a data structure that inserts data into a FIFO configuration that is data input to the structure is always at it is end and data taken is always from the beginning,2
2848,A data structure in C plus plus where the the first element in the queue is the first element taken out of the queue,A queue is like a stack except it follows FIFO First in first out,2
2849,A data structure in C plus plus where the the first element in the queue is the first element taken out of the queue,A queue is a data structure where the first node in is the first node out,2
2850,A data structure in C plus plus where the the first element in the queue is the first element taken out of the queue,A queue is a First in First out data structure much like a line for a movie theatre The first object in line is the first object to be handled or enacted upon,2
2851,A data structure in C plus plus where the the first element in the queue is the first element taken out of the queue,its a lot like a stack except that the first item put into the list is the first item to be taken from the list,2
2852,A data structure in C plus plus where the the first element in the queue is the first element taken out of the queue,a first in first out list of items like if you put 5 4 3 2 and 1 in the queue it will when you dequeue items remove the items in the same order as put in so thus it will put out 5 4 3 2 and 1 in that exact order,2
2853,A data structure in C plus plus where the the first element in the queue is the first element taken out of the queue,A linked list with a First In Out structure dequeue at the head of the list enqueue at the end of the list,2
2854,A data structure in C plus plus where the the first element in the queue is the first element taken out of the queue,a list of objects that follow the rule first in first out essentially a linked list that goes in order of the first object in the list is the first to be taken off,2
2855,A data structure in C plus plus where the the first element in the queue is the first element taken out of the queue,A queue is an abstract data type that is based off of the priniple of first in first out FIFO The first item inserted into the list will the first item taken out,2
2856,A data structure in C plus plus where the the first element in the queue is the first element taken out of the queue,It is a first in first out data structure It can be implemented with either a linked list or an array,2
2857,A data structure in C plus plus where the the first element in the queue is the first element taken out of the queue,an ordered list that performs task in the order of first in first out adding items to the queue places items behind the rest of them taking items off the queue takes the one that has waited the longest,2
2858,A data structure in C plus plus where the the first element in the queue is the first element taken out of the queue,A queue is a linear first in first out data structure Data must be accessed in the same order it was put into the queue so only the oldest item in the queue is accessible at any time Main functions defined are enqueue and dequeue,2
2859,A data structure in C plus plus where the the first element in the queue is the first element taken out of the queue,Queue is a buffer it follows the rule of First In and First out Queue is very useful in computer science for scheduleing,2
2860,A data structure in C plus plus where the the first element in the queue is the first element taken out of the queue,Is a list of items where the the user only has access to the first element and each new element is added at the end,2
2861,A data structure in C plus plus where the the first element in the queue is the first element taken out of the queue,a queue is a list of data that follows the fifo principle an example of this would be when you get into a line at a movie theater the first one there gets to buy a ticket first,2
2862,A data structure in C plus plus where the the first element in the queue is the first element taken out of the queue,A queue is a data structure that holds a set of objects which has a FIFO first in first out priority,2
2863,push and pop,push pop search isEmpty,1
2864,push and pop,Pop which removes the head or least recently inserted node from the stack Push which inserts a new node at the head of the stack,2
2865,push and pop,The Push function and the Pop function,2
2866,push and pop,push puts an element on the stack pop takes an element off the stack,2
2867,push and pop,Push and Pop Push adds an element to the stack while Pop removes the top element from a stack,2
2868,push and pop,Push Pop isEmpty isFull Maybe List to show all elements or an operation to count how many elements in the stack,2
2869,push and pop,pop push,2
2870,push and pop,isempty push and pop along with usually,2
2871,push and pop,push and pop push puts objects into the stack and pop takes them out following the first in last out rule,2
2872,push and pop,The main operations in a stack are push and pop Push adds an item to the top of the stack pop removes the top item from the stack,2
2873,push and pop,push which adds an item to the top of the stack and pop which takes the first item off the top to the stack,2
2874,push and pop,the main functions defined for a stack are push which puts an element on the top of the stack and pop which removes an item from the top,2
2875,push and pop,Push Pop Full IsEmpty,2
2876,push and pop,Push Pop,2
2877,push and pop,push Add an element to the top of the stack pop remove the top element from the stack,2
2878,A walk around the tree starting with the root where each node is seen three times : from the left from below from the right,When you traverse a tree of any size you will visit each node three times Its on the order of 3n or O n running time,1
2879,A walk around the tree starting with the root where each node is seen three times : from the left from below from the right,Where you visit the in order according to its data value,1
2880,A walk around the tree starting with the root where each node is seen three times : from the left from below from the right,It is a tree that shows how it functions It contains parents children siblings ancestors and descendents The use of tree type algorithm is also an alternative sorting algorithm,1
2881,A walk around the tree starting with the root where each node is seen three times : from the left from below from the right,Start from the root circle around the whole tree naming each node as you see it,1
2882,A walk around the tree starting with the root where each node is seen three times : from the left from below from the right,To start from the root traveling left and visiting ever child along the way till you return to the root from the right,1
2883,A walk around the tree starting with the root where each node is seen three times : from the left from below from the right,Traversing a tree down to it is terminal child and then all of it is siblings then it traverses up the terminal child parent and all of it is siblings repeating the first step if those siblings have children until the root node has been visited,1
2884,A walk around the tree starting with the root where each node is seen three times : from the left from below from the right,The Euler tour traversal of a tree the function that iteratively keeps track of the pointer on each node,1
2885,A walk around the tree starting with the root where each node is seen three times : from the left from below from the right,You travel the outside edge of the tree clockwise while naming each node,1
2886,A walk around the tree starting with the root where each node is seen three times : from the left from below from the right,The Euler tour traverses through the tree in a rubber band style shape,1
2887,A walk around the tree starting with the root where each node is seen three times : from the left from below from the right,The Euler tour traversal of a tree is a specific way of navigating a tree that involves following the tree starting at the very top and moving along the left side of the tree first cupping in to visit the parents of children nodes It allows for each node to be visited from the left the right and the bottom The Euler tour first progresses to a left child if there is one then progresses to it is parent then it is next child then it is parent parent,1
2888,A walk around the tree starting with the root where each node is seen three times : from the left from below from the right,it starts node on the left of the root and then proceeds to visits each node in a left to right order visits the root and then proceeds to repeat the previous step on the right side of the tree,1
2889,A walk around the tree starting with the root where each node is seen three times : from the left from below from the right,Travel from the root to the farthest left child Backup travel the leftmost children in the right side repeat until reaching the rightmost child,1
2890,A walk around the tree starting with the root where each node is seen three times : from the left from below from the right,has preorder in order and postorder of a tree preorder equals puts the parent node in front of the child node s in order equals puts the parent node between the left child and right child node s postorder equals puts the parent node after the child node s,1
2891,A walk around the tree starting with the root where each node is seen three times : from the left from below from the right,The Euler traveral is when you go through a tree looking for nodes to put in the order of left root right Like inOrder traversal,1
2892,A walk around the tree starting with the root where each node is seen three times : from the left from below from the right,Euler tour traversal of a tree traverses down each branch straight to one leaf then starts again at the root and repeats until all elements have been traversed,1
2893,A walk around the tree starting with the root where each node is seen three times : from the left from below from the right,The Euler tour visits every node in a tree starting with the root and working around the tree counterclockwise in order post order and pre order traversals can be seen as variations of the Euler tour traversal,1
2894,A walk around the tree starting with the root where each node is seen three times : from the left from below from the right,The Euler traversal through the tree in a rubber band style shape,1
2895,The Euler tour traversal of a tree begins at the root and visits each node in the tree from the left then bottom then right sides,The Euler tour traversal of a tree begins at the root and visits each node in the tree from the left then bottom then right sides,2
2896,The Euler tour traversal of a tree begins at the root and visits each node in the tree from the left then bottom then right sides,An Euler traversal is a traversal that begins with the root and travels around the outside of the tree Each element in the tree is visited 3 times From the left from the bottom and from the right,2
2897,The Euler tour traversal of a tree begins at the root and visits each node in the tree from the left then bottom then right sides,to traverse going down to the left then go to the right of last children and back to the top kind of like going around the tree,2
2898,The Euler tour traversal of a tree begins at the root and visits each node in the tree from the left then bottom then right sides,You recursively visit every node on the list You visit the node from the left the bottom and from the right,2
2899,The Euler tour traversal of a tree begins at the root and visits each node in the tree from the left then bottom then right sides,the euler tour is a way to traverse a tree where you come into contact with each node three times from the left from the right and from the bottom,2
2900,Find the node then replace it with the leftmost node from its right subtree or the rightmost node from its left subtree,if root set root to NULL else if deleting right leaf set rightPtr of parent node to NULL else if deleting left leaf set leftPtr of parent node to NULL else if deleting a left or right subtree child node set the max leaf child in the left subtree as the new child node,1
2901,Find the node then replace it with the leftmost node from its right subtree or the rightmost node from its left subtree,Traverse the tree and find the node if the node has no children simply delete it; otherwise set the node data equal to the data of one of its children then set the pointer for that child to NULL,1
2902,Find the node then replace it with the leftmost node from its right subtree or the rightmost node from its left subtree,first attaching the elements from the node to be deleting to alternate nodes and then deleting that node delete node;,1
2903,Find the node then replace it with the leftmost node from its right subtree or the rightmost node from its left subtree,If you delete a node from a tree you have to link that nodes parents to the children of that node,1
2904,Find the node then replace it with the leftmost node from its right subtree or the rightmost node from its left subtree,Must delete the information that the node contains to free up memory or garbage collect and also delete the pointer in that node parent that points to the node you wish to delete,1
2905,Find the node then replace it with the leftmost node from its right subtree or the rightmost node from its left subtree,You traverse the tree till you find the node you are wanting to delete If the node has no children you delete it If the node has children before you delete you find the left most of its children and attach it to the root then you can delete the node,1
2906,Find the node then replace it with the leftmost node from its right subtree or the rightmost node from its left subtree,Link the to be deleted left child to the to be deleted parent left child pointer,1
2907,Find the node then replace it with the leftmost node from its right subtree or the rightmost node from its left subtree,The way you delete a node from a binary search tree is first you have take the root and then see the nodes that are coming from the root And delete the nodes and set the root to NULL,1
2908,Find the node then replace it with the leftmost node from its right subtree or the rightmost node from its left subtree,You remove the element from the tree and move the next highest element from the left into its place,1
2909,Find the node then replace it with the leftmost node from its right subtree or the rightmost node from its left subtree,In a binary search tree you must first establish a proper replacement for the node you are about to delete usually a child from the soon to be deleted node Once that replacement node has been found you simply reassign it to where the node that is going to be deleted is After the deleted node has been usurped you remove the deleted node from memory so it may be used again,1
2910,Find the node then replace it with the leftmost node from its right subtree or the rightmost node from its left subtree,It all depends on where the node is located If its a child it can just be deleted but for a node inside the tree it must be replaced with another node that works in its place,1
2911,Find the node then replace it with the leftmost node from its right subtree or the rightmost node from its left subtree,Create a temp Node Set temp values to the Node after head or NULL in the case of only head Node in the list Set head equal to temp Delete temp,1
2912,Find the node then replace it with the leftmost node from its right subtree or the rightmost node from its left subtree,by searching down the tree until you find the node and replacing the link to that node with the greatest child node on the left subtree or the least child node on the right subtree,1
2913,Find the node then replace it with the leftmost node from its right subtree or the rightmost node from its left subtree,Set the nodes to NULL where that it does not point to anything and the use the DELETE opertator to clear space from memory,0
2914,Find the node then replace it with the leftmost node from its right subtree or the rightmost node from its left subtree,You must first traverse the tree to find the appropriate value Then you must make sure that the node is a leaf node If it is then you can delete the pointer to that specific node,1
2915,Find the node then replace it with the leftmost node from its right subtree or the rightmost node from its left subtree,if the node is a leaf it can simply be deallocated or deleted from memory and its parent reference to it changed to NULL If the node has a single child the pointer to it should be made to point to its child before deleting the node Should the node have two children the easiest solution may be to copy the node entire subtree to a new array or tree delete the node and all descendants then add the elements taken from the subtree back into the main tree,1
2916,Find the node then replace it with the leftmost node from its right subtree or the rightmost node from its left subtree,You search the tree for the node using recursion When you find the node you determine whether it is a leaf or a internal node If it is a leaf you just delete it and set the parent pointer to that node to NULL If it is a node you replace the node with either of the children nodes,1
2917,Find the node then replace it with the leftmost node from its right subtree or the rightmost node from its left subtree,to delete the node you would have to link the children nodes that are connected to the node to be deleted to the remaining nodes of the tree in such a way that nodes on the right of the parent node are larger than the parent and nodes on the left of the parent node are smaller,1
2918,Find the node then replace it with the leftmost node from its right subtree or the rightmost node from its left subtree,if it has no children you just delete it if it only has one child just replace the node with whichever child it has if it has both children replace it with one of its children and send the other child down along the other side of the new node,1
2919,Find the node then replace it with the leftmost node from its right subtree or the rightmost node from its left subtree,pointer to the child and delete it has 2 children set the node to the child and delete it the node to th middle will then take its place,1
2920,you replace the node with the largest element of its left subtree or replace it with the smallest element of the right subtree,you replace the node with the largest element of its left subtree or replace it with the smallest element of the right subtree,2
2921,you replace the node with the largest element of its left subtree or replace it with the smallest element of the right subtree,the deletion of a node depends upon if it has children and if it is an AVL binary search tree Assuming it is not an AVL tree and the node being deleted has no children you just set its pointer to null If it has a left child or a right child exclusively that child replaces the deleted node if it has two children the left most child of the right sub tree or right most child of the left subtree will replace it,2
2922,you replace the node with the largest element of its left subtree or replace it with the smallest element of the right subtree,If the node is a leaf just set it is parent pointer to null and delete it if it has a single child set the parent pointer to the child and delete; if it has two children set the node to one of the middle children and remove that child from its previous position as a leaf rightmost child of the left subtree or leftmost child of the right subtree,2
2923,you replace the node with the largest element of its left subtree or replace it with the smallest element of the right subtree,if the node has no children delete it right away otherwise put either the furthest right node on the left side or the furthest left node on the right side in that place and perform a the above on that node to guarantee that it is children get handled properly,2
2924,you replace the node with the largest element of its left subtree or replace it with the smallest element of the right subtree,if the node is a leaf you set it is parent pointer to null if the node is in the tree you must replace the node with one in the tree : either the largest in the left of the tree or the smallest in the right of the tree this can be done recursively if needed,2
2925,Data members attributes and member functions,For us it is usually a set get and displayMessge or other messages that tell you what properties a class has but does not reveal its implementations You could have anything you want in your own class definition,1
2926,Data members attributes and member functions,The attributes of said class Also whether or not it is a subclass Also whether it is public private or protected,1
2927,Data members attributes and member functions,An object and data,1
2928,Data members attributes and member functions,It is specific class name includes only information defined by that class implementation details etc,1
2929,Data members attributes and member functions,the keyword class followed by they class name on the inside you declare public and private declarations of your class,1
2930,Data members attributes and member functions,A class definition typically includes function definitions,1
2931,Data members attributes and member functions,A constructor functions and variables that are accessible to by that class and possibly other classes depending on how they are done,1
2932,Data members attributes and member functions,public section and private section and there must be a semicolon to set the end,1
2933,Data members attributes and member functions,the class name and its public data types such as constructors methods functions,1
2934,Data members attributes and member functions,a constructor and several data members and at least one public data member or method,1
2935,Data members attributes and member functions,class name two curly prenthesis public and private,1
2936,Data members attributes and member functions,A class is an expanded concept of a data structure it holds both the data and the functions being executed,1
2937,Information telling the compiler what data members and member functions belong to the class,Information telling the compiler what data members and member functions belong to the class,2
2938,Information telling the compiler what data members and member functions belong to the class,Since class is user defined the body of the declaration can contain members that can be either data or function declarations and optionally access specifiers Example for specifiers would be public private and protected There is the keyword Class and the Class body is enclosed with brackets,2
2939,Information telling the compiler what data members and member functions belong to the class,Member functions and data members belonging to the class,2
2940,Information telling the compiler what data members and member functions belong to the class,It begins with Class followed by the class name then usually a constructor data members and member functions that delineates the class is included in any class definition,2
2941,Information telling the compiler what data members and member functions belong to the class,class variables function definitions for the class,2
2942,Data members can be accessed from any member functions inside the class defintion Local variables can only be accessed inside the member function that defines them,Data members are the data components of a particular class A member function are the functioning components of the class,1
2943,Data members can be accessed from any member functions inside the class defintion Local variables can only be accessed inside the member function that defines them,A field variable is a variable that is declared as a member of a class A local variable is avariable that isdeclared local to a method,1
2944,Data members can be accessed from any member functions inside the class defintion Local variables can only be accessed inside the member function that defines them,Data members are declared inside the class but outside of any member functions Unlike with local variables each object of the class keeps its own copy of the data members stored in memory,1
2945,Data members can be accessed from any member functions inside the class defintion Local variables can only be accessed inside the member function that defines them,Data member are variables that represent an attribute in a class definition Local variables declared in a function body cannot be used outside of that function body When a function terminates the values of its local variables are lost,1
2946,Data members can be accessed from any member functions inside the class defintion Local variables can only be accessed inside the member function that defines them,A data member is part of a C plus plus class or structure that stores data of a certain type A local variable inside a member function is only available inside that function and can be used to derive a desired outcome,1
2947,Data members can be accessed from any member functions inside the class defintion Local variables can only be accessed inside the member function that defines them,A local variable can only be accessed within the scope of its declaration,1
2948,Data members can be accessed from any member functions inside the class defintion Local variables can only be accessed inside the member function that defines them,Data members are the atributes of the function and can be used outside the function Local variable can not be used outside the function and the value is lost after the function terminates,1
2949,Data members can be accessed from any member functions inside the class defintion Local variables can only be accessed inside the member function that defines them,data members are permanent attributes of the class local variables inside a member function are lost when the scope of the member function ends,1
2950,Data members can be accessed from any member functions inside the class defintion Local variables can only be accessed inside the member function that defines them,data members are declared in a class definition but outside the bodies of a class member function definitions Local variables are declared in a function definition body,1
2951,Data members can be accessed from any member functions inside the class defintion Local variables can only be accessed inside the member function that defines them,A data member is globally accessible while a local variable is only accessible inside the member function,1
2952,Data members can be accessed from any member functions inside the class defintion Local variables can only be accessed inside the member function that defines them,A data member is a more general term describing all objects instantiated within a member function Local in local variables refers more to the scope of a variable which may be located in anything from a control structure to a class Local variables whose scope are in a member function are the same as data members of member functions,1
2953,Data members can be accessed from any member functions inside the class defintion Local variables can only be accessed inside the member function that defines them,A data member exists permanently in that program memory as long as it is run A local variable inside a member function is temporal and only used to operate in the function and exists as long as the function is run,1
2954,Data members can be accessed from any member functions inside the class defintion Local variables can only be accessed inside the member function that defines them,The local variable is lost once it exits the block of code while the data member is not,1
2955,Data members can be accessed from any member functions inside the class defintion Local variables can only be accessed inside the member function that defines them,Every member function can access and modify a data member A local variable can only be used from the line of declaration to the next closing before it is lost from memory,1
2956,Data members can be accessed from any member functions inside the class defintion Local variables can only be accessed inside the member function that defines them,Data members are variables that are declared inside the class definition but outside of the bodies of the class member functions Local variables can only be used within the function declaration,1
2957,Data members can be accessed from any member functions inside the class defintion Local variables can only be accessed inside the member function that defines them,The data member can be accessed outside of the class whereas the local variable cannot,1
2958,Data members can be accessed from any member functions inside the class defintion Local variables can only be accessed inside the member function that defines them,a local variable in a member function has to be static a data member can change its value freely,1
2959,Data members can be accessed from any member functions inside the class defintion Local variables can only be accessed inside the member function that defines them,data members local variables are declared in a function definition s body they Cannot be used outside of that function body When a function terminates the values of its local variables are lost,1
2960,Data members can be accessed from any member functions inside the class defintion Local variables can only be accessed inside the member function that defines them,local variable is only available in the function,1
2961,Data members can be accessed from any member functions inside the class defintion Local variables can only be accessed inside the member function that defines them,local variables are accessed inside member functions only while data members can be accessed throughout the class,1
2962,Data members can be accessed from any member functions inside the class defintion Local variables can only be accessed inside the member function that defines them,a Data member is encapsulated within a class or object it is static and can be shared by all instances of that class however local variable are only used from the function or block in which it is declared and not the whole class other wise they would be called global variables,1
2963,A local variable cannot be accessed outside the function in which it is declared Data members normally are private Variables of functions declared private are accessible only to member functions of the class in which they are declared,A local variable cannot be accessed outside the function in which it is declared Data members normally are private Variables of functions declared private are accessible only to member functions of the class in which they are declared,2
2964,A local variable cannot be accessed outside the function in which it is declared Data members normally are private Variables of functions declared private are accessible only to member functions of the class in which they are declared,A variable inside a member function can only be accessed inside that member and a data member can be accessed throughought the program,2
2965,A local variable cannot be accessed outside the function in which it is declared Data members normally are private Variables of functions declared private are accessible only to member functions of the class in which they are declared,local variables can only be used within the function where as data members can be set to public access and can be used throughout,2
2966,A local variable cannot be accessed outside the function in which it is declared Data members normally are private Variables of functions declared private are accessible only to member functions of the class in which they are declared,data member is accessible to all functions in the class where local variable is only available to the member function and value is lost when function closes,2
2967,A local variable cannot be accessed outside the function in which it is declared Data members normally are private Variables of functions declared private are accessible only to member functions of the class in which they are declared,Local variables cannot be used outside of that function body When a function terminates the values of its local variables are lost Where as data members are variables in a class definition and they exist throughout the life of the object,2
2968,A local variable cannot be accessed outside the function in which it is declared Data members normally are private Variables of functions declared private are accessible only to member functions of the class in which they are declared,a local variable is only useable within the function it is defined whereas a data member is available to any method within its class,2
2969,A local variable cannot be accessed outside the function in which it is declared Data members normally are private Variables of functions declared private are accessible only to member functions of the class in which they are declared,Variable declared in a function defination body cannot be used outside of that function Data members accessible only to member function of that class,2
2970,A local variable cannot be accessed outside the function in which it is declared Data members normally are private Variables of functions declared private are accessible only to member functions of the class in which they are declared,A data member is accessible anywhere in the class while i local variable in a member function is only accessible in that particular function and is freed after the function exits,2
2971,A constructor is called whenever an object is created whereas a function needs to be called explicitely Constructors do not have return type but functions have to indicate a return type,A constructor initializes an object or objects of a class A function of a class performs a task such as display a line of text or do some kind of mathematical operations,1
2972,A constructor is called whenever an object is created whereas a function needs to be called explicitely Constructors do not have return type but functions have to indicate a return type,all constructors are functions but not all functions are constructors Also functions can have nearly infinite purposes while constructors always create an instance of whichever class you are using You can change how a constructor does something but not what it does With functions you can change not only the how but also the what,1
2973,A constructor is called whenever an object is created whereas a function needs to be called explicitely Constructors do not have return type but functions have to indicate a return type,A constructor typically used to intialize data members and allocate resources for instance memory files etc Also a constructor cannot return values Functions are operations that maybe globally defined,1
2974,A constructor is called whenever an object is created whereas a function needs to be called explicitely Constructors do not have return type but functions have to indicate a return type,Constructors cannot return values so they cannot specify a return type Normally constructors are declared public,1
2975,A constructor is called whenever an object is created whereas a function needs to be called explicitely Constructors do not have return type but functions have to indicate a return type,A constructor is a method that starts new instances of a class Example : Employee employee 1 parameters starts a new instance of object of type Employee A function is simply a module within a program that completes its single desired task,1
2976,A constructor is called whenever an object is created whereas a function needs to be called explicitely Constructors do not have return type but functions have to indicate a return type,A constructor is called whenever a new object of that class is made,1
2977,A constructor is called whenever an object is created whereas a function needs to be called explicitely Constructors do not have return type but functions have to indicate a return type,A constructor does not return any date and has no return type Functions can return date or not return data can have a return type,1
2978,A constructor is called whenever an object is created whereas a function needs to be called explicitely Constructors do not have return type but functions have to indicate a return type,A constructor is automatically called whenever an instance of a class is created a function must be explicitly called by the user,1
2979,A constructor is called whenever an object is created whereas a function needs to be called explicitely Constructors do not have return type but functions have to indicate a return type,constructors cannot return values so they cannot specify a return type like functions can,1
2980,A constructor is called whenever an object is created whereas a function needs to be called explicitely Constructors do not have return type but functions have to indicate a return type,A constructor is a function used to initialize an object data when it is created,1
2981,A constructor is called whenever an object is created whereas a function needs to be called explicitely Constructors do not have return type but functions have to indicate a return type,a constructor initialises everything so that nothing is left empty or with random varioubles and a function modifies those variables with data,1
2982,A constructor is called whenever an object is created whereas a function needs to be called explicitely Constructors do not have return type but functions have to indicate a return type,A constructor initialized values at the execution of its instantiation It provides default values,1
2983,A constructor is called whenever an object is created whereas a function needs to be called explicitely Constructors do not have return type but functions have to indicate a return type,A constructor sets up the default values of variables when an object is instantiated whereas a function allows interaction with that object,1
2984,A constructor is called whenever an object is created whereas a function needs to be called explicitely Constructors do not have return type but functions have to indicate a return type,A constructor is used to create an object that can be employed in the main function of a program This may or may not execute code along with it A function is a set of code that executes when called but does not create a new object,1
2985,A constructor is called whenever an object is created whereas a function needs to be called explicitely Constructors do not have return type but functions have to indicate a return type,a constructor initializes data members but the functions actually perform tasks Constructors cant return values either,1
2986,A constructor is called whenever an object is created whereas a function needs to be called explicitely Constructors do not have return type but functions have to indicate a return type,a constructor does not need a type and it is used to initialize the variables,1
2987,A constructor is called whenever an object is created whereas a function needs to be called explicitely Constructors do not have return type but functions have to indicate a return type,Constructors do not have a return type,1
2988,A constructor is called whenever an object is created whereas a function needs to be called explicitely Constructors do not have return type but functions have to indicate a return type,A constructor initializes values and a function usual performs some sort of operation,1
2989,A constructor is called whenever an object is created whereas a function needs to be called explicitely Constructors do not have return type but functions have to indicate a return type,A constructor is used to create an instance of a class and has the same name as that class A function cannot have the same name as a class and computes data,1
2990,A constructor is called whenever an object is created whereas a function needs to be called explicitely Constructors do not have return type but functions have to indicate a return type,a constructor is a function that initializes a class instance a function performs whatever task it is written for,1
2991,A constructor is called whenever an object is created whereas a function needs to be called explicitely Constructors do not have return type but functions have to indicate a return type,A constructor cannot return values not even void but function get a return value,1
2992,A constructor is called whenever an object is created whereas a function needs to be called explicitely Constructors do not have return type but functions have to indicate a return type,A constructor initializes an object A function is part of an object,1
2993,A constructor is called whenever an object is created whereas a function needs to be called explicitely Constructors do not have return type but functions have to indicate a return type,constructors initialize the data that is then used in the calculations of a function,1
2994,A constructor is called whenever an object is created whereas a function needs to be called explicitely Constructors do not have return type but functions have to indicate a return type,a constructor is called when the class is created a function can be called any time,1
2995,A constructor is called whenever an object is created whereas a function needs to be called explicitely Constructors do not have return type but functions have to indicate a return type,constructor is a special block of statements called when an object is created either when it is declared statically or constructed on the stack However a function is a portion of code within a larger program which performs a specific task and independent to the rest of the code,1
2996,Unlike regular functions constructors are only used to initialize an object s data when it is created Constructors must also be given the same name as the class and cannot return any values,Unlike regular functions constructors are only used to initialize an object s data when it is created Constructors must also be given the same name as the class and cannot return any values,2
2997,Unlike regular functions constructors are only used to initialize an object s data when it is created Constructors must also be given the same name as the class and cannot return any values,A constructor is a function used to initialize an object data when it is created It is call is made implicitly when the object is created and must be defined with the same name as the class Constructor also cannot return a value like a function can,2
2998,Unlike regular functions constructors are only used to initialize an object s data when it is created Constructors must also be given the same name as the class and cannot return any values,a constructor cannot return values its not even void it is used to initialize an object data when it is created whereas a function is created to do a specific task and it can return values,2
2999,If no constructor is provided the compiler provides one by default If a constructor is defined for a class the compiler does not create a default constructor,When no parameters are set is when a default constructor is used,1
3000,If no constructor is provided the compiler provides one by default If a constructor is defined for a class the compiler does not create a default constructor,When there are no arguments passed,0
3001,If no constructor is provided the compiler provides one by default If a constructor is defined for a class the compiler does not create a default constructor,Before the main function of the code,0
3002,The compiler creates a default constructor when we do not define one in our class file,When the class does not explicitly include a constructor,2
3003,The compiler creates a default constructor when we do not define one in our class file,When a class does not explicitly include a constructor,2
3004,The compiler creates a default constructor when we do not define one in our class file,In any class that does not explicitly include a constructor,2
3005,The compiler creates a default constructor when we do not define one in our class file,C plus plus will create a default constructor when no other constructor is present,2
3006,The compiler creates a default constructor when we do not define one in our class file,When no constructor was specified in the constructor class but the class is instantiated in a program,2
3007,The compiler creates a default constructor when we do not define one in our class file,When no constructor exists when one is needed a parameterless default constructor is declared,2
3008,The compiler creates a default constructor when we do not define one in our class file,The Compiler creates this automatically for you unless you specifically create one,2
3009,The compiler creates a default constructor when we do not define one in our class file,when no user defined constructor exists,2
3010,The compiler creates a default constructor when we do not define one in our class file,If a class does not explicitly include a constructor the compiler creates one,2
3011,The compiler creates a default constructor when we do not define one in our class file,When you do not provide your own constructor,2
3012,The compiler creates a default constructor when we do not define one in our class file,C plus plus creates a default constructor during compilation if one is not provided,2
3013,The compiler creates a default constructor when we do not define one in our class file,The compiler will provide one when class does not explictly include a consructor,2
3014,The compiler creates a default constructor when we do not define one in our class file,When one is not explicitly stated,2
3015,The compiler creates a default constructor when we do not define one in our class file,When you dont specify any constructors,2
3016,The compiler creates a default constructor when we do not define one in our class file,at the very beginning when you run a complier matter a fact in C plus plus it generates its own default constructor for the class provided if no other constructors have been provided by user,2
3017,Unlimited number,Just one per class,0
3018,Unlimited number,It depends what type of class is being defined Typically you would have a constructor call for each object,0
3019,Unlimited number,It depends on the number of objects Each object should have a constructor,1
3020,As many as you want so long as they have different parameters,As many as you want so long as they have different parameters,2
3021,As many as you want so long as they have different parameters,There is no limit to the number of constructors in a class because like functions constructors can be overloaded,2
3022,As many as you want so long as they have different parameters,In C plus plus the constructor can be overloaded in that there can be more than one constructor for a class each having different parameters,2
3023,As many as you want so long as they have different parameters,by default just one but they may be overloaded to create as many constructors as necessary,2
3024,As many as you want so long as they have different parameters,As many as you want with different parameters,2
3025,As many as you want so long as they have different parameters,As many as are needed depending on how many variables one wishes to directly modify or leave as default when instantiating an object,2
3026,As many as you want so long as they have different parameters,A very large amount of constructors can be created for any given class through overloading When two constructors with a different type or number of parameters are created they are said to be overloaded and C plus plus can recognize which constructor to use based on the type of the variables that are passed or returned,2
3027,As many as you want so long as they have different parameters,Theoretically unlimited as long as they are defined by the programmer,2
3028,As many as you want so long as they have different parameters,As many as needed,2
3029,As many as you want so long as they have different parameters,as many as wanted or needed,2
3030,As many as you want so long as they have different parameters,There can be infinite constructors as long as the signature is different,2
3031,As many as you want so long as they have different parameters,As many as the programmer wants to create,2
3032,As many as you want so long as they have different parameters,as many as you want as long as they each have a unique argument list,2
3033,As many as you want so long as they have different parameters,as many as the user decides to use,2
3034,A function prototype includes the function signature i e the name of the function the return type and the parameters type The function definition includes the actual body of the function,A function definition does not require any additional information that needs to be passed inside its parenthesis to execute While a definition prototype requires more than one parameters to be passed in order to complete its task,1
3035,A function prototype includes the function signature i e the name of the function the return type and the parameters type The function definition includes the actual body of the function,The FUNCTION PROTOTYPE is where the programmer declares that he or she is using a function other than main This is like declaring a variable the programmer knows that he or she will be using in the future but has yet to say where they are going to use it or how This is answers the question who it gives the function a name and character The function prototype by common practice is placed at the beginning of the program after the includes and before main The FUNCTION DEFINITION is the guts of the function This is where the programmer decides what the function is going to do and tells it how to do it It takes whatever information it is given and performs the operations It works sort of like the brain the brain takes in input and based upon that input performs in some way producing an output The function defintion is placed outside of main and any other functions A function is its own entity and should be thought of as such,1
3036,A function prototype includes the function signature i e the name of the function the return type and the parameters type The function definition includes the actual body of the function,Function prototype is a declaration Function definitions with multiple parameters often require more than one piece of information to perform their tasks,1
3037,A function prototype includes the function signature i e the name of the function the return type and the parameters type The function definition includes the actual body of the function,A prototype shows only return types and necessary parameters The definition includes names for those parameters and defines what the object is actually capable of doing,1
3038,A function prototype includes the function signature i e the name of the function the return type and the parameters type The function definition includes the actual body of the function,prototype only tells the user what data types go into a function and what type is returned,1
3039,A function prototype includes the function signature i e the name of the function the return type and the parameters type The function definition includes the actual body of the function,Function prototype is located in the h file and only contains the access function name and paramater type Function definition contains the code for the function to perform its activity,1
3040,A function prototype includes the function signature i e the name of the function the return type and the parameters type The function definition includes the actual body of the function,a function prototype is used to reference the compiler to a function that will be defined later on a function definition is the actual function itself complete with return type parameters etc,1
3041,A function prototype includes the function signature i e the name of the function the return type and the parameters type The function definition includes the actual body of the function,A function prototype describes a class public interface without revealing the class member function implementations,1
3042,A function prototype includes the function signature i e the name of the function the return type and the parameters type The function definition includes the actual body of the function,Function definitions are just that the definition The prototype is what the compiler uses to check that calls to function are correct,1
3043,A function prototype includes the function signature i e the name of the function the return type and the parameters type The function definition includes the actual body of the function,a prototype does not include any actual code where the function has all the code that is executed in the program,1
3044,A function prototype includes the function signature i e the name of the function the return type and the parameters type The function definition includes the actual body of the function,A function prototype is just a declaration of the function existing and cant be used as an actual function A function has to be created with a definition within to tell the compiler what the function does,1
3045,A function prototype includes the function signature i e the name of the function the return type and the parameters type The function definition includes the actual body of the function,the Prototype creates a framework to call the function definition While a function definition is where the function is actually programmed out and created into a final product,1
3046,A function prototype includes the function signature i e the name of the function the return type and the parameters type The function definition includes the actual body of the function,A function prototype describes the class public interface without providing how the function works A function definition contains the inner workings of the function,1
3047,A function prototype includes the function signature i e the name of the function the return type and the parameters type The function definition includes the actual body of the function,prototype states all functions in that class before compilation where the definition actually holds the source for the functions,1
3048,A function prototype includes the function signature i e the name of the function the return type and the parameters type The function definition includes the actual body of the function,A function prototype just specifies parameters A function definition includes parameters and a code body,1
3049,A function prototype includes the function signature i e the name of the function the return type and the parameters type The function definition includes the actual body of the function,Function prototypes describe the class public interface,1
3050,A function prototype includes the function signature i e the name of the function the return type and the parameters type The function definition includes the actual body of the function,A prototype only declares name return type and input type A definition also defines the scope variables process and return function,1
3051,A function prototype includes the function signature i e the name of the function the return type and the parameters type The function definition includes the actual body of the function,a function prototype simply declares the functions parameters the function definition includes any necessary variables and the function actual code,1
3052,A function prototype includes the function signature i e the name of the function the return type and the parameters type The function definition includes the actual body of the function,A functgion prototype is a declaration of a function while function definition specifies what a function does,1
3053,A function prototype includes the function signature i e the name of the function the return type and the parameters type The function definition includes the actual body of the function,A function definition contains all the code for a function to work A function prototype just shows the output input and function name,1
3054,A function prototype includes the function signature i e the name of the function the return type and the parameters type The function definition includes the actual body of the function,function prototype describe the class public interface without revealing the class member function implementations function definitions show what implementations are being done,1
3055,A function prototype includes the function signature i e the name of the function the return type and the parameters type The function definition includes the actual body of the function,function prototype describes a classes interface without reviling whatever is inside as for the function definition cannot do that,1
3056,A function prototype tells the compiler the function name return type and the number and type of parameters without revealing the implementations contained in the function definition,A function prototype tells the compiler the function name return type and the number and type of parameters without revealing the implementations contained in the function definition,2
3057,A function prototype tells the compiler the function name return type and the number and type of parameters without revealing the implementations contained in the function definition,A function prototype is a declaration of a function that tells the compiler the function name its return type and the types of its parameters,2
3058,A function prototype tells the compiler the function name return type and the number and type of parameters without revealing the implementations contained in the function definition,A function prototype lays out the name return type and the number and types of parameters the function expects to receive in a certain order The details for function prototypes are in the function definition,2
3059,A function prototype tells the compiler the function name return type and the number and type of parameters without revealing the implementations contained in the function definition,A function definition is the code that defines the function placed in the brackets that determines that function operation A function prototype shows the function public interface without exposing implementation It shows name return type and type of paramaters,2
3060,A function prototype tells the compiler the function name return type and the number and type of parameters without revealing the implementations contained in the function definition,Function prototypes tell the compiler the function names its return type and the types of its parameters where as function definitions actually implement the member functions,2
3061,A function prototype tells the compiler the function name return type and the number and type of parameters without revealing the implementations contained in the function definition,in a function prototype you include the return type the name of the function and its parameters if any are needed in a function definition you write the code of what the function will do,2
3062,A function prototype tells the compiler the function name return type and the number and type of parameters without revealing the implementations contained in the function definition,A function prototype only names the function its return type and it is argument list while a definition defines the above as well as what the function actually does,2
3063,To store a class interface including data members and member function prototypes,The main role of header file is it is used to share information among various files,1
3064,To store a class interface including data members and member function prototypes,Header files separate files in which classes are defined and allow the compiler to recognize classes when used elsewhere,1
3065,To store a class interface including data members and member function prototypes,A header file consists of reusable source code such as a class in a file that by convention has a h filename extension This differs from cpp files that contain source code,1
3066,To store a class interface including data members and member function prototypes,To provide information about the contents of a library It includes the definition of classes declarations of functions data types and constants,1
3067,To store a class interface including data members and member function prototypes,the header file shows the user what types go into and come out of a function but does not allow a user to manipulate the actual code for the function,1
3068,To store a class interface including data members and member function prototypes,Header files declares the class member functions,1
3069,To store a class interface including data members and member function prototypes,A header file allows for the separation of declaration and implementation into separate files,1
3070,To store a class interface including data members and member function prototypes,the header file has access to the C plus plus Standard Library and makes certain classes like class string work,0
3071,To store a class interface including data members and member function prototypes,Instruct the compiler on how to interface with library and user written components,1
3072,To store a class interface including data members and member function prototypes,create a comon area to contain reusable functions,1
3073,To store a class interface including data members and member function prototypes,include hat h allows the use of the hat container so called from the act of pulling names from a hat The header file for hat includes functions for storage and retrieval of it is contents mainly put peek and pull,0
3074,To store a class interface including data members and member function prototypes,To hold reusable content or modules separate from the actual source code file that can be easily referenced and employed for different programs,1
3075,To store a class interface including data members and member function prototypes,A header file is a cross communication method between source files to help limit the size of each individual program Without header files a program will be 1 large lump of code and thus fairly hard to debug and traverse,1
3076,To store a class interface including data members and member function prototypes,It contains reusable source code for use by other classes,1
3077,To store a class interface including data members and member function prototypes,to separate the source code from the main function allows the methods or classes to be included in the program without direct coding allows re usability,1
3078,To store a class interface including data members and member function prototypes,Header files have reusable source code in a file that a programer can use,1
3079,To store a class interface including data members and member function prototypes,To hide the definition and details of a class Also to help readability of the main C plus plus file,1
3080,To store a class interface including data members and member function prototypes,To allow the compiler to recognize the classes when used elsewhere,1
3081,To store a class interface including data members and member function prototypes,A header file declares a class its data and functions available through that class,1
3082,To store a class interface including data members and member function prototypes,A header file usually contains class and function prototypes,1
3083,To store a class interface including data members and member function prototypes,contains all the standard C plus plus library i e string,0
3084,a header file is a file used to store a list of prototye functions and data members,a header file is a file used to store a list of prototye functions and data members,2
3085,The name of the function and the types of the parameters,It includes the name of the program the type of parameters it can take It should also include a brief description of what the function does,1
3086,The name of the function and the types of the parameters,it includes the specific information about the function such as input and output variable types and how many of each,1
3087,The name of the function and the types of the parameters,A function signature consists of the function prototype This tells you the general information about a function its name parameters what scope it is in and other miscellaneous information,1
3088,The name of the function and the types of the parameters,Name paramaters scope and other general function information,1
3089,The name of the function and the types of the parameters,a return type and input parameters,1
3090,The name of the function and the types of the parameters,The signature can include a result type and thrown errors,1
3091,The name of the function and the types of the parameters,A function signature includes a function return type parameters and semi colon,1
3092,The name of the function and the types of the parameters,a function return type and parameter list,1
3093,The function signature includes the name of the function and the types of its arguments,The function signature includes the name of the function and the types of its arguments,2
3094,The function signature includes the name of the function and the types of its arguments,It includes the name of the function and the types of its arguments,2
3095,The function signature includes the name of the function and the types of its arguments,It includes a function name and parameter list Does not include return type Function signatures must be different,2
3096,The function signature includes the name of the function and the types of its arguments,The portion of the function prototyp tha has the function name and the arguments but NOT the return type,2
3097,The function signature includes the name of the function and the types of its arguments,Name of the function and the types of it is arguments,2
3098,The function signature includes the name of the function and the types of its arguments,The name of the function and the types of its arguments,2
3099,The function signature includes the name of the function and the types of its arguments,Includes the name of the function and the types of its arguments,2
3100,The function signature includes the name of the function and the types of its arguments,identification of a function and the data types of its parameters it has the name and the data type variables,2
3101,The function signature includes the name of the function and the types of its arguments,The function signature includes the method name and the input types,2
3102,The function signature includes the name of the function and the types of its arguments,A function signature includes the name of the function and types of arguments but not the return type,2
3103,The function signature includes the name of the function and the types of its arguments,function name and input paramaters,2
3104,The function signature includes the name of the function and the types of its arguments,The name of the function and the types of its arguments This includes the number type and order the parameters appear in,2
3105,The function signature includes the name of the function and the types of its arguments,the function name and parameters,2
3106,The function signature includes the name of the function and the types of its arguments,it includes the name of the function and the types of its arguments it does not specify the function return type Function in the same scope must have unqiue signatures,2
3107,File scope,they can be accessed by any C plus plus file anywhere,1
3108,File scope,The scope of global variables are created by placing variable declarations outside any class or function definition Global variables retain their values throughout the execution of the program and they can be referenced by any function that follows their declarations or definitions in the source file,1
3109,File scope,Global Variables can be used in any function as long as the appropriate h file that holds the variable is included,1
3110,File scope,variables accessible anywhere in the program as long as they are public,1
3111,File scope,globally anywhere in the program,1
3112,File scope,If a variable is declared global any function or class can use that variable,1
3113,File scope,global variables have program scope accessible anywhere in program,1
3114,File scope,variables that exist throught the entire script their values can be changed anytime in the code and fucntions,1
3115,Any functions that follows their deceleration that are in the source code file are allowed to have access the variables Also global scope variables retrain their value throughout the execution of the program,Any functions that follows their deceleration that are in the source code file are allowed to have access the variables Also global scope variables retrain their value throughout the execution of the program,2
3116,Any functions that follows their deceleration that are in the source code file are allowed to have access the variables Also global scope variables retrain their value throughout the execution of the program,Global variables have file scope,2
3117,Any functions that follows their deceleration that are in the source code file are allowed to have access the variables Also global scope variables retrain their value throughout the execution of the program,A global variable is an identifier that retains it is value throughout the execution of the program It has file scope,2
3118,Any functions that follows their deceleration that are in the source code file are allowed to have access the variables Also global scope variables retrain their value throughout the execution of the program,They can be accessed by any part of the program It can be referenced by any function that follows the declarations or definitions in the source file,2
3119,Any functions that follows their deceleration that are in the source code file are allowed to have access the variables Also global scope variables retrain their value throughout the execution of the program,Global variables have file scope The variable is know to all functions throught the file,2
3120,Any functions that follows their deceleration that are in the source code file are allowed to have access the variables Also global scope variables retrain their value throughout the execution of the program,They have file scope when placed outside a function,2
3121,Any functions that follows their deceleration that are in the source code file are allowed to have access the variables Also global scope variables retrain their value throughout the execution of the program,The scope of global variables is at the file level,2
3122,Any functions that follows their deceleration that are in the source code file are allowed to have access the variables Also global scope variables retrain their value throughout the execution of the program,Global variables all have file scope,2
3123,Any functions that follows their deceleration that are in the source code file are allowed to have access the variables Also global scope variables retrain their value throughout the execution of the program,They can be referenced by any function following their declaration or definition inside the source file,2
3124,Any functions that follows their deceleration that are in the source code file are allowed to have access the variables Also global scope variables retrain their value throughout the execution of the program,The entire program or file,2
3125,It makes a copy of the function code in every place where a function call is made,It expands the function definition in that place Once the functions is called you can use it as many times as you need The compiler just expands on the function,1
3126,It makes a copy of the function code in every place where a function call is made,When the compiler inline expands a function call the function code gets inserted into the caller code stream conceptually similar to what happens with a define macro This can depending on a zillion other things improve performance because the optimizer can procedurally integrate the called code optimize the called code into the caller,1
3127,It makes a copy of the function code in every place where a function call is made,The compiler can ignore the inline qualifier and typically does so for all but the smallest functions,1
3128,It makes a copy of the function code in every place where a function call is made,You declare your inline function in the header or before your int main You then can call that function at anytime in your main program quickly and easily,1
3129,It makes a copy of the function code in every place where a function call is made,It expands a small function out making your code longer but also makes it run faster,1
3130,It makes a copy of the function code in every place where a function call is made,Ignores the inline qualifier and typically does so for all but the smallest functions,1
3131,It makes a copy of the function code in every place where a function call is made,If the function is small enough it will expand it but it will run faster as it will avoid making so many calls to the function,1
3132,It makes a copy of the function code in every place where a function call is made,It generates a copy of the function code by by inserting it in the program,1
3133,It makes a copy of the function code in every place where a function call is made,Multiple copies of the function code are inserted into the program making it bigger,1
3134,It makes a copy of the function code in every place where a function call is made,It generates a copy of the function if it is needed again,1
3135,The inline keyword advises the compiler to copy the function code in place to avoid function calls; however the compiler can and typically does ignore the inline qualifier for all but the smallest functions,The inline keyword advises the compiler to copy the function code in place to avoid function calls; however the compiler can and typically does ignore the inline qualifier for all but the smallest functions,2
3136,The inline keyword advises the compiler to copy the function code in place to avoid function calls; however the compiler can and typically does ignore the inline qualifier for all but the smallest functions,Placing the qualifier inline before a function return type in the function definition advises the compiler to generate a copy of the function code in place to avoid a function call,2
3137,The inline keyword advises the compiler to copy the function code in place to avoid function calls; however the compiler can and typically does ignore the inline qualifier for all but the smallest functions,When the program compiles it will copy the function inplace avoiding a function call,2
3138,The inline keyword advises the compiler to copy the function code in place to avoid function calls; however the compiler can and typically does ignore the inline qualifier for all but the smallest functions,It replaces all instances of that function call with the inline code itself resulting in longer but faster programs,2
3139,The inline keyword advises the compiler to copy the function code in place to avoid function calls; however the compiler can and typically does ignore the inline qualifier for all but the smallest functions,Inline functions are copied in place instead of being referenced,2
3140,The inline keyword advises the compiler to copy the function code in place to avoid function calls; however the compiler can and typically does ignore the inline qualifier for all but the smallest functions,For inline functions the compiler creates a copy of the function code in place so it does not have to make a function call and add to the function call stack,2
3141,The inline keyword advises the compiler to copy the function code in place to avoid function calls; however the compiler can and typically does ignore the inline qualifier for all but the smallest functions,it generates a copy of the function coding which eliminates calling the function,2
3142,The inline keyword advises the compiler to copy the function code in place to avoid function calls; however the compiler can and typically does ignore the inline qualifier for all but the smallest functions,tells the compiler to make a copy of function code in place to avoid a function call it typically ignores it except for the smallest functions,2
3143,The inline keyword advises the compiler to copy the function code in place to avoid function calls; however the compiler can and typically does ignore the inline qualifier for all but the smallest functions,The complier includes copies of inline functions instead of making function calls but usually only with very small functions,2
3144,The inline keyword advises the compiler to copy the function code in place to avoid function calls; however the compiler can and typically does ignore the inline qualifier for all but the smallest functions,Compiler generate a copy of the function code in place when appropriate to avoid a function call,2
3145,The inline keyword advises the compiler to copy the function code in place to avoid function calls; however the compiler can and typically does ignore the inline qualifier for all but the smallest functions,instead of calling the function every time it is invoked the compiler will replace the function call with a copy of the function body,2
3146,It avoids making copies of large data structures when calling functions,because you cannot change the original and passing by reference limits memory needed for the program,1
3147,It avoids making copies of large data structures when calling functions,You do not alter the original value of the variable that was passed,1
3148,It avoids making copies of large data structures when calling functions,Do not have to make copies of stuff,1
3149,It avoids making copies of large data structures when calling functions,The function can change the data stored in a variable passed by reference directly,1
3150,It avoids making copies of large data structures when calling functions,Gives called function the ability to access and modify the caller s argument data,1
3151,It avoids making copies of large data structures when calling functions,Gives called function the ability to access and modify the caller s argument data directly,1
3152,It avoids making copies of large data structures when calling functions,It is more efficient and it changes the variable not online inside the function but outside so that the new value can be used elsewhere,1
3153,It avoids making copies of large data structures when calling functions,Gives access to the caller data directly also it allows for modifying the data,1
3154,It avoids making copies of large data structures when calling functions,less overhead overall and you modify the variable directly,1
3155,It avoids making copies of large data structures when calling functions,The original variable being referenced can be modified directly by the called function,1
3156,It avoids making copies of large data structures when calling functions,gives function ability to access and modify the caller argument data directly,1
3157,It avoids making copies of large data structures when calling functions,Gives the called function the ability to access and modify the caller argument data directly,1
3158,It avoids making copies of large data structures when calling functions,Less overhead than passed by value especially when using large numbers,1
3159,It avoids making copies of large data structures when calling functions,The data can be modified directly instead of making a copy of the data Improves execution time with large amounts of data,1
3160,It avoids making copies of large data structures when calling functions,Functions can directly modify arguments that are passed by reference,1
3161,It avoids making copies of large data structures when calling functions,it takes less memory thus it would make the program faster,1
3162,It avoids making copies of large data structures when calling functions,You are able to modify the variable that is referenced directly,1
3163,It avoids making copies of large data structures when calling functions,if you pass by reference you can modify the value as opposed to passing by value where you cannot change the value,1
3164,It avoids making copies of large data structures when calling functions,Actual arguments are associated with dummy arguments when a function or subroutine is referenced In a procedure reference the actual argument list identifies the correspondence between the actual arguments provided in the list and the dummy arguments of the subprogram,1
3165,Overall the program has better performance means it is faster because it does not have to copy large amounts of data,Overall the program has better performance means it is faster because it does not have to copy large amounts of data,2
3166,Overall the program has better performance means it is faster because it does not have to copy large amounts of data,Passing by reference can eliminate the pass by value overhead of copying large amounts of data,2
3167,Overall the program has better performance means it is faster because it does not have to copy large amounts of data,It is often more efficient to pass references rather than large objects to functions This allows the compiler to pass the address of the object while maintaining the syntax that would have been used to access the object,2
3168,Overall the program has better performance means it is faster because it does not have to copy large amounts of data,Pass by reference is good for performance reasons because it can eliminate the pass by value overhead of copying large amounts of data,2
3169,Overall the program has better performance means it is faster because it does not have to copy large amounts of data,you do not make another copy and waste memory,2
3170,Overall the program has better performance means it is faster because it does not have to copy large amounts of data,Passing by reference eliminates the copying of large amounts of data typical with pass by value,2
3171,Overall the program has better performance means it is faster because it does not have to copy large amounts of data,If a function arguments are large in size computing time and memory space is not wasted copying down the argument and passing it to the function Also pass by reference gives the function called the permission to read edit the argument directly,2
3172,Overall the program has better performance means it is faster because it does not have to copy large amounts of data,large data items can be passed without copying the entire data point reducing execution time and the amout of memory space needed,2
3173,Overall the program has better performance means it is faster because it does not have to copy large amounts of data,It gives access and modify the caller argument data directly It eliminate the pass by value overhead of copying large amounts ofdata,2
3174,Overall the program has better performance means it is faster because it does not have to copy large amounts of data,only the memory address is sent to the function so no copy of the object sent needs to be made It makes the function run faster and saves memory,2
3175,Based on the function signature When an overloaded function is called the compiler will find the function whose signature is closest to the given function call,They differentiated by the compiler by the conditions or inputs used for one of the overloaded functions,1
3176,Based on the function signature When an overloaded function is called the compiler will find the function whose signature is closest to the given function call,By the type they are initilized with int char etc,1
3177,Based on the function signature When an overloaded function is called the compiler will find the function whose signature is closest to the given function call,they have to have same return type but different input parameters,1
3178,Based on the function signature When an overloaded function is called the compiler will find the function whose signature is closest to the given function call,Overloaded functions are differentiated by their parameters,1
3179,Based on the function signature When an overloaded function is called the compiler will find the function whose signature is closest to the given function call,They have the same name just different parameters,1
3180,Based on the function signature When an overloaded function is called the compiler will find the function whose signature is closest to the given function call,by their signature return type argument list,1
3181,Based on the function signature When an overloaded function is called the compiler will find the function whose signature is closest to the given function call,overloaded function simply invovles haing a method with the same name within the class is used to implement a method for subclass which overrides in other words replaces the implementation of the super class Overloading the concept of providing different meaning to a object based on the context of its presence Overloading is one type of polymorphism and this is also a feature in programing,1
3182,The compiler selects the proper functions to execute based on number types and order of arguments in the function call,The compiler selects the proper functions to execute based on number types and order of arguments in the function call,2
3183,The compiler selects the proper functions to execute based on number types and order of arguments in the function call,The compiler distinguishes overloaded functions by their signatures It encodes each function identifier with the number and types of its parameters to generate type safe linkage which ensures the proper overloaded function is called,2
3184,The compiler selects the proper functions to execute based on number types and order of arguments in the function call,Overloaded functions are distinguished by their signatures Name mangling or name decoration and type safe linkage ensures that proper overloaded functions is called and types of the arguments conform to tpes to the parameters,2
3185,The compiler selects the proper functions to execute based on number types and order of arguments in the function call,The compiler selects proper function to execute based on number types and order of arguments in the function call,2
3186,The compiler selects the proper functions to execute based on number types and order of arguments in the function call,It selects the proper function to execute based on number types and order of arguments in the function call,2
3187,The compiler selects the proper functions to execute based on number types and order of arguments in the function call,It examines the names types and order of arguments on each function,2
3188,The compiler selects the proper functions to execute based on number types and order of arguments in the function call,Is based on number types and order of arguments in the function call,2
3189,The compiler selects the proper functions to execute based on number types and order of arguments in the function call,Compiler selects proper function to execute based on number types and order of arguments in the function call,2
3190,The compiler selects the proper functions to execute based on number types and order of arguments in the function call,The compiler selects the right function to execute from the number types and order of arguments in the function call,2
3191,The compiler selects the proper functions to execute based on number types and order of arguments in the function call,their function signature,2
3192,The compiler selects the proper functions to execute based on number types and order of arguments in the function call,The number and type of its parameters,2
3193,The compiler selects the proper functions to execute based on number types and order of arguments in the function call,They are differntiated by number types and order of arguments in the function call,2
3194,The compiler selects the proper functions to execute based on number types and order of arguments in the function call,it looks at the number types and order of arguments in the function call,2
3195,The compiler selects the proper functions to execute based on number types and order of arguments in the function call,The compiler differentiates overloaded functions by their signature,2
3196,The compiler selects the proper functions to execute based on number types and order of arguments in the function call,By the number types and order of their arguments,2
3197,The compiler selects the proper functions to execute based on number types and order of arguments in the function call,By the number and the types and order of the parameters,2
3198,If the recursion step is defined incorrectly or if the base case is not included,badly designed algorithyms using recursion for a non recursive problem,1
3199,If the recursion step is defined incorrectly or if the base case is not included,Not having a base case that returns a base value,1
3200,If the recursion step is defined incorrectly or if the base case is not included,no base case no change in values,1
3201,If the recursion step is defined incorrectly or if the base case is not included,The recursive problem cannot be reduced to reach the base case,1
3202,If the recursion step is defined incorrectly or if the base case is not included,improper handling of cases such that not all possible values are able to be handled,1
3203,If the recursion step is defined incorrectly or if the base case is not included,There is no base case The recursion step does not reduce the problem during each recursive call,1
3204,If the recursion step is defined incorrectly or if the base case is not included,no base case as in a single return that does not include calling the function again a static value to end at,1
3205,If the recursion step is defined incorrectly or if the base case is not included,Infinite recursion may occur if no base case is defined or if the call is not varied,1
3206,If the recursion step is defined incorrectly or if the base case is not included,recursion refers to situations in which functions call themselves These types of functions are known as recursive functions That being said Infinite recursion occurs when the function is designed in such a way as to call it self forever without stopping possible causes,1
3207,A base case that is the simplest case for a problem so that the function will lead to it if this does not happen then it will end up as an infinite loop And a condition to know when to terminate,A base case that is the simplest case for a problem so that the function will lead to it if this does not happen then it will end up as an infinite loop And a condition to know when to terminate,2
3208,A base case that is the simplest case for a problem so that the function will lead to it if this does not happen then it will end up as an infinite loop And a condition to know when to terminate,Infinite recursion can occur when the base case is omitted or the recursion step is written incorrectly so that it never converges on the base case,2
3209,A base case that is the simplest case for a problem so that the function will lead to it if this does not happen then it will end up as an infinite loop And a condition to know when to terminate,Infinite recursion is an infinite loop if the condition is not met Either omitting the base case or writing the recursion step incorrectly so that it does not converge on the base case causes indefinite recursion eventually exhausting memory,2
3210,A base case that is the simplest case for a problem so that the function will lead to it if this does not happen then it will end up as an infinite loop And a condition to know when to terminate,Either omitting the base case or writing the recursion step incorrectly so that it does not converge on the base case can cause an infinite recursion,2
3211,A base case that is the simplest case for a problem so that the function will lead to it if this does not happen then it will end up as an infinite loop And a condition to know when to terminate,Incorrect or missing base case Must reduce to the base case The function must get simpler each time it is run converge to the base case,2
3212,A base case that is the simplest case for a problem so that the function will lead to it if this does not happen then it will end up as an infinite loop And a condition to know when to terminate,If at each recursive call the problem does not diminish or if it does not diminish to a base case can cause infinite recursion,2
3213,A base case that is the simplest case for a problem so that the function will lead to it if this does not happen then it will end up as an infinite loop And a condition to know when to terminate,Omitting the base case or incorrectly calling the recursive step,2
3214,A base case that is the simplest case for a problem so that the function will lead to it if this does not happen then it will end up as an infinite loop And a condition to know when to terminate,Lack of defining a base case or writing the recursion step incorrectly so that it does not converge on the base case,2
3215,A base case that is the simplest case for a problem so that the function will lead to it if this does not happen then it will end up as an infinite loop And a condition to know when to terminate,no base case or the recursive calls do not converge to the base case,2
3216,A base case that is the simplest case for a problem so that the function will lead to it if this does not happen then it will end up as an infinite loop And a condition to know when to terminate,No base case or an incorrectly written recursion step that does not converge on the base case will lead to infinite recursion,2
3217,A base case that is the simplest case for a problem so that the function will lead to it if this does not happen then it will end up as an infinite loop And a condition to know when to terminate,If the recursion function never reaches or successfully defines the base case it will recurse forever This happens many ways such as the function does not progress towards the base case or the function is coded poorly and does not even contain a base case,2
3218,A base case that is the simplest case for a problem so that the function will lead to it if this does not happen then it will end up as an infinite loop And a condition to know when to terminate,not creating a base case or in the case where the base case will never be met,2
3219,A base case that is the simplest case for a problem so that the function will lead to it if this does not happen then it will end up as an infinite loop And a condition to know when to terminate,Either omitting the base case or writing the recursion step incorrectly so the it does not reach the base case can cause infinite recursion,2
3220,A base case that is the simplest case for a problem so that the function will lead to it if this does not happen then it will end up as an infinite loop And a condition to know when to terminate,omitting the base case or writing the recursive call so that it does not converge upon the base case,2
3221,A base case that is the simplest case for a problem so that the function will lead to it if this does not happen then it will end up as an infinite loop And a condition to know when to terminate,Either omitting the base case or writing the recursion step incorrectly so that it does not converge on the base case,2
3222,A base case that is the simplest case for a problem so that the function will lead to it if this does not happen then it will end up as an infinite loop And a condition to know when to terminate,Not having a base case or building a recursion process that does not converge on the base case,2
3223,A base case that is the simplest case for a problem so that the function will lead to it if this does not happen then it will end up as an infinite loop And a condition to know when to terminate,Either omitting the base case or writing the recursion step incorerectly,2
3224,A base case that is the simplest case for a problem so that the function will lead to it if this does not happen then it will end up as an infinite loop And a condition to know when to terminate,function is never allowed to reach the base case,2
3225,A base case that is the simplest case for a problem so that the function will lead to it if this does not happen then it will end up as an infinite loop And a condition to know when to terminate,it has no base case or the base case is never met,2
3226,They both involve repetition; they both have termination tests; they can both occur infinitely,As discussed earlier recursion may be used to process iterative actions Recursion is used for calculations where the answer can be described in a function that relates to itself,1
3227,They both involve repetition; they both have termination tests; they can both occur infinitely,Both will repeat loop until a condition is met and exit the loop Both are capable of entering an infinite loop,1
3228,They both involve repetition; they both have termination tests; they can both occur infinitely,Both are repetative and both have a end test,1
3229,They both involve repetition; they both have termination tests; they can both occur infinitely,Incorrectly writing either can result in infinite loops both perform the same task over and over,1
3230,They both involve repetition; they both have termination tests; they can both occur infinitely,Many problems can be solved by both iteration and recursion and either may go into a condition of infinite execution if a termination test is omitted,1
3231,They both involve repetition; they both have termination tests; they can both occur infinitely,they are methods of repeating the same task,1
3232,They both involve repetition; they both have termination tests; they can both occur infinitely,they are used to solve the same type of problems they do a task over and over again until a cirtain conditional statement is reached its called the base case in recursion,1
3233,They both involve repetition; they both have termination tests; they can both occur infinitely,both need to have some kind of base case to tell when the loop needs to stop,1
3234,They both involve repetition; they both have termination tests; they can both occur infinitely,they both are able to do repetiive tasks however recurisve calls itself with different parameters and defines and exit clause that is guaranteeed to be reached Iterative includes a loop which iterates a pre determined number of times or checks for an exit clause every time through,1
3235,Both involve a controlled repetition structures and they both have a termination test Also both of them can loop forever,Both involve a controlled repetition structures and they both have a termination test Also both of them can loop forever,2
3236,Both involve a controlled repetition structures and they both have a termination test Also both of them can loop forever,Both iteration and recursion are based on control statements and involve repetition They can both also occur indefinitely,2
3237,Both involve a controlled repetition structures and they both have a termination test Also both of them can loop forever,Both are based on a control statement Iteration repetition structure Recursion selection structure Both involve repetition Iteration explicitly uses repetition structure Recursion repeated function calls Both involve a termination test Iteration loop termination test Recursion base case Both gradually approach termination Iteration modifies counter until loop termination test fails Recursion produces progressively simpler versions of problem Both can occur indefinitely Iteration if loop continuation condition never fails Recursion if recursion step does not simplify the problem,2
3238,Both involve a controlled repetition structures and they both have a termination test Also both of them can loop forever,Iteration and recursion have many similarities : both are based on a control statement involve repetition involve a termination test gradually approach termination and can occur infinitely,2
3239,Both involve a controlled repetition structures and they both have a termination test Also both of them can loop forever,Both rely on repetition both have a base case both can become an infinite loop Anything recursive can also be solved with iteration,2
3240,Both involve a controlled repetition structures and they both have a termination test Also both of them can loop forever,Both are based on a control statement Both involve repetition Both involve a termination test Both gradually approach termination Both can occur infinitely,2
3241,Both involve a controlled repetition structures and they both have a termination test Also both of them can loop forever,Iteration and recursion both use repetition and perform several simple operations and algorithms successively until they reach a certain limit So both involve a termination test to find that limit and both slowly approach that termination limit Both are based on a control statement as well If coded poorly both can continue on for forever until the compiler or the computer either locks up shuts down or halts the operation,2
3242,Both involve a controlled repetition structures and they both have a termination test Also both of them can loop forever,both based on control statement involve repetition and involve a termination test within loops,2
3243,Both involve a controlled repetition structures and they both have a termination test Also both of them can loop forever,Both involve a termination test They use a control statement and repition to solve the problem They can also result in an infinite loop,2
3244,Both involve a controlled repetition structures and they both have a termination test Also both of them can loop forever,based on a control statement involve repetition involve a termination test,2
3245,Both involve a controlled repetition structures and they both have a termination test Also both of them can loop forever,Both are bases on a control statement Both involve repetition Both involve a termination test Both gradually approach termination Both can occur infinitely,2
3246,Both involve a controlled repetition structures and they both have a termination test Also both of them can loop forever,both based on a control statement both involve repitition both involve a termination test both gradually approach termination both can potentially occur infinetly,2
3247,Both involve a controlled repetition structures and they both have a termination test Also both of them can loop forever,they are both based on a control statement both involve repetition both involve a termination case both graduatlly approach that termination case and both can occur infinitely,2
3248,Both involve a controlled repetition structures and they both have a termination test Also both of them can loop forever,They both use repetition a control or test to terminate and both can infinitely repeat if not defined correctly,2
3249,Both involve a controlled repetition structures and they both have a termination test Also both of them can loop forever,Both are based on a control statement; both gradually approach termination ending with a termination test; both involve repetition and can both repeat infinitely if their termination requirements are not met,2
3250,Both involve a controlled repetition structures and they both have a termination test Also both of them can loop forever,both are based on a control statement involve repetition and involve a termination test both gradually approach termination both can occur infinitely,2
3251,Both involve a controlled repetition structures and they both have a termination test Also both of them can loop forever,Based on control statement; involve repetition; involve a terminal test; both can occur infinitly,2
3252,Both involve a controlled repetition structures and they both have a termination test Also both of them can loop forever,repetition termination test eventually terminate occur infinately,2
3253,In the array declaration or by using an initializer list,int n 10 ; or or array of 10 integers and int n arraySize or or where arraySize is some positive integer defined by the user,1
3254,In the array declaration or by using an initializer list,by either inputing the different elements in the array at coding or giving the array specifacations as to the size of the array it is also possible when giving it specifacations to tell the array to grow as needed,1
3255,In the array declaration or by using an initializer list,Pass the length along with the array or use a vector,1
3256,In the array declaration or by using an initializer list,Explicitly int array 10 ; or by variable const int size equals 10; int array size ;,1
3257,In the array declaration or by using an initializer list,Specify an array s size with a constant variable And setting array elements with calculations,1
3258,In the array declaration or by using an initializer list,statically using and dynamically using,1
3259,In the array declaration or by using an initializer list,define it as array 5 or array 1 2 3 4 5,1
3260,In the array declaration or by using an initializer list,Static and dynamic,1
3261,In the array declaration or by using an initializer list,In a string you can specify with the strlen arrayname command This gets the length of the string Another way is with integers where you initiate the size from the start ex array 40 specifying a possible length of up to 40 Then it is passed by an object the actual ammout in the array Another way is to declare it in an initializing program,1
3262,In the array declaration or by using an initializer list,one way of specifying of array is A 10 ; other way of specifying array is a arraysize equals 1 2 3 4 5 6 7 8 9 10,1
3263,In the array declaration or by using an initializer list,use an arraylist or have your program ask the array how many elements it has As an obj it it should have member length that is the number of slots it has,1
3264,You can initialize and array by using an initializer list in its declaration or by initializing its size with a constant variable,You can initialize and array by using an initializer list in its declaration or by initializing its size with a constant variable,2
3265,You can initialize and array by using an initializer list in its declaration or by initializing its size with a constant variable,One way is to declare a size of the array using a variable that is equal to an integer The other way if the size is omitted in the declaration the compiler determines the size of the array based on the size of the initializer list,2
3266,You can initialize and array by using an initializer list in its declaration or by initializing its size with a constant variable,In the declaration int array x or with an initilizer int array equals 0 1 2 etc,2
3267,You can initialize and array by using an initializer list in its declaration or by initializing its size with a constant variable,1 Declare the length of the array int array 10 ; 2 Initialize the array int array equals 0 1 2 3; or or compiler will assume size of 4,2
3268,You can initialize and array by using an initializer list in its declaration or by initializing its size with a constant variable,Array lengths can be explicitly specified by inputing the number of elements between the brackets during declaration or implicitly by including an initializer list WITHOUT specifying a number between the compiler will automatically declare the array with the proper number of elements needed for the list,2
3269,You can initialize and array by using an initializer list in its declaration or by initializing its size with a constant variable,You can use an initializer list or simply tell the compiler how many elements you want in the array For an Initializer list : int a equals 10 2 3 4 5; For an elemental declaration : int b 5 ; Both arrays have 5 elements in them but array a is already initialized,2
3270,You can initialize and array by using an initializer list in its declaration or by initializing its size with a constant variable,Implicit namely when you give it values like 1 2 3 4 5 6 7 8 9 at which the compiler will automatically give this a size Static during the declaration,2
3271,You can initialize and array by using an initializer list in its declaration or by initializing its size with a constant variable,Supply an integer inside the brackets or the compiler counts the number of elements in the initializer list int n 5 ; int n equals 1 2 3 4 5,2
3272,You can initialize and array by using an initializer list in its declaration or by initializing its size with a constant variable,either initializing the array with a specific length or initializing an array while declaring its contents,2
3273,You can initialize and array by using an initializer list in its declaration or by initializing its size with a constant variable,within the brackets or by using an initializer list,2
3274,You can initialize and array by using an initializer list in its declaration or by initializing its size with a constant variable,explicitly by declaring it in brackets i e int array 50 ; and implicitly by initializing several values i e int array equals 1 2 3;,2
3275,You can initialize and array by using an initializer list in its declaration or by initializing its size with a constant variable,1 Initializing an array in a declaration with an initializer list 2 Specifying an array s size with a constant variable,2
3276,You can initialize and array by using an initializer list in its declaration or by initializing its size with a constant variable,Initializing the size in the brackets : int a 100 ; Initializing the length by assigning variables : int a equals 1 2 3;,2
3277,You can initialize and array by using an initializer list in its declaration or by initializing its size with a constant variable,you can assign the size of it inside the brackets when you declare the array 3 or you can have it set by how many items you set the array equal to 1 2 3,2
3278,The strings declared using an array of characters have a null element added at the end of the array,strings that are used in an char array are much easier to manipulate than as a string object because each character is stored separately rather than as a whole,1
3279,The strings declared using an array of characters have a null element added at the end of the array,the type string uses less storage and you have to change the string all at once with an array of characters you can make permutations of words using the characters stored in the array without needing to actually access and change the variables with an array of characters you can just change how they are accessed,1
3280,The strings declared using an array of characters have a null element added at the end of the array,By using an array of characters one can store and manipulate the strings rather than just having a type string variable,1
3281,The strings declared using an array of characters have a null element added at the end of the array,type string is an array of chars that will make an array of single letter characters while an array of strings will be an actual array of words or an array of char arrays,1
3282,The strings declared using an array of characters have a null element added at the end of the array,They are basically the same however a string ends with a null character denoting the end of the string and the size A char array has potential to be any size so it must be declared or limited,1
3283,The strings declared using an array of characters have a null element added at the end of the array,string is a class in the standard library and has method that modify it Whereas the char array is on able to be modifie by the user,1
3284,The strings declared using an array of characters have a null element added at the end of the array,By using an array of characters you are limited to the size of the array of characters By declaring by type the end of the string is acknowledged by white space,1
3285,The strings declared using an array of characters have a null element added at the end of the array,A char array reads a string as each individual character A string literal array reads the entire string,1
3286,The strings declared using an array of characters have a null element added at the end of the array,array of characters can only hold as many characters as the array size and strings are not that limited,1
3287,The strings declared using an array of characters have a null element added at the end of the array,Stings can only be modified by functions of the String class an array of characters can be modified by the user,1
3288,The strings declared using an array of characters have a null element added at the end of the array,if by type string the array contains an additional terminating null character,1
3289,The strings declared using an array of characters have a null element added at the end of the array,strings with type string are just that Strings They are not part of an array list at all where as one declared by an array is actually an array of characters able to be pointed and detected,1
3290,The strings declared using an array of characters have a null element added at the end of the array,the array of characters has a set length while the type string has virtually unlimited length,1
3291,The strings declared using an array of characters have a null element added at the end of the array,Char array Individual letters can be accessed directly with array subscript notation String array array subscript will return the entire string,1
3292,The strings declared using an array of characters have a null element added at the end of the array,when using an array individual characters can be accessed and manipulated,1
3293,The strings declared using an array of characters have a null element added at the end of the array,strings declared using an array of characters could result in data loss if character array not initialized large enough,1
3294,The strings declared using an array of characters have a null element added at the end of the array,an array is passed by reference therefore if an array of characters is changed the memory is changed not just the variable,1
3295,The strings declared using an array of characters have a null element added at the end of the array,the type string has several built in functions not available when using a char array but the individual characters in an array or more directly accessible than the characters in a string type string,1
3296,The strings declared using an array of characters have a null element added at the end of the array,declaring a string it includes white spaces but declaring a array of character does not include white spaces,0
3297,The strings declared using an array of characters have a null element added at the end of the array,Strings declared using the type string can vary in length Strings declared using an array of characters can not extend past the array length,1
3298,The strings declared using an array of characters have a null element added at the end of the array,cant modify individual characters of a type string array character type array can modify individual characters,1
3299,The strings declared using an array of characters have a null element added at the end of the array,the type string is a class and is safer while the other is just an array of characters,1
3300,The strings declared using an array of characters have a null element added at the end of the array,array it is the collection of similar data types ex : int a 10 ten indicates the size of array is index of array we can give only integer values to array of a where as string mean collection of group of characters string declarations have a datatype usually causes storage to be allocated in memory that is capable of holding some predetermined number of symbols However Arrays can be declared to contain values of any non reference data type Multiple arrarys of the same type,1
3301,Unlike in a string declared using type string in a string declared using an array of characters the programmer must provide the null terminating character and must ensure the array is large enough to hold the string and null terminating character,Unlike in a string declared using type string in a string declared using an array of characters the programmer must provide the null terminating character and must ensure the array is large enough to hold the string and null terminating character,2
3302,Unlike in a string declared using type string in a string declared using an array of characters the programmer must provide the null terminating character and must ensure the array is large enough to hold the string and null terminating character,All strings represented by character arrays end with the null character You declare an object of type string just like any other type for example : string s;,2
3303,Unlike in a string declared using type string in a string declared using an array of characters the programmer must provide the null terminating character and must ensure the array is large enough to hold the string and null terminating character,The data class type string are designed to handle character data and has many functions built into the class library to deal with them An array of characters however is subject to all the same rules of any other array with no real additional functionality Another difference is that the string class deals with the null character implicitly unlike an array of characters which must handle the null character explicitly,2
3304,Unlike in a string declared using type string in a string declared using an array of characters the programmer must provide the null terminating character and must ensure the array is large enough to hold the string and null terminating character,string declared used in an array of characters contains each character in the array and a special string termination character called the null character versus the type string,2
3305,Unlike in a string declared using type string in a string declared using an array of characters the programmer must provide the null terminating character and must ensure the array is large enough to hold the string and null terminating character,The array of characters has a null character 0 at the end of the array to signify the array end The string does not have this,2
3306,Unlike in a string declared using type string in a string declared using an array of characters the programmer must provide the null terminating character and must ensure the array is large enough to hold the string and null terminating character,array of characters need a termination character as well as size specification whether its explicit or implicit,2
3307,Unlike in a string declared using type string in a string declared using an array of characters the programmer must provide the null terminating character and must ensure the array is large enough to hold the string and null terminating character,an array of characters has one element a string doesnt have it is the termination element or null,2
3308,by reference,a reference pointer to an element in the array,1
3309,by reference,you must pass the array and its size to the function Ex function array size ;,1
3310,by reference,Usually the same way you pass anything else you do not have to specify the length of a char array just pass it to the function by sending the name of the array Example : char str 20 ; isPalindrome str ; or or this sends the char array to the function isPalindrome Otherwise would need to send the length of the array as well,1
3311,by reference,you pass a pointer to the first item and also pass the size,1
3312,by reference,In two parts the array itself and it is size so that the function it is being passed to can avoid out of bounds errors,1
3313,by reference,the same way but with at the declaration and the actual function,1
3314,by reference,specify the array name without brackets,1
3315,by reference,They are called by the function then the function must loop through the array to get the set of characters,1
3316,by reference,The function recieves both the array and the array size as parameters function arrayName arraySize,1
3317,by reference,1st you must specify the array name without brackets and then the array name and size are passed as two arguments in the function call,1
3318,by reference,function int int length,1
3319,by reference,The function reads the variables stores them then returns the what ever the variable reads The function then prints the content of the array,1
3320,by reference only,Arrays are passed to functions by reference,2
3321,by reference only,Arrays are passed by reference Individual array elements passed by value Functions that take arrays as arguments Function prototypes may include parameter names const array parameters,2
3322,by reference only,Arrays are passed by reference,2
3323,by reference only,By reference,2
3324,by reference only,Specify array name without brackets Array size is normally passed as another argument so the function can process the specific number of elements in the array Arrays are passed by reference Individual array elements passed by value Functions that take arrays as arguments,2
3325,by reference only,You pass the name of the array to the function So for : int bin 10 ; you pass it to an array like so : jingle bin ; but jingle must be declared correctly in order to receive an array either with prototype void jingle int ; or with the definition in its initialization : void jingle int array ; It is also worth noting that arrays are passed to function by reference so as to not copy large arrays over and over and burn memory This gives the function complete control over the array however,2
3326,by reference only,by reference by default unless you specify const at which the later will make the array unmodifiable,2
3327,by reference only,arrays are passed by reference passing the starting address of array programmer specifies the array name without brackets and passes the array size as another argument so the function can process the specific number of elements in the array,2
3328,The arrays declared as static live throughout the life of the program; that is they are initialized only once when the function that declares the array it is first called,a static array can only be referenced not accessed Also static arrays can be used without creating an object,1
3329,The arrays declared as static live throughout the life of the program; that is they are initialized only once when the function that declares the array it is first called,A program intializes static local arrays when their declarations are first encountered If a static array is not initialized explicityly by the programmer earch element of that array is intialized to zero by the compiler when the array is created Non static array members cannot be initialized at all in C plus plus,1
3330,The arrays declared as static live throughout the life of the program; that is they are initialized only once when the function that declares the array it is first called,Arrays that are static remain the same size throughout the program execution,1
3331,The arrays declared as static live throughout the life of the program; that is they are initialized only once when the function that declares the array it is first called,An array declared as static is available from beginning of program to end One with o static declaration disappears if it is not accessed within the right scope,1
3332,The arrays declared as static live throughout the life of the program; that is they are initialized only once when the function that declares the array it is first called,a static array has pre runtime size and that size cannot be changed A dynamic array gets its size at runtime,1
3333,The arrays declared as static live throughout the life of the program; that is they are initialized only once when the function that declares the array it is first called,All elements are initialized to zero if not explicitly initialized this does not happen for automatic local arrays,1
3334,The arrays declared as static live throughout the life of the program; that is they are initialized only once when the function that declares the array it is first called,All elements are initialized to zero if not explicitly initialized for a static array while a non static array is not initialized to zero,1
3335,The arrays declared as static live throughout the life of the program; that is they are initialized only once when the function that declares the array it is first called,A static array has a set size that cannot change The data may not need all of the space assigned or could go beyond the size,1
3336,The arrays declared as static live throughout the life of the program; that is they are initialized only once when the function that declares the array it is first called,A static member prevents naming conflicts not put into global namespace while allowing for information hiding private public,1
3337,The arrays declared as static live throughout the life of the program; that is they are initialized only once when the function that declares the array it is first called,Static arrays are those with a declared size that is known to the program whereas non static arrays leave the size undeclared and open so it can be assigned later Usually used for input purposes,1
3338,The arrays declared as static live throughout the life of the program; that is they are initialized only once when the function that declares the array it is first called,A static array cannot be changed in the program,1
3339,The arrays declared as static live throughout the life of the program; that is they are initialized only once when the function that declares the array it is first called,if they are declared fixed or static that means they cannot change size once their storage has been allocated however one that is not or dynamic arrarys can be resized,1
3340,a static array will store the new values that were assigned to each of its elements meaning if you call a function twice it will use the last values that were returned the first time if you do not declare it static then the new values will not be stored and will be reset to their original value,a static array will store the new values that were assigned to each of its elements meaning if you call a function twice it will use the last values that were returned the first time if you do not declare it static then the new values will not be stored and will be reset to their original value,2
3341,a static array will store the new values that were assigned to each of its elements meaning if you call a function twice it will use the last values that were returned the first time if you do not declare it static then the new values will not be stored and will be reset to their original value,An array declared as static is not created and and initialized each time the function and it is also not destroyed when the function terminates,2
3342,a static array will store the new values that were assigned to each of its elements meaning if you call a function twice it will use the last values that were returned the first time if you do not declare it static then the new values will not be stored and will be reset to their original value,a static array will only be initilized once a non static array will be re initilized once the program reaches the initilization line again,2
3343,a static array will store the new values that were assigned to each of its elements meaning if you call a function twice it will use the last values that were returned the first time if you do not declare it static then the new values will not be stored and will be reset to their original value,If an array is declared as static it is not created each time the array is called,2
3344,a static array will store the new values that were assigned to each of its elements meaning if you call a function twice it will use the last values that were returned the first time if you do not declare it static then the new values will not be stored and will be reset to their original value,An array that is not declared as static will re initialize every time the function declaring it is called A static array will initialize only once at the declaration and will store the values in it is elements throughout the duration of the program even if the same function is called multiple times a static array will only initialize once,2
3345,a static array will store the new values that were assigned to each of its elements meaning if you call a function twice it will use the last values that were returned the first time if you do not declare it static then the new values will not be stored and will be reset to their original value,A static local array exists for the duration of the program and its elements are initialized to 0 if not explicitly initialized So a static local array elements will still be the same when called later unless specifically initialized to something else This does not happen for automatic arrays,2
3346,a static array will store the new values that were assigned to each of its elements meaning if you call a function twice it will use the last values that were returned the first time if you do not declare it static then the new values will not be stored and will be reset to their original value,static arrays keep the values after the end of a function while non static reinitialize every time,2
3347,a static array will store the new values that were assigned to each of its elements meaning if you call a function twice it will use the last values that were returned the first time if you do not declare it static then the new values will not be stored and will be reset to their original value,Static arrays are created and initialized only once and the values are not destroyed when the function terminates in the program Automatic arrays reset everytime the function is called,2
3348,a static array will store the new values that were assigned to each of its elements meaning if you call a function twice it will use the last values that were returned the first time if you do not declare it static then the new values will not be stored and will be reset to their original value,its not created and initialized each time program calls the function and is not destroyed every time the function ends in the program,2
3349,a static array will store the new values that were assigned to each of its elements meaning if you call a function twice it will use the last values that were returned the first time if you do not declare it static then the new values will not be stored and will be reset to their original value,When we declare it static the array is not destroyed after the function is over When an array is not declared as static the array is created and initialized every time a function calls it,2
3350,a static array will store the new values that were assigned to each of its elements meaning if you call a function twice it will use the last values that were returned the first time if you do not declare it static then the new values will not be stored and will be reset to their original value,A static array exists in memory until the program terminates whereas an automatic or normal array is removed when the function that created it terminates,2
3351,a static array will store the new values that were assigned to each of its elements meaning if you call a function twice it will use the last values that were returned the first time if you do not declare it static then the new values will not be stored and will be reset to their original value,a static array is allocated when the program starts and is freed when the program exits but has limited scope while an array that is not declared static is allocated and freed when it comes into and out of scope,2
3352,All the dimensions except the first one,at least 2 depending on how many arrays are being used,1
3353,All the dimensions except the first one,all of them,1
3354,All the dimensions except the first one,It depends what parameters you are passing in a multidimensional A multideminsional can have more than two dimensions,1
3355,All the dimensions except the first one,All of the dimensions must be specified,1
3356,All the dimensions except the first one,just the first one at least,1
3357,All the dimensions except the first one,Two paramaters the array and how many columns array a 3,1
3358,All the dimensions except the first one,The size of the first dimension can be omitted same as a regular array However for every dimension outside the first the size of those dimensions must be specified when passed for example a multi dimensional array of 2 4 6 with the name MultiArray would be passed as : MultiArray 4 6 2,1
3359,All the dimensions except the first one,Size of subsequent dimensions are required Compiler must know how many elements to skip to move to the second element in the first dimension,1
3360,All the dimensions except the first one,when passing in main a multidimensional array to a function no dimensions need be specified,1
3361,All the dimensions except the first one,as many as there are dimensions Most commonly just rows and columns,1
3362,All the dimensions except the first one,at least 2 but it should always equal the number of dimensions that the argument is expecting like blah will require 4 dimensional array input blah will require a 3 dimensional array blah will require a 2 dimensional array,1
3363,All the dimensions except the first one,None just pass the array name,1
3364,All the dimensions except the first one,the first needs to be specified by size and the rest need only be stated first like this 3 then,1
3365,All the dimensions except the first one,Multi dimensional arrays are accessed using more than 1 index one for each dimension at least,1
3366,When passing a multi dimensional array all dimensions must be specified except for the first dimension,When passing a multi dimensional array all dimensions must be specified except for the first dimension,2
3367,When passing a multi dimensional array all dimensions must be specified except for the first dimension,The first dimension is not required however the subsequent dimension s are needed for the compiler,2
3368,When passing a multi dimensional array all dimensions must be specified except for the first dimension,Every dimension after the first,2
3369,When passing a multi dimensional array all dimensions must be specified except for the first dimension,the size of the first dimension does not need to be specified but all other dimensions do,2
3370,When passing a multi dimensional array all dimensions must be specified except for the first dimension,All dimensions except for the first one need to be specified when passing an array to a function the compiler needs to know how many memory addresses to skip to make it back to the 2nd element in the first dimension The size of the first dimension does not need to be specified,2
3371,When passing a multi dimensional array all dimensions must be specified except for the first dimension,all subsequent dimensions after the first dimension first is not needed to be specified,2
3372,When passing a multi dimensional array all dimensions must be specified except for the first dimension,all dimensions excluding the first one,2
3373,When passing a multi dimensional array all dimensions must be specified except for the first dimension,All subsequent dimensions after the first one,2
3374,Run time error,compilation error,0
3375,Run time error,Generates a compilation error The compiler will complain that the variable you are referring to was never declared,0
3376,Run time error,Compilation error,0
3377,Using an index outside the bounds of the array generates a run time error,Using an index outside the bounds of the array generates a run time error,2
3378,Using an index outside the bounds of the array generates a run time error,run time error,2
3379,Using an index outside the bounds of the array generates a run time error,Its a run time error,2
3380,Using an index outside the bounds of the array generates a run time error,Run time error,2
3381,Using an index outside the bounds of the array generates a run time error,This is a run time error The program will compile AND execute so these errors can be difficult to debug,2
3382,Using an index outside the bounds of the array generates a run time error,this is a run time error or execution time error,2
3383,Using an index outside the bounds of the array generates a run time error,Run time,2
3384,Using an index outside the bounds of the array generates a run time error,run time,2
3385,Using an index outside the bounds of the array generates a run time error,runtime error,2
3386,Using an index outside the bounds of the array generates a run time error,It will NOT cause a compilation error It will either give a run time error or will give the value at that actual location in memory causing a logic error,2
3387,Using an index outside the bounds of the array generates a run time error,it is a run time error,2
3388,By rows,usually it is by rows then followed by the column but it is up to the programmer to determine how values are stored in bi dimensional arrays,1
3389,By rows,A bi dimensional or two dimensional array is stored in a row column matrix Where the first index indicates the row and the second indicates the column This means that when array elements are accessed in the order in which they are actually stored in memory the right index changes faster than the left,1
3390,By rows,m by n by row column,1
3391,By rows,By column,0
3392,By rows,columns,0
3393,By rows,Both they are stored in seperate sections,1
3394,By rows,by rows then columns,1
3395,By rows,by row and column,1
3396,By rows,No answer,0
3397,by rows,by rows,2
3398,by rows,Multi dimensional arrays are stored in memory by rows,2
3399,by rows,They are stored in memory in rows,2
3400,by rows,rows,2
3401,by rows,By rows,2
3402,by rows,bi dimensional arrays are stored by rows,2
3403,by rows,by dimensional arrays are stored by row,2
3404,by rows,x by y is row by column So x is rows and y is columns Since the length of the row is not needed when passing the array to the function this leads me to believe that bi dimensional arrays are stored by rows at a time,2
3405,by rows,Rows,2
3406,by rows,by rows of rows,2
3407,by rows,stored by rows,2
3408,Taking one array element at a time from left to right it inserts it in the right position among the already sorted elements on its left,Takes an element of an array and compares it with the next element depending on the values of the two elements they will switch and then the program will compare the new switched element with the next one in the array,1
3409,Taking one array element at a time from left to right it inserts it in the right position among the already sorted elements on its left,The sorted array or list is built one entry at a time,1
3410,Taking one array element at a time from left to right it inserts it in the right position among the already sorted elements on its left,Compare two numbers at a time and swap until the entire list is sorted,1
3411,Taking one array element at a time from left to right it inserts it in the right position among the already sorted elements on its left,insertion sort is were after k iterations the first k items in the array are sorted it take the k plus 1 item and inserts it into the correct position in the already sorted k elements,1
3412,Taking one array element at a time from left to right it inserts it in the right position among the already sorted elements on its left,Looking at the 2nd element move forward and place the element in the correct spot,1
3413,Taking one array element at a time from left to right it inserts it in the right position among the already sorted elements on its left,Take a number and choose a pivot point and insert the number in the correct position from the pivot point,1
3414,Taking one array element at a time from left to right it inserts it in the right position among the already sorted elements on its left,have a marker and sort everything to the left of the value for every new value when moving to the right,1
3415,Taking one array element at a time from left to right it inserts it in the right position among the already sorted elements on its left,The main idea behind insertion sort is to take a random variable from the right and insert it in order to the left,1
3416,Taking one array element at a time from left to right it inserts it in the right position among the already sorted elements on its left,Insertion sort progresses through a list of elements and determines where the next element should be inserted into an already sorted array starting with sorting and using the first two elements,1
3417,Taking one array element at a time from left to right it inserts it in the right position among the already sorted elements on its left,it goes through the list only once picking each integer and putting it in its desired position then continuing,1
3418,Taking one array element at a time from left to right it inserts it in the right position among the already sorted elements on its left,Inserting array items in to their appropriate positions from smallest to largest at a pivot which starts on the second element of the array,1
3419,Taking one array element at a time from left to right it inserts it in the right position among the already sorted elements on its left,Insert the item into its proper position by shifting larger sorted array values to the right,1
3420,Taking one array element at a time from left to right it inserts it in the right position among the already sorted elements on its left,Insertion sort is an algorithm where the first element of the array is in the sorted list all the other pick one by one and taken from the unsorted array to the sorted array,1
3421,Taking one array element at a time from left to right it inserts it in the right position among the already sorted elements on its left,the insertion sort creates a new array and inserts each item in its place with respect to the new array,1
3422,Taking one array element at a time from left to right it inserts it in the right position among the already sorted elements on its left,Starting with the first element in the array each following element is put in place by determining if it is smaller or larger than the starting element,1
3423,Taking one array element at a time from left to right it inserts it in the right position among the already sorted elements on its left,one by one each item is taken and placed into the correct place in the sorted portion of the array until there are no more items,1
3424,Taking one array element at a time from left to right it inserts it in the right position among the already sorted elements on its left,Insertion sort is a simple sorting algorithm a comparison sort in which the sorted array or list is built one entry at a time,1
3425,Insertion sort divides the list into sorted and unsorted regions then takes each item from the unsorted region and inserts it into its correct order in the sorted region,Insertion sort divides the list into sorted and unsorted regions then takes each item from the unsorted region and inserts it into its correct order in the sorted region,2
3426,Insertion sort divides the list into sorted and unsorted regions then takes each item from the unsorted region and inserts it into its correct order in the sorted region,It starts with the second element and checks it to see if it is less than the element s to the left of it and if it is it inserts it into its corrected position,2
3427,Insertion sort divides the list into sorted and unsorted regions then takes each item from the unsorted region and inserts it into its correct order in the sorted region,Assume the first number is sorted then move down the list and insert the numbers you come across into the corresponding place on the sorted side of the list,2
3428,Insertion sort divides the list into sorted and unsorted regions then takes each item from the unsorted region and inserts it into its correct order in the sorted region,Starting at the beginning of an array take each element in order and place it in it is correct position relative to all previously sorted elements,2
3429,Insertion sort divides the list into sorted and unsorted regions then takes each item from the unsorted region and inserts it into its correct order in the sorted region,To sort the elements in an array by removing an element from the input data and inserting it at the correct position,2
3430,Insertion sort divides the list into sorted and unsorted regions then takes each item from the unsorted region and inserts it into its correct order in the sorted region,Insertion sort removes an element from the data and inserts it at the correct position in the already sorted list,2
3431,Insertion sort divides the list into sorted and unsorted regions then takes each item from the unsorted region and inserts it into its correct order in the sorted region,Every iteration of an insertion sort takes away an element from the input data inserting it at the right position in the sorted list,2
3432,Insertion sort divides the list into sorted and unsorted regions then takes each item from the unsorted region and inserts it into its correct order in the sorted region,Insertion sort takes each entitity of an unsorted array in order and sorts it into the correct position between the entities it has sorted,2
3433,Insertion sort divides the list into sorted and unsorted regions then takes each item from the unsorted region and inserts it into its correct order in the sorted region,it takes the second element and swaps it with the 1st if it is less and keeps it there if its larger then it goes to the third element and inserts it in the right places with respect to the first 2 elements and so on,2
3434,Taking one array element at a time from left to right it identifies the minimum from the remaining elements and swaps it with the current element,Selection sort searches the whole array for the largest item and puts it at the end of the array then searches for the second largest item and puts it at the second to last spot and so on,1
3435,Taking one array element at a time from left to right it identifies the minimum from the remaining elements and swaps it with the current element,Find the lowest value and place it at the front then find the next lowest and place it in front of the last value etc,1
3436,Taking one array element at a time from left to right it identifies the minimum from the remaining elements and swaps it with the current element,Cycle through the unsorted list place the minimum in the next slot in the sorted list and repeat,1
3437,Taking one array element at a time from left to right it identifies the minimum from the remaining elements and swaps it with the current element,To sort the elements by comparing two elements and swapping the smaller one to sort the elements in the array,1
3438,Taking one array element at a time from left to right it identifies the minimum from the remaining elements and swaps it with the current element,Selection sort finds the minimum value in the list swaps it with the first value in the list and repeats throughout the list,1
3439,Taking one array element at a time from left to right it identifies the minimum from the remaining elements and swaps it with the current element,The main idea behind selection sort is to take the least variable from the right and put it directly to the left,1
3440,Taking one array element at a time from left to right it identifies the minimum from the remaining elements and swaps it with the current element,It runs through and finds the lowest or highest value and puts it in its desired position,1
3441,Taking one array element at a time from left to right it identifies the minimum from the remaining elements and swaps it with the current element,Search for the largest item in an array and swap it with the last unsorted item,1
3442,Taking one array element at a time from left to right it identifies the minimum from the remaining elements and swaps it with the current element,the selection sort chooses the largest or smallest value in an unsorted list and creates a new list using the selection depending on how it is sorted,1
3443,Taking one array element at a time from left to right it identifies the minimum from the remaining elements and swaps it with the current element,Selection sort finds the smallest number left unsorted in an array and puts it at the end of what it has sorted,1
3444,Taking one array element at a time from left to right it identifies the minimum from the remaining elements and swaps it with the current element,To put the biggest element at the end of the list and place the next highest element behind it and so on,1
3445,Taking one array element at a time from left to right it identifies the minimum from the remaining elements and swaps it with the current element,the sort finds the largest item and places it at the end then then next largest is found and placed next to last continue until there is only one number left this is the beginning of the sorted array,1
3446,Searches an array for the largest or the smallest element and is moved out to the front of the array then it will search for the next largest or the smallest element to move out to the front,Finds the minimum value and swap it with the value in the first position,2
3447,Searches an array for the largest or the smallest element and is moved out to the front of the array then it will search for the next largest or the smallest element to move out to the front,It finds the minimum element in the array and swaps it with the first element then repeats this step swapping the minimum element with nth positions in the array,2
3448,Searches an array for the largest or the smallest element and is moved out to the front of the array then it will search for the next largest or the smallest element to move out to the front,find the minimum value in the list swap it with the first element in the list the find the second largest and swap it with the second element in the array continue like this until the array is sorted,2
3449,Searches an array for the largest or the smallest element and is moved out to the front of the array then it will search for the next largest or the smallest element to move out to the front,Find the smallest and put it in the current position till you get to the end,2
3450,Searches an array for the largest or the smallest element and is moved out to the front of the array then it will search for the next largest or the smallest element to move out to the front,Find the lowest unsorted value in the array and place it at the current position starting at the first element in the array and advance the current position by one,2
3451,Searches an array for the largest or the smallest element and is moved out to the front of the array then it will search for the next largest or the smallest element to move out to the front,Select the minimum number from the array and put it in the current position then move on,2
3452,Searches an array for the largest or the smallest element and is moved out to the front of the array then it will search for the next largest or the smallest element to move out to the front,Find the lowest value and place it in the front of the list and swap it with that value Continue moving right,2
3453,Searches an array for the largest or the smallest element and is moved out to the front of the array then it will search for the next largest or the smallest element to move out to the front,Find the smallest value in the list and make it the first element then find the smallest value of the leftover list and make it the first element of the leftover list and continue until the list is sorted,2
3454,Searches an array for the largest or the smallest element and is moved out to the front of the array then it will search for the next largest or the smallest element to move out to the front,Places the smallest item in the list at position 1 and then proceeds to each value until the last position of the ray is reached,2
3455,Searches an array for the largest or the smallest element and is moved out to the front of the array then it will search for the next largest or the smallest element to move out to the front,finds the smallest element and places in 1st position then the process is repeated on the rest of the array,2
3456,Searches an array for the largest or the smallest element and is moved out to the front of the array then it will search for the next largest or the smallest element to move out to the front,Select the smallest number in the list and move it to the front of the list and then advance to the next number,2
3457,Searches an array for the largest or the smallest element and is moved out to the front of the array then it will search for the next largest or the smallest element to move out to the front,selects the minimum from the remaining elements of the array and palces the miminum in the current position and moves to the next position,2
3458,Searches an array for the largest or the smallest element and is moved out to the front of the array then it will search for the next largest or the smallest element to move out to the front,you loop through the entire list and for each iteration you find the smallest element and move it to the current position,2
3459,Searches an array for the largest or the smallest element and is moved out to the front of the array then it will search for the next largest or the smallest element to move out to the front,Find the minimum value in the list swap it with the value in the first position; repeat the steps above for remainder of the list starting in the second position,2
3460,N the length of the array operations achieved for a sorted array,The run time for this sorting program is n to the power of 2 Best case is the list is already sorted worst case is the list is sorted but in reverse,1
3461,N the length of the array operations achieved for a sorted array,Insertion sort is O n and performs n minus 1 operations in the best case scenario which is when the list or array is already sorted,1
3462,N the length of the array operations achieved for a sorted array,The number of operations for insertions sort under best case is n n minus 1 divided by 2 The best case for insertion sort is on a sorted list where it runs is O n,1
3463,N the length of the array operations achieved for a sorted array,Best case would be O n or n minus 1 because that is what it takes to scan the array and make one swap The array would then be sorted and would take only 1 operation,1
3464,N the length of the array operations achieved for a sorted array,Best case 1 Worst Case N,1
3465,N the length of the array operations achieved for a sorted array,Best case is all elements sorted n minus 1,1
3466,N the length of the array operations achieved for a sorted array,1 operation the best case scenario s where it is already sorted and does one comparision,1
3467,N the length of the array operations achieved for a sorted array,n operations where n is the number of items,1
3468,N the length of the array operations achieved for a sorted array,O n the list is already sorted,1
3469,N the length of the array operations achieved for a sorted array,Insertion sort will take n minus 1 operations if the array is in reverse order,1
3470,N the length of the array operations achieved for a sorted array,1 where there is a list of two ints and only one must be moved,1
3471,N the length of the array operations achieved for a sorted array,Best case is N while the worst case is N factorial,1
3472,N the length of the array operations achieved for a sorted array,n minus 1 The best case is when the array is already sorted,1
3473,N the length of the array operations achieved for a sorted array,worst case its equals O n time best case its equals O n to the power of 2 time,1
3474,N the length of the array operations achieved for a sorted array,insertion sort will make zero operations and length 1 comparisons in the best case scenario that is when the array its given is already in order,1
3475,N the length of the array operations achieved for a sorted array,theta n the best case senario is that everything is already sorted,1
3476,N the length of the array operations achieved for a sorted array,it could be considered that having only one item would be the easiest to sort but this could also be a trivial result as nothing is moved having two items allows the algorithm to sort the items into the correct order,1
3477,N the length of the array operations achieved for a sorted array,the best case is if it only has to look through the list once The best case scenario is when it goes through the list and does not have to make any changes the list is already sorted,1
3478,N the length of the array operations achieved for a sorted array,very simplistic it moves one element from the list by one and inserting them in their correct position into a new slot then starting over best case is 0 1,1
3479,It will do n operations where n is the number of elements in the array Best case is when all the elements are already sorted,It will do n operations where n is the number of elements in the array Best case is when all the elements are already sorted,2
3480,It will do n operations where n is the number of elements in the array Best case is when all the elements are already sorted,The best case scenario for an insertion sort where all the elements of the array have been already sorted will cause the for loop to iterate x times x being the number of elements in the array and the while loop to never have to iterate resulting in the insertion sort to require x operations,2
3481,It will do n operations where n is the number of elements in the array Best case is when all the elements are already sorted,In the best case scenario of an already sorted list insertion sort will progress once through the list So the number of operations is directly proportional to the number of elements in the list Also noted as O n in big o notation,2
3482,It will do n operations where n is the number of elements in the array Best case is when all the elements are already sorted,N number of times Where N equals the number of elements in the list Best case scenario is that the elements in the list are already sorted,2
3483,It will do n operations where n is the number of elements in the array Best case is when all the elements are already sorted,the best case scenario for insertion sort is a list that is already sorted the number of operations would be the same as the number of elements,2
3484,It will do n operations where n is the number of elements in the array Best case is when all the elements are already sorted,n operations The best case scenario is when all the numbers are in increasing order,2
3485,When the size of the array to be sorted is 1 or 2,The best case is the same as the worst case O n log n for a recursive merge sort,1
3486,When the size of the array to be sorted is 1 or 2,T n equals 0 if n is less than 2,1
3487,When the size of the array to be sorted is 1 or 2,n multiplied by log n,1
3488,When the size of the array to be sorted is 1 or 2,if the array length is less than or equal to 1 then that array is returned to the other array and merged together,1
3489,When the size of the array to be sorted is 1 or 2,if right is greater than left mid equals right plus left divided by 2; m sort numbers temp left mid ; m sort numbers temp mid plus 1 right ; merge numbers temp left mid plus 1 right ;,1
3490,When the size of the array to be sorted is 1 or 2,When there is only one element in the array or when the starting element in the array is the same as the ending element,1
3491,When the size of the array to be sorted is 1 or 2,when each half or the original array has nothing else to sort and puts the halfs back together,1
3492,When the size of the array to be sorted is 1 or 2,the size of the list being sent is is less than or equal to 1,1
3493,When the size of the array to be sorted is 1 or 2,O n log n,1
3494,The base case for a recursive merge sort is one number One number by itself is a sorted list regardless of what number it is,The base case for a recursive merge sort is one number One number by itself is a sorted list regardless of what number it is,2
3495,The base case for a recursive merge sort is one number One number by itself is a sorted list regardless of what number it is,The base case for a recursive implementation of merge sort is when the sequence being passed to merge sort has less than 2 elements,2
3496,The base case for a recursive merge sort is one number One number by itself is a sorted list regardless of what number it is,The base case for a recursive implementation of merge sort is one,2
3497,The base case for a recursive merge sort is one number One number by itself is a sorted list regardless of what number it is,there is one object in the split array to sort,2
3498,The base case for a recursive merge sort is one number One number by itself is a sorted list regardless of what number it is,The base case is when the length of the current array is 1,2
3499,The base case for a recursive merge sort is one number One number by itself is a sorted list regardless of what number it is,Best case is one element One element is sorted,2
3500,The base case for a recursive merge sort is one number One number by itself is a sorted list regardless of what number it is,A list size of 1 where it is already sorted,2
3501,The base case for a recursive merge sort is one number One number by itself is a sorted list regardless of what number it is,A list or array of only 1 element,2
3502,The base case for a recursive merge sort is one number One number by itself is a sorted list regardless of what number it is,A single Element on the Array,2
3503,The base case for a recursive merge sort is one number One number by itself is a sorted list regardless of what number it is,There is only one element in the subarray,2
3504,The base case for a recursive merge sort is one number One number by itself is a sorted list regardless of what number it is,The sequence of numbers has zero or one elements,2
3505,A variable that contains the address in memory of another variable,A data type whose value refers to another value stored elsewhere in the computer memory using its address,1
3506,A variable that contains the address in memory of another variable,a name that represents actual location or value of a data type int star of bPtr points to an integer value,1
3507,A variable that contains the address in memory of another variable,It is like a variable however instead of holding data it holds a location in memory,1
3508,A variable that contains the address in memory of another variable,A pointer is a reference to the memory location of an object,1
3509,A variable that contains the address in memory of another variable,It is a variable that contains not only a star of value but has a memory address associated with it and can be moved along a string or an array by jumping up one memory address,1
3510,A variable that contains the address in memory of another variable,Is a reference call to the place in memory where the object is stored,1
3511,A variable that contains the address in memory of another variable,it is a type that points to something else It is the memory address of something else,1
3512,A variable that contains the address in memory of another variable,A pointer is a way to get at another object Essentially it is a way to grab an instance of an object and then either pass that instance a message or retreive some data from that object A pointer is actually just an address of where an instance is held in memory,1
3513,Its a location in memory that contains the memory address of another location in memory that contains information,Its a location in memory that contains the memory address of another location in memory that contains information,2
3514,Its a location in memory that contains the memory address of another location in memory that contains information,A pointer is a variable that contains a memory address as its value,2
3515,Its a location in memory that contains the memory address of another location in memory that contains information,A pointer is a variable which stores the address of another variable,2
3516,Its a location in memory that contains the memory address of another location in memory that contains information,Pointers are variables that contain as their values memory addresses of other variables,2
3517,Its a location in memory that contains the memory address of another location in memory that contains information,a pointer is a programming language data type whose value refers directly to or points to another value stored elsewhere in the computer memory using its address,2
3518,Its a location in memory that contains the memory address of another location in memory that contains information,A data type whose value refers to another value stored somewhere else in the computer memory using its address,2
3519,Its a location in memory that contains the memory address of another location in memory that contains information,A pointer is a variable that contains the memory address of a variable that has a value,2
3520,Its a location in memory that contains the memory address of another location in memory that contains information,Contains a variable memory address as a value,2
3521,Its a location in memory that contains the memory address of another location in memory that contains information,variable that points to the memory address of another variable and it is type specific,2
3522,Its a location in memory that contains the memory address of another location in memory that contains information,A pointer variable contains the number of a memory address as its value which may be null or 0 or the address of some value stored in memory,2
3523,Its a location in memory that contains the memory address of another location in memory that contains information,A variable that contains the memory address of another variable that contains a specific value,2
3524,The memory address of its operand,The address of the where the data is stored : address of b will return the address of b,1
3525,The memory address of its operand,the ampersand ADDRESS means pass by reference When the function is called a pointer to the variable instead of the variable itself will be passed into the function,1
3526,The memory address of its operand,Returns the address location in memory of the item,1
3527,The memory address of its operand,The memory address of operand 0x 000000 or something along those lines,1
3528,The memory address of its operand,The object memory address,1
3529,The memory address of its operand,It returns the memory address of it is operand That is if applied to a normal variable it gives the variable memory address just as a pointer variable might,1
3530,This operator returns the memory address of its operand,This operator returns the memory address of its operand,2
3531,This operator returns the memory address of its operand,The address operator returns the memory address of its operand,2
3532,This operator returns the memory address of its operand,Returns memory address of its operand,2
3533,This operator returns the memory address of its operand,The address ADDRESS operator returns the memory address of its operand,2
3534,This operator returns the memory address of its operand,Returns the memory address of its operand,2
3535,This operator returns the memory address of its operand,The ADDRESS operator returns the address of a variable,2
3536,This operator returns the memory address of its operand,ADDRESS returns the memory address of its operand,2
3537,This operator returns the memory address of its operand,The ADDRESS operator returns the memory address of the variable it precedes,2
3538,This operator returns the memory address of its operand,The ADDRESS is a unary operator that returns the memory address of its operand,2
3539,An alias synonym for the name of the object that its operand points to in memory It is the dereferencing operator,the STAR operator returns the value in the memory address the element points to,1
3540,An alias synonym for the name of the object that its operand points to in memory It is the dereferencing operator,The STAR returns the value,1
3541,An alias synonym for the name of the object that its operand points to in memory It is the dereferencing operator,The dereferencing operator returns the dereferenced object,1
3542,An alias synonym for the name of the object that its operand points to in memory It is the dereferencing operator,it returns the information in the address the pointer points to,1
3543,An alias synonym for the name of the object that its operand points to in memory It is the dereferencing operator,the star operator returns the value at the memory address the pointer is pointing at,1
3544,An alias synonym for the name of the object that its operand points to in memory It is the dereferencing operator,The star operator returns the object at that memory location,1
3545,An alias synonym for the name of the object that its operand points to in memory It is the dereferencing operator,The STAR operator returns the value of the object memory address it precedes,1
3546,An alias synonym for the name of the object that its operand points to in memory It is the dereferencing operator,The value stored in the object being pointed to,1
3547,An alias synonym for the name of the object that its operand points to in memory It is the dereferencing operator,the value of the variable the pointer points to,1
3548,An alias synonym for the name of the object that its operand points to in memory It is the dereferencing operator,It dereferences a pointer meaning it returns the value stored in the memory address a pointer refers to,1
3549,An alias synonym for the name of the object that its operand points to in memory It is the dereferencing operator,a reference to a equals variable,1
3550,returns a synonym for the object to which its pointer operand points,returns a synonym for the object to which its pointer operand points,2
3551,returns a synonym for the object to which its pointer operand points,The star operator returns a synonym for the object to which its pointer operand points,2
3552,returns a synonym for the object to which its pointer operand points,It returns a synonym alias or nickname of the name of the object that its operand points to in memory dereferencing the pointer,2
3553,returns a synonym for the object to which its pointer operand points,Returns an alias or nickname for the object to which the pointer operand points,2
3554,returns a synonym for the object to which its pointer operand points,The STAR operator returns the dereferenced pointer variable ie : it returns the value of whatever variable the pointer is pointing to,2
3555,returns a synonym for the object to which its pointer operand points,multiplied by returns the synonym for the object its operand points to,2
3556,By initializing a pointer to point to the first element of the array and then incrementing this pointer with the index of the array element,The array itself can be signed to a pointer or each element of the array can be assigned to a pointer,1
3557,By initializing a pointer to point to the first element of the array and then incrementing this pointer with the index of the array element,An array can be addressed in pointer or offset notation by setting a pointer variable equal to the variable name of the array Elements of the array can then be accessed by adding an offset value to the pointer variable,1
3558,By initializing a pointer to point to the first element of the array and then incrementing this pointer with the index of the array element,Element b n can be accessed by multiplied by bPtr plus n,1
3559,By initializing a pointer to point to the first element of the array and then incrementing this pointer with the index of the array element,Using either the name of the array as a pointer or using a separate pointer that points to the array,1
3560,By initializing a pointer to point to the first element of the array and then incrementing this pointer with the index of the array element,An element b 3 can be referenced by using multiplied by bPtr plus 3 instead,1
3561,By initializing a pointer to point to the first element of the array and then incrementing this pointer with the index of the array element,yes multiplied by array plus offset,1
3562,By initializing a pointer to point to the first element of the array and then incrementing this pointer with the index of the array element,The name of an array is considered to be a pointer in C plus plus and can be passed as such in functions parameters Declaring int a 10 ; creates a pointer a which stores the address of a 0,1
3563,By initializing a pointer to point to the first element of the array and then incrementing this pointer with the index of the array element,Element b n can be accessed by multiplied by bPtr plus n is an example of how an array can be addressed as pointer or offset notation,1
3564,By initializing a pointer to point to the first element of the array and then incrementing this pointer with the index of the array element,multiplied by array plus element,1
3565,By initializing a pointer to point to the first element of the array and then incrementing this pointer with the index of the array element,multiplied by f 3,1
3566,By initializing a pointer to point to the first element of the array and then incrementing this pointer with the index of the array element,The pointer to the array will initially point to the first element of that array When the pointer is incremented it will point to the next element and so on,1
3567,By initializing a pointer to point to the first element of the array and then incrementing this pointer with the index of the array element,With int x 10 ; int star of xPtr; xPtr equals x; Address address of x 1 is the same as xPtr plus 1,1
3568,By initializing a pointer to point to the first element of the array and then incrementing this pointer with the index of the array element,The array can act as a pointer or be referenced by a pointer multiplied by arrayPtr plus 3 or multiplied by array plus 3,1
3569,By initializing a pointer to point to the first element of the array and then incrementing this pointer with the index of the array element,by using the multiplied by pointer plus element index,1
3570,By initializing a pointer to point to the first element of the array and then incrementing this pointer with the index of the array element,using the star operator array : b n can be accessed by multiplied by bpointer plus n,1
3571,By initializing a pointer to point to the first element of the array and then incrementing this pointer with the index of the array element,Element A n can be accessed by multiplied by APtr plus n,1
3572,By initializing a pointer to point to the first element of the array and then incrementing this pointer with the index of the array element,by referencing a pointer and referring to other pointers relative to the first pointer pointer plus 1 pointer plus 2 etc,1
3573,By initializing a pointer to point to the first element of the array and then incrementing this pointer with the index of the array element,ADDRESS b 3 is as bptr plus 3 Array can be treated as pointer,1
3574,By initializing a pointer to point to the first element of the array and then incrementing this pointer with the index of the array element,a i equals multiplied by a plus i,1
3575,By initializing a pointer to point to the first element of the array and then incrementing this pointer with the index of the array element,address of b 3 bPtr plus 3,1
3576,By initializing a pointer to point to the first element of the array and then incrementing this pointer with the index of the array element,multiplied by arrayName plus index,1
3577,By initializing a pointer to point to the first element of the array and then incrementing this pointer with the index of the array element,multi dimensional array,0
3578,you get the memory location of the first element and the you add an offset to it to get other elements,you get the memory location of the first element and the you add an offset to it to get other elements,2
3579,you get the memory location of the first element and the you add an offset to it to get other elements,you can have a pointer to the front of the array and add to the memory location or offset from the initial value,2
3580,you get the memory location of the first element and the you add an offset to it to get other elements,First some pointer variable must reference the first entity in the array Any variable in the array can then be accessed by referring to that first entity address plus some offset i e ptrToArray equals array; nthEntity equals multiplied by ptrToArray plus n ;,2
3581,The size in bytes of its operand,the number of bytes of an array during program compilation,1
3582,The size in bytes of its operand,The sizeof operator returns the size of the operand,1
3583,The size in bytes of its operand,It returns the size of an array in bytes,1
3584,The size in bytes of its operand,Returns the size of the array in bytes during the program compilation,1
3585,The size in bytes of its operand,The byte size of the date stored ina variable,1
3586,The size in bytes of its operand,The amount of memory required for a specific parameter such as ints doubles,1
3587,The size in bytes of its operand,the size of the information in bits,1
3588,The size in bytes of its operand,the size of the string,1
3589,The size in bytes of its operand,sizeof returns the size in bytes of the respective object,1
3590,The size in bytes of its operand,the size of the list object,1
3591,The size in bytes of its operand,It returns the size of an operand in memory which is checked at compiler time,1
3592,The size in bytes of its operand,the total number of bytes of an object,1
3593,The size in bytes of its operand,it yields the size in bytes of the operand which can be an expression or the parenthesized name of a type,1
3594,Returns size of operand in bytes,Returns size of operand in bytes,2
3595,Returns size of operand in bytes,The sizeof operator returns the total number of bytes of its operand,2
3596,Returns size of operand in bytes,The size of an operand in bytes Used with variable names type names and constant values,2
3597,There are four ways : nonconstant pointer to constant data nonconstant pointer to nonconstant data constant pointer to constant data constant pointer to nonconstant data,Pass by value or pass by reference,1
3598,There are four ways : nonconstant pointer to constant data nonconstant pointer to nonconstant data constant pointer to constant data constant pointer to nonconstant data,you can pass a pointer to a pointer or pass a reference to pointer,1
3599,There are four ways : nonconstant pointer to constant data nonconstant pointer to nonconstant data constant pointer to constant data constant pointer to nonconstant data,by address address of bPtr or directly bPtr,1
3600,There are four ways : nonconstant pointer to constant data nonconstant pointer to nonconstant data constant pointer to constant data constant pointer to nonconstant data,By argument and reference,1
3601,There are four ways : nonconstant pointer to constant data nonconstant pointer to nonconstant data constant pointer to constant data constant pointer to nonconstant data,pass by value and pass by reference with reference or pointer arguments,1
3602,There are four ways : nonconstant pointer to constant data nonconstant pointer to nonconstant data constant pointer to constant data constant pointer to nonconstant data,you can pass them with the pointer STAR or the memory address ADDRESS,1
3603,There are four ways : nonconstant pointer to constant data nonconstant pointer to nonconstant data constant pointer to constant data constant pointer to nonconstant data,Pass by reference with reference arguments function int ADDRESS Pass by reference with pointer arguments function int STAR,1
3604,There are four ways : nonconstant pointer to constant data nonconstant pointer to nonconstant data constant pointer to constant data constant pointer to nonconstant data,Pointers may be passed to functions by value by reference with reference arguments or by reference with pointer arguments,1
3605,There are four ways : nonconstant pointer to constant data nonconstant pointer to nonconstant data constant pointer to constant data constant pointer to nonconstant data,pass by value pass by reference with reference arguments pass by reference with pointer arguments,1
3606,There are four ways : nonconstant pointer to constant data nonconstant pointer to nonconstant data constant pointer to constant data constant pointer to nonconstant data,you can pass it where either the pointer cant be moved the data pointed to cant be changed or both or neither,1
3607,There are four ways : nonconstant pointer to constant data nonconstant pointer to nonconstant data constant pointer to constant data constant pointer to nonconstant data,there are only two ways to pass something by value and by reference Use of dot or pointer operators within the receiving function and use of ADDRESS operator inside the passing function,1
3608,Nonconstant pointer to nonconstant data nonconstant pointer to constant data constant pointer to nonconstant data constant pointer to constant data,Nonconstant pointer to nonconstant data nonconstant pointer to constant data constant pointer to nonconstant data constant pointer to constant data,2
3609,Nonconstant pointer to nonconstant data nonconstant pointer to constant data constant pointer to nonconstant data constant pointer to constant data,Four different ways : Nonconstant pointer to nonconstant data a nonconstant pointer to constant data a constant pointer to nonconstant data and a constant pointer to constant data,2
3610,Nonconstant pointer to nonconstant data nonconstant pointer to constant data constant pointer to nonconstant data constant pointer to constant data,Nonconstant pointer to nonconstant data constant pointer to nonconstant data nonconstant pointer to constant data constant pointer to constant data,2
3611,Nonconstant pointer to nonconstant data nonconstant pointer to constant data constant pointer to nonconstant data constant pointer to constant data,Nonconstant pointer to nonconstant data nonconstant pointer to constant data constant pointer to nonconstant data and constant pointer to constant data,2
3612,Nonconstant pointer to nonconstant data nonconstant pointer to constant data constant pointer to nonconstant data constant pointer to constant data,nonconst implies nonconst const implies nonconst nonconst implies const const implies const,2
3613,Nonconstant pointer to nonconstant data nonconstant pointer to constant data constant pointer to nonconstant data constant pointer to constant data,Non constant pointer to non constant data non constant pointer to constant data constant pointer to constant data constant pointer to non constant data,2
3614,Nonconstant pointer to nonconstant data nonconstant pointer to constant data constant pointer to nonconstant data constant pointer to constant data,1 nonconstant pointer to nonconstant data Its delcaration does no include const qualifier 2 nonconstant pointer to constant data Provides the performance of pass by reference and the protection of pass by value 3 Constant pointer to nonconstant data 4 Constant pointer to constant date,2
3615,Nonconstant pointer to nonconstant data nonconstant pointer to constant data constant pointer to nonconstant data constant pointer to constant data,constant pointer to constant data constant pointer to nonconstant data nonconstant pointer to constant data nonconstant pointer to nonconstant data,2
3616,Nonconstant pointer to nonconstant data nonconstant pointer to constant data constant pointer to nonconstant data constant pointer to constant data,There are four way to pass pointer to a function 1 non constant pointer to non constant data 2 non constant pointer to constant data 3 constant pointer to non constant data 4 constant pointer to constant data,2
3617,The address of the location in memory where the function code resides,when it is dereferenced a function pointer calls its function with zero or more arguments,1
3618,The address of the location in memory where the function code resides,a pointer that points to a function itself which allows passing a function as a parameter to another function,1
3619,The address of the location in memory where the function code resides,When dereferenced a function pointer invokes a function passing it zero or more arguments just like a normal function In programming languages like C function pointers can be used to simplify code such as replacing large switch statements,1
3620,A pointer that points to the memory address of the beginning part of a functions pretty much the pointer points to the function so it can be called to execute,A pointer that points to the memory address of the beginning part of a functions pretty much the pointer points to the function so it can be called to execute,2
3621,A pointer that points to the memory address of the beginning part of a functions pretty much the pointer points to the function so it can be called to execute,A function pointer is a pointer that contains the address of the function in memory,2
3622,A pointer that points to the memory address of the beginning part of a functions pretty much the pointer points to the function so it can be called to execute,Function Pointers are pointers i e variables which point to the address of a function,2
3623,A pointer that points to the memory address of the beginning part of a functions pretty much the pointer points to the function so it can be called to execute,A pointer to a function is the address where the code for the function resides They can be passed to functions returned from functions stored in arrays and assigned to other pointers,2
3624,A pointer that points to the memory address of the beginning part of a functions pretty much the pointer points to the function so it can be called to execute,It contains the address of the function in memory,2
3625,A pointer that points to the memory address of the beginning part of a functions pretty much the pointer points to the function so it can be called to execute,A pointer to a function itself contains the address of the function and can be used to call that function,2
3626,A pointer that points to the memory address of the beginning part of a functions pretty much the pointer points to the function so it can be called to execute,A pointer to a function that contains the addresses of the function,2
3627,A pointer that points to the memory address of the beginning part of a functions pretty much the pointer points to the function so it can be called to execute,a function pointer is a pointer to a function It can be used in substitution for calling a function,2
3628,A pointer that points to the memory address of the beginning part of a functions pretty much the pointer points to the function so it can be called to execute,Points to the memory address of a function Kind of like breaking a branch off of a tree object and hitting other objects with it,2
3629,A pointer that points to the memory address of the beginning part of a functions pretty much the pointer points to the function so it can be called to execute,They are pointers that contain the addresses to functions they can be passed and returned from functions as well as stored in arrays and assigned to other function pointers,2
3630,A pointer that points to the memory address of the beginning part of a functions pretty much the pointer points to the function so it can be called to execute,Pointer variables that point to function addresses,2
3631,A pointer that points to the memory address of the beginning part of a functions pretty much the pointer points to the function so it can be called to execute,Contains the address of the function in memory,2
3632,A pointer that points to the memory address of the beginning part of a functions pretty much the pointer points to the function so it can be called to execute,pointers that contain the addresses of functions,2
3633,A pointer that points to the memory address of the beginning part of a functions pretty much the pointer points to the function so it can be called to execute,A function pointer contains the memory address of a function Using a function pointer a function can be passed to or returned by another function Function pointers can also be stored in arrays,2
3634,A pointer that points to the memory address of the beginning part of a functions pretty much the pointer points to the function so it can be called to execute,Function pointer is a pointer to a function function pointer contains address of functions,2
3635,A pointer that points to the memory address of the beginning part of a functions pretty much the pointer points to the function so it can be called to execute,a pointer that contains the address of a function in memory,2
3636,A pointer that points to the memory address of the beginning part of a functions pretty much the pointer points to the function so it can be called to execute,it is a pointer that points to the address of a function,2
3637,A collection of elements that can be allocated dynamically,Consists of sequence of nodes each containing a number of data fields and one or two links called pointers that point to the next or previous nodes,1
3638,A collection of elements that can be allocated dynamically,A linked list is a list in which each item in the list points to the next item in the list,1
3639,A collection of elements that can be allocated dynamically,A linked list is a chain of structs or records called nodes and you have the ability to add delete or retrieve items,1
3640,A collection of elements that can be allocated dynamically,A list of elements or nodes that are linked to one another such that each element points to the next element,1
3641,A collection of elements that can be allocated dynamically,A sequence of nodes each containing data fields specified by programmer and pointer s which can point to the next or previous nodes,1
3642,A collection of elements that can be allocated dynamically,a list of nodes where each node contains a data member and also a pointer to the next node,1
3643,A collection of elements that can be allocated dynamically,A list of items linked together Each item is linked to its successor,1
3644,A collection of elements that can be allocated dynamically,A linked list is a chain of nodes that each store a single piece of data and pointer variables that point to other nodes in the list,1
3645,A collection of elements that can be allocated dynamically,one of the fundamental data structures and can be used to implement other data structures It consists of a sequence of nodes each containing arbitrary data fields and one or two references links pointing to the next and previous nodes,1
3646,A collection of elements that can be allocated dynamically,A data structure in a sequence of nodes each containing arbitrary data fields and one or two references links pointing to the next and previous nodes,1
3647,A collection of elements that can be allocated dynamically,Information in memory linked to the next piece of information and can only be linked forwards and not backwards,1
3648,A collection of elements that can be allocated dynamically,A linked list is a data structure containing one or more data elements with a pointer to the next node,1
3649,A collection of elements that can be allocated dynamically,A series of Nodes structures with a value and a pointer that point to a similar Node Not quite an array but still can carry a list of values,1
3650,A collection of elements that can be allocated dynamically,A data type that contains a pointer to at least the next element in a list,1
3651,A collection of elements that can be allocated dynamically,Each component contains a Node a data item and a pointer to the next item in the list,1
3652,A collection of elements that can be allocated dynamically,A linked list is a chain of structs or records called nodes Each node has at least two members one of which points to the next item or node in the list,1
3653,A collection of elements that can be allocated dynamically,An array based list that uses an implicit ordering scheme often using pointers,1
3654,A collection of elements that can be allocated dynamically,a series of structures containing data items and a pointer that links the structure to the next structure,1
3655,A collection of elements that can be allocated dynamically,A linked list is a collection of Objects each containing at least one data member and a pointer to the next object in the list and the previous object in the case of a doubly linked list,1
3656,A collection of elements that can be allocated dynamically,A link list is a data structure which is built from structures and pointers It forms a chain of nodes with pointers representing the links of the chain and holding the entire thing together,1
3657,A collection of elements that can be allocated dynamically,its a list of pointers that are linked 2 each other every pointer points to the next pointer which has the next element,1
3658,A collection of elements that can be allocated dynamically,linear collection of self referential nodes connected by pointers,1
3659,A collection of elements that can be allocated dynamically,A linked list is one of the fundamental data structures and can be used to implement other data structures It consists of a sequence of nodes each containing arbitrary data fields and one or two references links pointing to the next and previous nodes,1
3660,A linked list is a data structure that is not necessarily in the same contiguous memory space such as arrays It holds the data type and points to the next data item in the list or in a doubly linked list also to the previous item,A linked list is a data structure that is not necessarily in the same contiguous memory space such as arrays It holds the data type and points to the next data item in the list or in a doubly linked list also to the previous item,2
3661,The linked lists can be of variable length,You can insert into and delete items from a pointer based linked list without shifting data,1
3662,The linked lists can be of variable length,The principal benefit of a linked list over a conventional array is that the order of the linked items may be different from the order that the data items are stored in memory or on disk allowing the list of items to be traversed in a different order A linked list is a self referential datatype because it contains a pointer or link to another datum of the same type Linked lists permit insertion and removal of nodes at any point in the list in constant time,1
3663,The linked lists can be of variable length,There is no limit as to how many you create where an array can only hold a given amount of information,1
3664,Elements can be inserted into a link list at any point and does not need to be resized unlike an array needs to be,Elements can be inserted into a link list at any point and does not need to be resized unlike an array needs to be,2
3665,Elements can be inserted into a link list at any point and does not need to be resized unlike an array needs to be,Unlike arrays linked lists can insert and delete without shifting data and change in size easily,2
3666,Elements can be inserted into a link list at any point and does not need to be resized unlike an array needs to be,Array size is fixed but Linked is not fixed,2
3667,Elements can be inserted into a link list at any point and does not need to be resized unlike an array needs to be,Arrays must be of a defined size elements can be added to a linked list with o defining any size,2
3668,Elements can be inserted into a link list at any point and does not need to be resized unlike an array needs to be,You can expand when you need it You do not have to predetermine the size,2
3669,Elements can be inserted into a link list at any point and does not need to be resized unlike an array needs to be,Linked list is able to grow in size as needed Does not require the shifting of items during insertions and deletions,2
3670,Elements can be inserted into a link list at any point and does not need to be resized unlike an array needs to be,A linked list is not fixed in size and does not require the shifting of items during insertions and deletions,2
3671,Elements can be inserted into a link list at any point and does not need to be resized unlike an array needs to be,Linked lists can be grown dynamically items do not require shifting and they have a greater awesome factor than that of arrays,2
3672,Elements can be inserted into a link list at any point and does not need to be resized unlike an array needs to be,Linked lists have an indefinite size They can be added to and taken away from very easily with little difficulty in the shifting of data,2
3673,Elements can be inserted into a link list at any point and does not need to be resized unlike an array needs to be,Nearly infinite size limited only by system memory and also the ability to expand the size dynamically,2
3674,Elements can be inserted into a link list at any point and does not need to be resized unlike an array needs to be,They grow as needed while arrays are of fixed size,2
3675,Elements can be inserted into a link list at any point and does not need to be resized unlike an array needs to be,Does not have a fixed size Linked list is able to grow as needed The time to access an array bases list takes a contant amount of time where as an linked base like depends on i,2
3676,Elements can be inserted into a link list at any point and does not need to be resized unlike an array needs to be,Linked lists can grow and shrink as you need them to Arrays have a fixed size,2
3677,Elements can be inserted into a link list at any point and does not need to be resized unlike an array needs to be,A linked list may be increased in size as needed while an array size is set when it is created,2
3678,Elements can be inserted into a link list at any point and does not need to be resized unlike an array needs to be,Array has a fixed size but linked list is able to grow in size as needed,2
3679,Elements can be inserted into a link list at any point and does not need to be resized unlike an array needs to be,Linked lists do not have a set size and can grow or shrink as needed,2
3680,Elements can be inserted into a link list at any point and does not need to be resized unlike an array needs to be,The size is not fixed easier sorting because of no shifting easier to insert items into the list,2
3681,Elements can be inserted into a link list at any point and does not need to be resized unlike an array needs to be,The size of array is restricted to declaration Insertion or Deletion of values in middle of array is not possible,2
3682,The elements in an array can be accessed directly as opposed to linked lists which require iterative traversal,Arrays require less memory than linked lists and allow direct access to a specified item Also insertion and deletion in arrays does not require a list traversal,1
3683,The elements in an array can be accessed directly as opposed to linked lists which require iterative traversal,You have to keep up with the head of the list,1
3684,The elements in an array can be accessed directly as opposed to linked lists which require iterative traversal,Linked list has an increase complexity of the implementation The linked list has an array that keeps growing which leads to a increase in memory,1
3685,The elements in an array can be accessed directly as opposed to linked lists which require iterative traversal,You do not have to iterate through the entire list to access elements,1
3686,The elements in an array can be accessed directly as opposed to linked lists which require iterative traversal,you can go forwards and backwards and point to any piece of data at any given time where linked lists have to point to the next piece of data,1
3687,The elements in an array can be accessed directly as opposed to linked lists which require iterative traversal,Arrays being fixed are less error prone,1
3688,The elements in an array can be accessed directly as opposed to linked lists which require iterative traversal,direct access to elements and speed linked lists have increased search times to access elements even if the list is sorted like getting the last element without a pointer directly to the end of the list,1
3689,The elements in an array can be accessed directly as opposed to linked lists which require iterative traversal,Array bases implementations require less memory than a pointer bases one,1
3690,The elements in an array can be accessed directly as opposed to linked lists which require iterative traversal,Array based implementations require less memory than a pointer based ones,1
3691,The elements in an array can be accessed directly as opposed to linked lists which require iterative traversal,You can go up and down an array but you can only go one direction while traversing a linked list,1
3692,Array can retrieve memory from any place in the list while in a link list you have to traverse through each individual node,Array can retrieve memory from any place in the list while in a link list you have to traverse through each individual node,2
3693,Array can retrieve memory from any place in the list while in a link list you have to traverse through each individual node,Access to a particular element is very fast because its location in memory can be determined mathematically and accessed directly,2
3694,Array can retrieve memory from any place in the list while in a link list you have to traverse through each individual node,Arrays are good for random access and good for sequential access which are both in constant time Where linked lists are linear for random access Arrays are faster in this case,2
3695,Array can retrieve memory from any place in the list while in a link list you have to traverse through each individual node,An array is capable of accessing any part of that array based on the index The link list must be traversed from the beginning or the end that is data can only be accessed if it is adjacent to the previous or next nodes,2
3696,Array can retrieve memory from any place in the list while in a link list you have to traverse through each individual node,On the other hand arrays allow random access while linked lists allow only sequential access to elements Singly linked lists in fact can only be traversed in one direction,2
3697,Array can retrieve memory from any place in the list while in a link list you have to traverse through each individual node,Arrays have a set list of values Meaning you can pick a spot in the array such as a 7 picks the 8th spot in the array With linked lists you have to keep track with pointers if you want to take specific nodes out otherwise you must traverse the entire list,2
3698,Array can retrieve memory from any place in the list while in a link list you have to traverse through each individual node,You can access specific elements quickly in an array In a linked list you must traverse the list to get access the same element,2
3699,Array can retrieve memory from any place in the list while in a link list you have to traverse through each individual node,Any entitiy in an array may accessed immediately whereas a linked list must be traversed one item at a time because each object only points adjacent objects,2
3700,Array can retrieve memory from any place in the list while in a link list you have to traverse through each individual node,arrays allow for the random access of any item cotained a any time linked lists must be gone through toget to the desired item,2
3701,Array can retrieve memory from any place in the list while in a link list you have to traverse through each individual node,In arrays you have direct access to each element but in linked lists you have to traverse the list up to the element that you need,2
3702,Array can retrieve memory from any place in the list while in a link list you have to traverse through each individual node,Array size is fixed But Linked is not fixed data is also accessed quicker in array list also memory requirement is less and no pointers required Arrays have random access and less overheads compared to Linked list have sequential access only with too much overheads and no cache memory support On the other hand arrays allow random access while linked lists allow only sequential access to elements Singly linked lists in fact can only be traversed in one direction,2
3703,By reference,By using a node,1
3704,By reference,Passed as a pointer to the head,1
3705,By reference,You have to pass the head pointer to a function since it has access to the entire list,1
3706,By reference,The linked list object contains the head through which the other elements are accessible,1
3707,By reference,By the head of the list It takes the head address and traverses from there on in,1
3708,By reference,as a pointer node,1
3709,By reference,A method with access to a linked list head pointer as access to the entire list,1
3710,By reference,By passing the head pointer and going through the list as needed inside the function,1
3711,By reference,Linked lists permit insertion and removal of nodes at any point in the list in constant time 1 but do not allow random access,0
3712,Linked lists are passed as arguments to a function by passing the head pointer of the list by reference,Linked lists are passed as arguments to a function by passing the head pointer of the list by reference,2
3713,Linked lists are passed as arguments to a function by passing the head pointer of the list by reference,minus A function with access to a linked list head pointer has access to the entire list Pass the head ponter to a function as a reference argument,2
3714,Linked lists are passed as arguments to a function by passing the head pointer of the list by reference,Pass by reference,2
3715,Linked lists are passed as arguments to a function by passing the head pointer of the list by reference,You pass the head pointer to a function as a reference argument,2
3716,Linked lists are passed as arguments to a function by passing the head pointer of the list by reference,A function with access to a linked list head pointer has access to the entire list Pass the head pointer to a function as a reference argument,2
3717,Linked lists are passed as arguments to a function by passing the head pointer of the list by reference,the head pointer is passed to a function as a reference argument,2
3718,Linked lists are passed as arguments to a function by passing the head pointer of the list by reference,linked lists are passed by reference specificly the Head pointer,2
3719,The last element in a circular linked list points to the head of the list,A circular linked list is a linked list that links items in a continuous circle This allows the full list to be traversed by starting at any item in the list; a fixed head or tail is not required,1
3720,The last element in a circular linked list points to the head of the list,Circular linked lists are most useful for describing naturally circular structures and have the advantage of regular structure and being able to traverse the list starting at any point,1
3721,The last element in a circular linked list points to the head of the list,No node in a circular linked list contains NULL,1
3722,The last element in a circular linked list points to the head of the list,In circular linked list each node has successor no node contains NULL while in basic linked list last node contain NULL,1
3723,The last element in a circular linked list points to the head of the list,In the case of a non circular link list if you are at the last node of the list and u want to move to first u need to go to one step back till u reach to first But in circular link list from last to first you need to make only one move In a single link list u can move only in one direction but in double link list u can move in any direction back or forward or forward,1
3724,In a circular linked list every node has a successor which means that the last node successor is the head or first node,In a circular linked list every node has a successor which means that the last node successor is the head or first node,2
3725,In a circular linked list every node has a successor which means that the last node successor is the head or first node,In a circular linked list the last node points to the first node,2
3726,In a circular linked list every node has a successor which means that the last node successor is the head or first node,On a circular linked list the end element points to the head thus making the circle A basic link list has nothing pointing to the head and the last element points to null,2
3727,In a circular linked list every node has a successor which means that the last node successor is the head or first node,the circular linked list last node points to the begining of the list while a standard linked list points to NULL,2
3728,In a circular linked list every node has a successor which means that the last node successor is the head or first node,In a circular linked list the last node points back to the first node there is no NULL,2
3729,In a circular linked list every node has a successor which means that the last node successor is the head or first node,A circular linked list has the last node point back to the head of the linked list,2
3730,In a circular linked list every node has a successor which means that the last node successor is the head or first node,Basic linked list points to a NULL at the end and circular points to the head at the end,2
3731,In a circular linked list every node has a successor which means that the last node successor is the head or first node,in a circular linked list the the last item points to the first item,2
3732,In a circular linked list every node has a successor which means that the last node successor is the head or first node,The circular linked list tail points to the head whereas the basic linked list tail points to a NULL,2
3733,In a circular linked list every node has a successor which means that the last node successor is the head or first node,how to determine the end of the list in basic linked lists the last element links to a null pointer while circular linked lists link to the head element at the end,2
3734,In a circular linked list every node has a successor which means that the last node successor is the head or first node,No Node in a circular linked list contains NULL the last Node points pack to a Node within the list,2
3735,In a circular linked list every node has a successor which means that the last node successor is the head or first node,The difference between a circular linked list and a basic linked list is that a circular linked list the last node references the first node Every node in a circular linked list has a successor and no node in a circular linked list contains NULL,2
3736,In a circular linked list every node has a successor which means that the last node successor is the head or first node,In a regular linked list the last object points to NULL In a circular linked list the last object points back to the beginning of the list,2
3737,In a circular linked list every node has a successor which means that the last node successor is the head or first node,in a circular linked lists the last element points to the first,2
3738,In a circular linked list every node has a successor which means that the last node successor is the head or first node,A circular linked list does not have a last element Instead it is last item points to the head of the list,2
3739,In a circular linked list every node has a successor which means that the last node successor is the head or first node,in a circular linked list the last node contains a pointer that goes back to the first node; in a basic linked list the last node contains a null pointer,2
3740,In a circular linked list every node has a successor which means that the last node successor is the head or first node,in a circular linked list the last object is linked back to the first object,2
3741,All the deletion and insertion operations can be performed in constant time including those operations performed before a given location in the list or at the end of the list,In a doubly linked list you can delete a node without having to traverse the list,1
3742,All the deletion and insertion operations can be performed in constant time including those operations performed before a given location in the list or at the end of the list,A doubly linked list allows you to delete a node without traversing the list to establish a trailing pointer,1
3743,All the deletion and insertion operations can be performed in constant time including those operations performed before a given location in the list or at the end of the list,A doubly linked list allows you to traverse the list in either direction Each node points to its successor as well as to its predecessor,1
3744,All the deletion and insertion operations can be performed in constant time including those operations performed before a given location in the list or at the end of the list,Doubly linked lists can traverse backwards though they still cannot access data at any point in the list it can be shorter to traverse backwards,1
3745,All the deletion and insertion operations can be performed in constant time including those operations performed before a given location in the list or at the end of the list,You can traverse the list in reverse,1
3746,All the deletion and insertion operations can be performed in constant time including those operations performed before a given location in the list or at the end of the list,Double linked lists require more space per node and their elementary operations are more expensive; but they are often easier to manipulate because they allow sequential access to the list in both directions,1
3747,All the deletion and insertion operations can be performed in constant time including those operations performed before a given location in the list or at the end of the list,You can traverse forwards and backwards through nodes,1
3748,All the deletion and insertion operations can be performed in constant time including those operations performed before a given location in the list or at the end of the list,Doubly linked lists allow backward movement through the nodes,1
3749,All the deletion and insertion operations can be performed in constant time including those operations performed before a given location in the list or at the end of the list,they have double pointers so each node can point forwards or backwards Making it a little easer to get to where you need,1
3750,All the deletion and insertion operations can be performed in constant time including those operations performed before a given location in the list or at the end of the list,ability to backtrack through a list,1
3751,All the deletion and insertion operations can be performed in constant time including those operations performed before a given location in the list or at the end of the list,You can move forwards and backwards in the double linked list Basic only moves forwards,1
3752,All the deletion and insertion operations can be performed in constant time including those operations performed before a given location in the list or at the end of the list,The advantage is that each node points to bothe its predecessor and its successor There are no special cases for insertion and deletion,1
3753,All the deletion and insertion operations can be performed in constant time including those operations performed before a given location in the list or at the end of the list,each node points to both its predecessor and its successor,1
3754,All the deletion and insertion operations can be performed in constant time including those operations performed before a given location in the list or at the end of the list,a doubly linked list has pointers in both directions this allows for access from back to front as well as front to back,1
3755,All the deletion and insertion operations can be performed in constant time including those operations performed before a given location in the list or at the end of the list,A doubly linked list can be traversed either direction while a normal linked list can only be traversed from start to finish,1
3756,All the deletion and insertion operations can be performed in constant time including those operations performed before a given location in the list or at the end of the list,Double Linked list are often easier to manipulate because they allow sequential access to the list in both direction,1
3757,All the deletion and insertion operations can be performed in constant time including those operations performed before a given location in the list or at the end of the list,given a node in the list one can navigate easily in either direction,1
3758,All the deletion and insertion operations can be performed in constant time including those operations performed before a given location in the list or at the end of the list,You can traverse the list both forward and backwards,1
3759,All the deletion and insertion operations can be performed in constant time including those operations performed before a given location in the list or at the end of the list,The primary disadvantage of doubly linked lists are that 1 each node requires an extra pointer requiring more space and 2 the insertion or deletion of a node takes a bit longer more pointer operations,1
3760,Extra space required to store the back pointers,In a doubly linked list there are more pointers to set and the mechanics of inserting and deleting are more difficult Also the special cases at the beginning or end of the list are more complicated,1
3761,Extra space required to store the back pointers,There are more pointers to set the mechanics of inserting into and deleting from a doubly linked list are a bit more involved than for a singly linked list,1
3762,Extra space required to store the back pointers,Insertion and deletion with a doubly linked list are more involved than with a singly linked list leaving more room for error and complex algorithms,1
3763,Extra space required to store the back pointers,You have to keep up with where you are and you have to consider the predecessor and successor connections when inserting or deleting,1
3764,Extra space required to store the back pointers,More difficult to delete and create nodes,1
3765,Extra space required to store the back pointers,its a little more confusing The special cases at the end and beginning become more difficult to do,1
3766,Extra space required to store the back pointers,increased actions to add and remove elements to the linked list,1
3767,Extra space required to store the back pointers,Inserting and deleting in a double linked list is more involved and has special cases at the beginning and end,1
3768,Extra space required to store the back pointers,The main disadvanate is that if hard to remove all items in the list,1
3769,they take up twice as much memory for each node,Need more memory to store previous pointers,2
3770,they take up twice as much memory for each node,a node in a doubly linked list takes up more memory than a node in a singly linked list,2
3771,they take up twice as much memory for each node,Each node requires an extra node requires more memory and is more difficult to insert and remove individual nodes,2
3772,they take up twice as much memory for each node,Double linked lists require more space per node and their elementary operations are more expensive,2
3773,they take up twice as much memory for each node,They use more memory and you have to make 2 pointers and update 2 pointers each time you change the list,2
3774,they take up twice as much memory for each node,Each node requires an extra pointer space requirements increased Insertion or deletion of a node takes a longer more pointer operations,2
3775,they take up twice as much memory for each node,each node requires an extra pointer taking up more storage insertions and deletions require more pointer operations,2
3776,they take up twice as much memory for each node,in a doubly linked list there are twice as many pointers for each element therefore more memory is used,2
3777,they take up twice as much memory for each node,Double linked lists require more space per node and their elementary operation are more expensive,2
3778,they take up twice as much memory for each node,1 each node requires an extra pointer requiring more space 2 the insertion or deletion of a node takes a bit longer more pointer operations,2
3779,they take up twice as much memory for each node,It takes up twice the storage needed,2
3780,they take up twice as much memory for each node,using more pointers to enable the backward movement takes up more memory having more pointers make it slightly more work to add or remove a node from the list,2
3781,they take up twice as much memory for each node,increased memory requirements slightly more complicated when modifying elements in the list,2
3782,A data structure that can store elements which has the property that the last item added will be the first to be removed or last in first out,Stores a set of elements in a particular order,1
3783,A data structure that can store elements which has the property that the last item added will be the first to be removed or last in first out,A list in which only the top or last item added can be modified,1
3784,A data structure that can store elements which has the property that the last item added will be the first to be removed or last in first out,A stack is an ADT that stores a set of elements in a particular order,1
3785,A data structure that can store elements which has the property that the last item added will be the first to be removed or last in first out,An abstract data type that stores a set of elements in a particular order,1
3786,A data structure that can store elements which has the property that the last item added will be the first to be removed or last in first out,A data structure that puts elements in a list and only allows the user access to the last element,1
3787,A data structure for storing items which are to be accessed in last in first out order that can be implemented in three ways,A data structure for storing items which are to be accessed in last in first out order that can be implemented in three ways,2
3788,A data structure for storing items which are to be accessed in last in first out order that can be implemented in three ways,A stack is an abstract data type that is based on the principle that the last element inserted into the stack will be the first element removed from the stack,2
3789,A data structure for storing items which are to be accessed in last in first out order that can be implemented in three ways,An ADT whose most recently inserted item is the first item removed or retrieved This property is called last in first out LIFO Items enter and leave a stack at its top,2
3790,A data structure for storing items which are to be accessed in last in first out order that can be implemented in three ways,a stack is a data structure that uses push to insert an item and pop to remove ad item The stack use a last in first out structure for inserting and removing items,2
3791,A data structure for storing items which are to be accessed in last in first out order that can be implemented in three ways,A data structure that stores data using LIFO,2
3792,A data structure for storing items which are to be accessed in last in first out order that can be implemented in three ways,A stack is similar to an array but does not allow for random access Stacks only allow a user to retrieve the last item put into the stack Last in fist out,2
3793,A data structure for storing items which are to be accessed in last in first out order that can be implemented in three ways,Stores a set of elements in a particular order Stack principle : LAST IN FIRST OUT It means : the last element inserted is the first one to be removed,2
3794,A data structure for storing items which are to be accessed in last in first out order that can be implemented in three ways,a data type that stores a set of elements in a certain order last in first out,2
3795,A data structure for storing items which are to be accessed in last in first out order that can be implemented in three ways,Stores a set of elements in a last in first out order,2
3796,A data structure for storing items which are to be accessed in last in first out order that can be implemented in three ways,A list that can be added to or removed from only from the top,2
3797,A data structure for storing items which are to be accessed in last in first out order that can be implemented in three ways,a stack is an Abstract data type which operates on a last in first out basis for storing a list of objects and does not support at least in the pure stack peeking at a element without removing the rest of the stack first,2
3798,A data structure for storing items which are to be accessed in last in first out order that can be implemented in three ways,Stores a set of elements in a particular order based on the principle of Last In First Out LIFO,2
3799,A data structure for storing items which are to be accessed in last in first out order that can be implemented in three ways,an object list that stores elements in a particular order the first object inserted is at the bottom with the last object at the top so the first object in is the last object out,2
3800,A data structure for storing items which are to be accessed in last in first out order that can be implemented in three ways,An ADT that stores a set of elements in a particular order The stack principles are LIFO The last item inserted in the list is the first out,2
3801,A data structure for storing items which are to be accessed in last in first out order that can be implemented in three ways,A stack is a data structure that allows data members to be added or removed one at a time and in order They are a Last in First Out structure,2
3802,A data structure for storing items which are to be accessed in last in first out order that can be implemented in three ways,A storage container that holds objects in a certain order which has a LIFO priority,2
3803,A data structure for storing items which are to be accessed in last in first out order that can be implemented in three ways,Stacks are a type of container adaptors specifically designed to operate in a LIFO context last in first out where elements are inserted and extracted only from the end of the container,2
3804,Push and pop are two main functions defined in a stack,Push which inserts an element on the top of the stack and pop which removes the last inserted element from the stack,2
3805,Push and pop are two main functions defined in a stack,push insert an item pop remove an item,2
3806,Push and pop are two main functions defined in a stack,Push insert and pop retrieve,2
3807,Push and pop are two main functions defined in a stack,push add an element pop remove an element,2
3808,Push and pop are two main functions defined in a stack,push to add to a item the Stack Pop to pull the last item added from an array,2
3809,Push and pop are two main functions defined in a stack,push and pop push puts an object into the list and pop takes the last object off,2
3810,Push and pop are two main functions defined in a stack,push which adds an element to the stack and pop which takes an element off the stack,2
3811,Push and pop are two main functions defined in a stack,Push and Pop which add and remove data from the stack respectively,2
3812,Push and pop are two main functions defined in a stack,pop to remove item push to insert an element,2
3813,Push and pop are two main functions defined in a stack,push adds an item to the top of the stack pop removes the top item from the stack,2
3814,Push and pop are two main functions defined in a stack,push and pop Push adds a given node to the top of the stack leaving previous nodes below Pop removes and returns the current top node of the stack,2
3815,Keep the top of the stack toward the end of the array so the push and pop operations will add or remove elements from the right side of the array,If you use a dynamically allocated array you must provide a destructor and copy constructor,1
3816,Keep the top of the stack toward the end of the array so the push and pop operations will add or remove elements from the right side of the array,Use a pointer that always points to the end of the array list for push or pop modifications,1
3817,Keep the top of the stack toward the end of the array so the push and pop operations will add or remove elements from the right side of the array,if you used an array to implement a stack when you add an element just add it to the end of an array and remove items from end of array also,1
3818,Keep the top of the stack toward the end of the array so the push and pop operations will add or remove elements from the right side of the array,You predetermine the size of the stack as you would an array This type can not grow,1
3819,Keep the top of the stack toward the end of the array so the push and pop operations will add or remove elements from the right side of the array,Allocate an array of some size The bottom stack element is stored at some element Last index in the array is the top Increment top when one element is pushed decrement after pop,1
3820,Keep the top of the stack toward the end of the array so the push and pop operations will add or remove elements from the right side of the array,You allocate an pre defined array the bottom element is stored at element 0 and the last index is the head,1
3821,Keep the top of the stack toward the end of the array so the push and pop operations will add or remove elements from the right side of the array,Make an array make the bottom at spot 0 make the last spot in the array the top and increment top when you ad,1
3822,Keep the top of the stack toward the end of the array so the push and pop operations will add or remove elements from the right side of the array,Use an index value called top to keep track of the last element in the array,1
3823,Keep the top of the stack toward the end of the array so the push and pop operations will add or remove elements from the right side of the array,create an array and implement pointers that point to the next list item down and stack them up,1
3824,Keep the top of the stack toward the end of the array so the push and pop operations will add or remove elements from the right side of the array,for efficiency it is easiest to implement the left to right method with the right most item being the one that is retrieved when a pop is performed and a push places an object on the furthest element,1
3825,Keep the top of the stack toward the end of the array so the push and pop operations will add or remove elements from the right side of the array,Create an array based on a pre defined size N There cannot be more elements than N Bottom stack element stored at element 0 last index in the array is the top Increment top when one element is pushed decrement after pop,1
3826,Keep the top of the stack toward the end of the array so the push and pop operations will add or remove elements from the right side of the array,with the element added to the array so that the last element added is at the end and when the element is popped it takes the last element off the array,1
3827,Keep the top of the stack toward the end of the array so the push and pop operations will add or remove elements from the right side of the array,Allocate an array of some pre defined size Bottom stack element stored at element 0 The last index in the array is the top Increment top when one element is pushed,1
3828,Keep the top of the stack toward the end of the array so the push and pop operations will add or remove elements from the right side of the array,Create an array size N N plus plus when one element is pushed N when one element is popped,1
3829,Keep the top of the stack toward the end of the array so the push and pop operations will add or remove elements from the right side of the array,By allocating an array of predetermined size and an integer to track the top element of the stack The bottom member of the stack will go in element 0 of the array and for each element pushed the top tracking integer is incremented,1
3830,Keep the top of the stack toward the end of the array so the push and pop operations will add or remove elements from the right side of the array,Allocate an array of some size bottom stack element stored at element 0,1
3831,Keep the top of the stack toward the end of the array so the push and pop operations will add or remove elements from the right side of the array,You keep track of the last item entered into the array and do not allow the user access to the other parts of the array,1
3832,Keep the top of the stack toward the end of the array so the push and pop operations will add or remove elements from the right side of the array,using arrays you are pushing one int at a time into the stack until you get to the end of your array,1
3833,Keep the top of the stack toward the end of the array so the push and pop operations will add or remove elements from the right side of the array,by having a max number of elements allocating an array with that number of elements storing the elements starting at 0 and keeping track of how many elements are currently in the list,1
3834,Keep the top of the stack toward the end of the array so the push and pop operations will add or remove elements from the right side of the array,Stack usually holds a bunch of items with the same type therefore u can use an array to hold the content of the stack and an integer top that holds the index of the element at the top of the stack u Choose an array size Then the sequence of operations used u have to decide what data types are needed for this stack data structure,1
3835,An array has a fixed size You can add and delete elements to the end of the array and you use a pointer to keep track of the last element added Each time you add or delete an element you update the pointer and check if it is equal to the max size of the array,An array has a fixed size You can add and delete elements to the end of the array and you use a pointer to keep track of the last element added Each time you add or delete an element you update the pointer and check if it is equal to the max size of the array,2
3836,An array has a fixed size You can add and delete elements to the end of the array and you use a pointer to keep track of the last element added Each time you add or delete an element you update the pointer and check if it is equal to the max size of the array,By implementing an array of a pre defined size with the bottom stack element stored at element 0 and the last element stored in the array is the top You increment top when an element is pushed and you decrement it when an item is popped,2
3837,An array has a fixed size You can add and delete elements to the end of the array and you use a pointer to keep track of the last element added Each time you add or delete an element you update the pointer and check if it is equal to the max size of the array,Create a int value that stores the head of the stack Increment the top when one element is pushed and decrement after it is popped,2
3838,An array has a fixed size You can add and delete elements to the end of the array and you use a pointer to keep track of the last element added Each time you add or delete an element you update the pointer and check if it is equal to the max size of the array,Declare a variable that points the last item in the array which increases plus plus when items are pushed onto the stack and decreases when an item is popped off the top,2
3839,Keep the top of the stack pointing to the head of the linked list so the push and pop operations will add or remove elements at the beginning of the list,You can add an element to the end of the linked list and update a pointer called top each time you modify the list,1
3840,Keep the top of the stack pointing to the head of the linked list so the push and pop operations will add or remove elements at the beginning of the list,This is the implementation of the stack using single linked list The operations performed on a stack are 1 push : This is the function which is for insertion pushing of an element into stack It is similar to the insertion of an element at the end of a single linked list see the function insert end in the program for operations of single linked list 2 pop : This is the function which is for deletion popping up of an element from the stack It is similar to the deletion of an element at the end of a single linked list see the function delete end in the program for operations of single linked list 3 stack display : This is the function which is for displaying the elements of a stack,1
3841,Keep the top of the stack pointing to the head of the linked list so the push and pop operations will add or remove elements at the beginning of the list,Using nodes to keep track of the head of the stack Then using Push and Pop to create the stack as needed,1
3842,Keep the top of the stack pointing to the head of the linked list so the push and pop operations will add or remove elements at the beginning of the list,Use the head as the top of the stack only modify the head when you push or pop push would add a new item to the head pop would remove the item from the head,1
3843,Keep the top of the stack pointing to the head of the linked list so the push and pop operations will add or remove elements at the beginning of the list,you implement a stack with a list by changing the pointer to the first element of the list to the new item and move the pointer from the top of the stack to the next item when removing an item,1
3844,Keep the top of the stack pointing to the head of the linked list so the push and pop operations will add or remove elements at the beginning of the list,You dynamicly create space as the stack grows The stack can be as long as you need,1
3845,Keep the top of the stack pointing to the head of the linked list so the push and pop operations will add or remove elements at the beginning of the list,Creating a linked list Add an element to the top of the stack when pushing and deleting an element when popping,1
3846,Keep the top of the stack pointing to the head of the linked list so the push and pop operations will add or remove elements at the beginning of the list,A singly linked list is already a lot like a stack it just depends on the way you address moving the head,1
3847,Keep the top of the stack pointing to the head of the linked list so the push and pop operations will add or remove elements at the beginning of the list,make a list make the bottom the head add on the end and make the end top,1
3848,Keep the top of the stack pointing to the head of the linked list so the push and pop operations will add or remove elements at the beginning of the list,Use head as the top and push and pop nodes from the head,1
3849,Keep the top of the stack pointing to the head of the linked list so the push and pop operations will add or remove elements at the beginning of the list,create a node based list that points to the next list item down,0
3850,Keep the top of the stack pointing to the head of the linked list so the push and pop operations will add or remove elements at the beginning of the list,have the head of the list be the last item added and a push just adds a new head,1
3851,Keep the top of the stack pointing to the head of the linked list so the push and pop operations will add or remove elements at the beginning of the list,Create a new list Pop elements in the stack as needed Push the stack to remove items unless the stack is empty The top item is at the head of the list The last item is at the end,1
3852,Keep the top of the stack pointing to the head of the linked list so the push and pop operations will add or remove elements at the beginning of the list,adding the element to the end of the list so that it links to the element before it when popping the element it takes the last element in the list and sets the previous one as the end of the list,1
3853,Keep the top of the stack pointing to the head of the linked list so the push and pop operations will add or remove elements at the beginning of the list,You can implement a stack using arrays or and linked list By the use of pointers that point element node to the next element in the stack By the use of pointers the stack becomes a linked list,1
3854,Keep the top of the stack pointing to the head of the linked list so the push and pop operations will add or remove elements at the beginning of the list,Elements are only inserted and removed from the head of the list There is no header node or current pointer,1
3855,Keep the top of the stack pointing to the head of the linked list so the push and pop operations will add or remove elements at the beginning of the list,A singly linked list can already be easily used for LIFO data storage Members of a stack can simply be pushed and popped from a list the first item in will be the last out,1
3856,Keep the top of the stack pointing to the head of the linked list so the push and pop operations will add or remove elements at the beginning of the list,the top is the first pointer,1
3857,Keep the top of the stack pointing to the head of the linked list so the push and pop operations will add or remove elements at the beginning of the list,Keep a pointer pointing to the last element entered at the front of the array and move the pointer back when you delete an element,1
3858,Keep the top of the stack pointing to the head of the linked list so the push and pop operations will add or remove elements at the beginning of the list,using linked list you are pushing the node that contains each int to the stack until you get to the end of your linked list,1
3859,Keep the top of the stack pointing to the head of the linked list so the push and pop operations will add or remove elements at the beginning of the list,Using a linked list is one way to implement a stack so that it can handle essentially any number of elements It is usually convenient to put a data structure in its own module thus you will want to create files stack h and a stack c,1
3860,You implement a list in which the head pointer points to the element most recently pushed onto the list and the pop function changes the head pointer to point to the next to last element in the list and removes the element head pointer previously pointed to,You implement a list in which the head pointer points to the element most recently pushed onto the list and the pop function changes the head pointer to point to the next to last element in the list and removes the element head pointer previously pointed to,2
3861,You implement a list in which the head pointer points to the element most recently pushed onto the list and the pop function changes the head pointer to point to the next to last element in the list and removes the element head pointer previously pointed to,Declare a pointer that points to the head of the linked list only add and remove nodes from the beginning of the list,2
3862,You implement a list in which the head pointer points to the element most recently pushed onto the list and the pop function changes the head pointer to point to the next to last element in the list and removes the element head pointer previously pointed to,have a linked list and for each push add an item onto beginning of the list and for each pop remove the first element in the list,2
3863,List based because they are dynamic no size constraints,Array based because they are faster easier to keep track of and less complexity in code,1
3864,List based because they are dynamic no size constraints,The list based implementation is preferred since the big O 1 is very efficient,1
3865,List based because they are dynamic no size constraints,Linked list implementation is preferred That way the list can be moved along without iteration,1
3866,List based because they are dynamic no size constraints,Linked list because it takes up less memory and is scalable,1
3867,List based because they are dynamic no size constraints,list based because the nodes are easier to work with and can be traversed easier,1
3868,List based because they are dynamic no size constraints,Array is preferred Linked list implementation requires extra space to store pointers Space is allocated dynamically in the list based which takes more time,1
3869,List based because they are dynamic no size constraints,Array based implementation requires less memory than a list based inceasing the size of a resizeable array can waste storage and time,1
3870,List based because they are dynamic no size constraints,i would think a list based would be better because you can change the pointers of the nodes to add or remove things from your stack,1
3871,List based because they are dynamic no size constraints,array based list is preferred because it can hold any size as long as u specify it,0
3872,List based is preferred because it is not constrained to a fix size The down fall is that it takes up more memory because each node has at least two parts the item and the pointer,List based is preferred because it is not constrained to a fix size The down fall is that it takes up more memory because each node has at least two parts the item and the pointer,2
3873,List based is preferred because it is not constrained to a fix size The down fall is that it takes up more memory because each node has at least two parts the item and the pointer,List based is preferred because the stack you create is not limited in size and can increase or decrease in size as needed,2
3874,List based is preferred because it is not constrained to a fix size The down fall is that it takes up more memory because each node has at least two parts the item and the pointer,Array based prevents the push operation from adding an item to the stack if the stack size limit which is the size of the array has been reached List base much simpler to write and does not have a fixed size,2
3875,List based is preferred because it is not constrained to a fix size The down fall is that it takes up more memory because each node has at least two parts the item and the pointer,list based because it does not use a fixed size like an array would,2
3876,List based is preferred because it is not constrained to a fix size The down fall is that it takes up more memory because each node has at least two parts the item and the pointer,usually linked list because it does not have a fixed size But if you know or want to set a max size array is better,2
3877,List based is preferred because it is not constrained to a fix size The down fall is that it takes up more memory because each node has at least two parts the item and the pointer,List based Allows more flexablity with size of the stack,2
3878,List based is preferred because it is not constrained to a fix size The down fall is that it takes up more memory because each node has at least two parts the item and the pointer,Linked lists are preferred for implementing stacks because they are not limited to a set number of elements,2
3879,List based is preferred because it is not constrained to a fix size The down fall is that it takes up more memory because each node has at least two parts the item and the pointer,list because it its size is not determined,2
3880,List based is preferred because it is not constrained to a fix size The down fall is that it takes up more memory because each node has at least two parts the item and the pointer,List based as the list can be grown dynamically and as the head node is easily accessible,2
3881,List based is preferred because it is not constrained to a fix size The down fall is that it takes up more memory because each node has at least two parts the item and the pointer,list based because of the lower processing overhead and nearly unlimited space due to linked list design,2
3882,List based is preferred because it is not constrained to a fix size The down fall is that it takes up more memory because each node has at least two parts the item and the pointer,list based It can grow and shrink dynamically unlike the fixed size array,2
3883,List based is preferred because it is not constrained to a fix size The down fall is that it takes up more memory because each node has at least two parts the item and the pointer,list based because arrays can become full lists can grow or shrink as needed,2
3884,List based is preferred because it is not constrained to a fix size The down fall is that it takes up more memory because each node has at least two parts the item and the pointer,List bases implentation is preferred One of the main reasons is because of that the list has no fixed size,2
3885,List based is preferred because it is not constrained to a fix size The down fall is that it takes up more memory because each node has at least two parts the item and the pointer,link list is preferred because it makes pushing elements easier because there is no limit other than memory to the number of elements,2
3886,List based is preferred because it is not constrained to a fix size The down fall is that it takes up more memory because each node has at least two parts the item and the pointer,List based implementation is much easier to implement and allows the stack to scale as necessary It is therefore the preferred implementation,2
3887,List based is preferred because it is not constrained to a fix size The down fall is that it takes up more memory because each node has at least two parts the item and the pointer,in an array based stack you would need to pre determine a size where in a list you can increase or decrease the size however you want,2
3888,List based is preferred because it is not constrained to a fix size The down fall is that it takes up more memory because each node has at least two parts the item and the pointer,A list based implementation is preferred because the list is more flexible than a array,2
3889,List based is preferred because it is not constrained to a fix size The down fall is that it takes up more memory because each node has at least two parts the item and the pointer,list based because it is much more flexible easier to use and doesnt need to have a max size defined when it is made,2
3890,First they are converted into postfix form followed by an evaluation of the postfix expression,By using parentheses to have order in the expression,1
3891,First they are converted into postfix form followed by an evaluation of the postfix expression,In postfix notation,1
3892,First they are converted into postfix form followed by an evaluation of the postfix expression,By throwing variables into a postfix expression and operands onto a parentheses regulated stack until end parentheses and enough variables to operate on are encountered,1
3893,First they are converted into postfix form followed by an evaluation of the postfix expression,i have an hard time explaining this so i will show how infix is evaluated instead Start with an infix expression like 5 plus 2 multiplied by 5 plus 400 divided by 2 plus 3 and push items until you get a and once that happens perform the operations until you reach an with that complete you will now have 7 multiplied by 5 plus 400 divided by 2 plus 3 as now the expression that will be evaluated perform last step again 35 plus 400 divided by 2 plus 3 is now the stack repeat agian 35 plus 400 divided by 5 is now the stack after that repeat 35 plus 80 is now the stack repeat again 115 is now the stack and is returned,1
3894,First they are converted into postfix form followed by an evaluation of the postfix expression,When an operand is entered the computer Pushes it onto a stack When an operator is entered the computer Applies it to the top two operands of the stack Pops the operands from the stack Pushes the result of the operation onto the stack,1
3895,They are converted to post fix expressions It still follow the order of precedence for the operators,They are converted to post fix expressions It still follow the order of precedence for the operators,2
3896,They are converted to post fix expressions It still follow the order of precedence for the operators,They are first converted to postfix expressions and then evaluated,2
3897,They are converted to post fix expressions It still follow the order of precedence for the operators,Computers cannot evaulate infix expressions it must first convert infix to postfix expression then it can evaluate,2
3898,They are converted to post fix expressions It still follow the order of precedence for the operators,computers usually convert infix expressions to post fix expression and evaluate them using a stack,2
3899,They are converted to post fix expressions It still follow the order of precedence for the operators,Infix expressions are interpreted as postfix expressions by implementing stacks,2
3900,They are converted to post fix expressions It still follow the order of precedence for the operators,They are first converted into an equivalent postfix expression so it can be read by the computer,2
3901,They are converted to post fix expressions It still follow the order of precedence for the operators,The computer translates the infix expression to a postfix expression then solves,2
3902,They are converted to post fix expressions It still follow the order of precedence for the operators,The computer converts the infix expression to postfix form Then evaluates the postfix expression,2
3903,They are converted to post fix expressions It still follow the order of precedence for the operators,infix expressions are converted to postfix expressions before they can be evaluated by a computer Operands stay in the same order Operators always follow the operands,2
3904,They are converted to post fix expressions It still follow the order of precedence for the operators,Computers convert an infix expression into a postfix expression They then push the numbers onto a stack and pop them out as they are needed,2
3905,They are converted to post fix expressions It still follow the order of precedence for the operators,infix expressions are converted to postfix i e 3 plus 2 is changed to 32 plus,2
3906,They are converted to post fix expressions It still follow the order of precedence for the operators,they are transformed into post fix expressions then evaluated with a stack,2
3907,They are converted to post fix expressions It still follow the order of precedence for the operators,Writing arithmetic expressions is called infix notation This is because a binary operator like plus is written in between its two operands as in a plus b There are two alternative forms of notation used in certain situations One is prefix notation in which an operator is written before its operands In prefix notation the sum of a and b is written plus a b This is the notation used to write function calls in mathematics and computer science It is also used in the Lisp and Scheme programming languages In postfix notation an operator is written after its operands The sum of a and b is written a b plus You may have seen this as reverse Polish notation Postfix notation forms the conceptual basis for the way that arithmetic expressions are evaluated by a computer One important characteristic of both postfix and prefix notations is that they are unambiguous; no parentheses are needed to indicate the order of operations,2
3908,Pop all the elements and store them on another stack until the element is found then push back all the elements on the original stack,isEmptry or or determines if the stack is full or not pop or or to remove the top element if it is not the on you are looking for search or or you compare each element of the stack to the data you are looking for,1
3909,Pop all the elements and store them on another stack until the element is found then push back all the elements on the original stack,You would have to keep using peek or getTop to see what the top element is then popping the top element until peek or getTop provides the element you are looking for,1
3910,Pop all the elements and store them on another stack until the element is found then push back all the elements on the original stack,Push adds a given node to the top of the stack leaving previous nodes below Pop removes and returns the current top node of the stack,1
3911,Pop all the elements and store them on another stack until the element is found then push back all the elements on the original stack,if the stack is implemented using an array you could simply search the array for the item If the stack is implemented using a linked list you would have to pop the values off of the stack until either the value is found or the stack is empty you would then have to have the items put back into the list,1
3912,Pop all the elements and store them on another stack until the element is found then push back all the elements on the original stack,You need to pop each item on the stack and compare the item Once the item is found no more items need to be removed,1
3913,Pop all the elements and store them on another stack until the element is found then push back all the elements on the original stack,Basically pop the stack until you find the given element,1
3914,Pop all the elements and store them on another stack until the element is found then push back all the elements on the original stack,Iterate through the stack checking the number against the current element,0
3915,Pop all the elements and store them on another stack until the element is found then push back all the elements on the original stack,either traverse the entire list and pop the given part or create a pointer system that automatically points to it,1
3916,Pop all the elements and store them on another stack until the element is found then push back all the elements on the original stack,if top item ! equals given element pop the stack Repeat until item is found or stack is empty,1
3917,Pop all the elements and store them on another stack until the element is found then push back all the elements on the original stack,could traverse through the list or array to find the element,1
3918,Pop all the elements and store them on another stack until the element is found then push back all the elements on the original stack,you need the pop opertation to go throught the stack and find the element,1
3919,Pop all the elements and store them on another stack until the element is found then push back all the elements on the original stack,createStack push isEmpty pop and a boolean return value,1
3920,Pop all the elements and store them on another stack until the element is found then push back all the elements on the original stack,Pop each element off the stack and into another stack for storage until the desired element is found,1
3921,Pop all the elements and store them on another stack until the element is found then push back all the elements on the original stack,A function to keep track of the elements popped and a function to put the popped elements backinto the function,1
3922,Pop all the elements and store them on another stack until the element is found then push back all the elements on the original stack,you would need to perform a search through the list of elements i dont really understand what this question is asking its not very clear,0
3923,Pop all the elements and store them on another stack until the element is found then push back all the elements on the original stack,StackPush StackPop StackIsEmpty,1
3924,Using linked lists and stacks you would need a temp stack to retain the values Then you would use the Pop function to pop off each element and then compare it If its not the element your looking for Push it to the temp stack Repeat until the element is found When you find it Pop off the temp stack back onto the regular stack to have a complete stack again,Using linked lists and stacks you would need a temp stack to retain the values Then you would use the Pop function to pop off each element and then compare it If its not the element your looking for Push it to the temp stack Repeat until the element is found When you find it Pop off the temp stack back onto the regular stack to have a complete stack again,2
3925,Using linked lists and stacks you would need a temp stack to retain the values Then you would use the Pop function to pop off each element and then compare it If its not the element your looking for Push it to the temp stack Repeat until the element is found When you find it Pop off the temp stack back onto the regular stack to have a complete stack again,Pop each item off the top until you find what you are looking for If the stack ends up empty and you never found the item then it does not exist in the stack It may also be necessary to save the popped values in case you want to recreate the stack,2
3926,Using linked lists and stacks you would need a temp stack to retain the values Then you would use the Pop function to pop off each element and then compare it If its not the element your looking for Push it to the temp stack Repeat until the element is found When you find it Pop off the temp stack back onto the regular stack to have a complete stack again,Pop an element from one stack check to see if it is the desired element if not push it onto another stack When finished pop the items from the second stack and push them back onto the first stack this will ensure the order of the elements is maintained,2
3927,Using linked lists and stacks you would need a temp stack to retain the values Then you would use the Pop function to pop off each element and then compare it If its not the element your looking for Push it to the temp stack Repeat until the element is found When you find it Pop off the temp stack back onto the regular stack to have a complete stack again,Keep popping nodes and storing them in an alternate stack until the given element is found then pop the given element and push the previously popped nodes back onto the stack,2
3928,Using linked lists and stacks you would need a temp stack to retain the values Then you would use the Pop function to pop off each element and then compare it If its not the element your looking for Push it to the temp stack Repeat until the element is found When you find it Pop off the temp stack back onto the regular stack to have a complete stack again,Depends on the type of stack on a true stack you will haft to pop all of the elements of the stack until you find the element you want and then after that you will need to push all the elements that where removed back in to the stack in the order that they where removed With a Java style stack where there is a peek function it will return the element you wanted instead of requiring you to perform all the excessive actions that are required from a true stack,2
3929,A data structure that can store elements which has the property that the last item added will be the last to be removed or first in first out,a queue is a list of objects in a particular order that is read one at a time starting at the first followed by the second and so on,1
3930,A data structure that can store elements which has the property that the last item added will be the last to be removed or first in first out,Queue is a buffer which store element in a particular order,1
3931,A data structure in c plus plus which is a collection of data that is kept in order First in first out,A data structure in c plus plus which is a collection of data that is kept in order First in first out,2
3932,A data structure in c plus plus which is a collection of data that is kept in order First in first out,A queue is an abstract data structure in which operations are performed at both ends giving the queue first in first out behavior,2
3933,A data structure in c plus plus which is a collection of data that is kept in order First in first out,A queue stores a set of elements in a particular order Its principle of operation is FIFO first in first out which means the first element inserted is the first one to be removed,2
3934,A data structure in c plus plus which is a collection of data that is kept in order First in first out,An ADT whose first inserted item is the first item removed This uses the FIFO idea where items enter a queue at its back and leave at its front,2
3935,A data structure in c plus plus which is a collection of data that is kept in order First in first out,Last in last out architecture It works the same way a line at the bank would work the person that is been waiting the longest gets served first,2
3936,A data structure in c plus plus which is a collection of data that is kept in order First in first out,a queue is a data structure that stores elements in a First in First out order,2
3937,A data structure in c plus plus which is a collection of data that is kept in order First in first out,A waiting list of items that operation in a FIFO first in first out order,2
3938,A data structure in c plus plus which is a collection of data that is kept in order First in first out,A queue is similar to an array except that the data can only be accessed sequentially rather than at random Unlike a stack a queue follows FIFO First in First out,2
3939,A data structure in c plus plus which is a collection of data that is kept in order First in first out,is a particular kind of collection in which the entities in the collection are kept in order and the principal or only operations on the collection are the addition of entities to the rear terminal position and removal of entities from the front terminal position First in First Out FIFO Method,2
3940,A data structure in c plus plus which is a collection of data that is kept in order First in first out,A queue is a FIFO data structure,2
3941,A data structure in c plus plus which is a collection of data that is kept in order First in first out,A queue is a first in first out data structure,2
3942,A data structure in c plus plus which is a collection of data that is kept in order First in first out,Its like a stack but uses the linked list to stack a little differently It is FIFO so the first thing enqueued is the first thing dequeued,2
3943,A data structure in c plus plus which is a collection of data that is kept in order First in first out,A first in first out Abstract Data type that can be used to store values,2
3944,A data structure in c plus plus which is a collection of data that is kept in order First in first out,Stores a set of elements in a particular order with a First In First Out principle,2
3945,A data structure in c plus plus which is a collection of data that is kept in order First in first out,object that stores elements in order that follows first in first out the first element added is the first one to come off,2
3946,A data structure in c plus plus which is a collection of data that is kept in order First in first out,A quese is an list that stores a set of elements in a particular order It has Stack principle but in this case its First In First Out The first element inserted is the first element to be removed,2
3947,A data structure in c plus plus which is a collection of data that is kept in order First in first out,a finite ordered list with zero or more elements based upon First In First Out,2
3948,A data structure in c plus plus which is a collection of data that is kept in order First in first out,A Queue is a first in first out data structure such that the first element added is also the first removed,2
3949,A data structure in c plus plus which is a collection of data that is kept in order First in first out,stores a set of elements where the first element in is the first element to be removed,2
3950,A data structure in c plus plus which is a collection of data that is kept in order First in first out,A data structure that removes nodes from the head and adds nodes at the tail,2
3951,A data structure in c plus plus which is a collection of data that is kept in order First in first out,a queue is a storage container that holds its objects in a first in first out priority,2
3952,A data structure in c plus plus which is a collection of data that is kept in order First in first out,The queue is another data structure A physical analogy for a queue is a line at a bank When you go to the bank customers go to the rear end of the line and customers come off of the line i e are serviced from the front of the line,2
3953,enqueue which adds data to the queue and dequeue which deletes data from the queue,enqueue which inserts a specified element at the head of the specified queue and dequeue which removes the specified element from the queue,2
3954,enqueue which adds data to the queue and dequeue which deletes data from the queue,The two main functions are enqueue which inserts an item at the back of the queue and dequeue which removes an item from the front of the queue,2
3955,enqueue which adds data to the queue and dequeue which deletes data from the queue,The two main functions are enqueue and dequeue,2
3956,enqueue which adds data to the queue and dequeue which deletes data from the queue,enqueue insert into queue dequeue remove element,2
3957,enqueue which adds data to the queue and dequeue which deletes data from the queue,Remove the item added first add items to the back,2
3958,enqueue which adds data to the queue and dequeue which deletes data from the queue,The two main functions of a queue are enqueue and dequeue,2
3959,enqueue which adds data to the queue and dequeue which deletes data from the queue,enque Data Deque,2
3960,enqueue which adds data to the queue and dequeue which deletes data from the queue,The two functions are Enqueue and Dequeue,2
3961,enqueue which adds data to the queue and dequeue which deletes data from the queue,enqueue that adds an item to the queue dequeue that takes the first item out of the queue,2
3962,enqueue which adds data to the queue and dequeue which deletes data from the queue,Enqueue and dequeue which add and remove elements from the queue,2
3963,Use a circular array Keep the rear of the queue toward the end of the array and the front toward the beginning and allow the rear pointer to wrap around,Make use of a front pointer and a tail pointer When the tail pointer reaches the end of an array it gets reset to the front of the array If the two pointers are equal then the queue is either full or just has one element,1
3964,Use a circular array Keep the rear of the queue toward the end of the array and the front toward the beginning and allow the rear pointer to wrap around,you create an array with the max size of your queue and adjust the items to make them follow FIFO procedure,1
3965,Use a circular array Keep the rear of the queue toward the end of the array and the front toward the beginning and allow the rear pointer to wrap around,By implementing an array and only adding items to the end of the array and only removing items from the beginning of the array,1
3966,Use a circular array Keep the rear of the queue toward the end of the array and the front toward the beginning and allow the rear pointer to wrap around,For applications in which a fixed sized queue does not present a problem you can use an array to represent a queue,1
3967,Use a circular array Keep the rear of the queue toward the end of the array and the front toward the beginning and allow the rear pointer to wrap around,Keep track of the front and the back of the array as you increase and decrease the elements inside the array,1
3968,Use a circular array Keep the rear of the queue toward the end of the array and the front toward the beginning and allow the rear pointer to wrap around,Declare the size of an array and have special conditional statements pointers to make sure you re use ALL of the array Say you have an array of 20 elements you load up 18 then dequeue 3 when you enqueue 4 more elements you want to loop back to index 0 and continue from there this process saves resources,1
3969,Use a circular array Keep the rear of the queue toward the end of the array and the front toward the beginning and allow the rear pointer to wrap around,you could use the first element of the list as the remove point and insert at the end f you do this you would have to shift the elements down each time you remove an item unless you make the array circular,1
3970,Use a circular array Keep the rear of the queue toward the end of the array and the front toward the beginning and allow the rear pointer to wrap around,Utilizing indexes for the front and the back Front is 0 and as you add items the back index is incremented,1
3971,Use a circular array Keep the rear of the queue toward the end of the array and the front toward the beginning and allow the rear pointer to wrap around,Declare two variables front and rear to be used to denote which elements in the array can be accessed Increment rear whenever data is enqueued to the end and increment front whenever data is dequeued,1
3972,Use a circular array Keep the rear of the queue toward the end of the array and the front toward the beginning and allow the rear pointer to wrap around,It is an array of fixed size A queue of maximum N elements,1
3973,Use a circular array Keep the rear of the queue toward the end of the array and the front toward the beginning and allow the rear pointer to wrap around,make an array of a size and add on to the front and delete from the back keep track of the two so that you know when it is full and where to add or subtract from,1
3974,Use a circular array Keep the rear of the queue toward the end of the array and the front toward the beginning and allow the rear pointer to wrap around,By using the beginning of the array as the removal point of the queue or beginning of the queue and the ith element as the end of the queue,1
3975,Use a circular array Keep the rear of the queue toward the end of the array and the front toward the beginning and allow the rear pointer to wrap around,add in data from the first element to the last take out data from the first element to the last,1
3976,Use a circular array Keep the rear of the queue toward the end of the array and the front toward the beginning and allow the rear pointer to wrap around,create a fixed array size with with 2 integers to point to the beginning and the end of the que and special cases to know when the que is empty or full,1
3977,Use a circular array Keep the rear of the queue toward the end of the array and the front toward the beginning and allow the rear pointer to wrap around,Keep track of the front and rear indexes Either : 1 Dequeue items by shifting the array left 2 Use wrapped configuration,1
3978,Use a circular array Keep the rear of the queue toward the end of the array and the front toward the beginning and allow the rear pointer to wrap around,add items into a fixed size array pull the items out by calling on them with the starting index increase starting index so when it calls again its now the next index element in the array,1
3979,Use a circular array Keep the rear of the queue toward the end of the array and the front toward the beginning and allow the rear pointer to wrap around,To use and array to implement a Queue element or item 0 should be the top element in the array Every time an element is inserted all the items in the array are pushed back one space The top element is always removed first,1
3980,Use a circular array Keep the rear of the queue toward the end of the array and the front toward the beginning and allow the rear pointer to wrap around,fixed size array with max N elements Need to keep track of front and rear of array,1
3981,Use a circular array Keep the rear of the queue toward the end of the array and the front toward the beginning and allow the rear pointer to wrap around,A pointer based implementation of a queue could use a linear linked list with two external pointers one to the front and one to the back,1
3982,by keeping track of a front item and a rear item or with a circular array that uses the modulo function,by keeping track of a front item and a rear item or with a circular array that uses the modulo function,2
3983,by keeping track of a front item and a rear item or with a circular array that uses the modulo function,Using an array for a queue the size of the array allocated limits the size of the queue An array based queue class must keep track of both the front and back of the queue which may need to wrap around the array,2
3984,by keeping track of a front item and a rear item or with a circular array that uses the modulo function,By having the head pointer point to the first or least current data entered and having the tail point to the most current data entered A method must be created so that the tail pointer does not leave the array,2
3985,by keeping track of a front item and a rear item or with a circular array that uses the modulo function,your storage class has an array and you keep track of the index of the first and last item in the array and wrap around when end of the array is full,2
3986,by keeping track of a front item and a rear item or with a circular array that uses the modulo function,Boolean isFullQ queue : : equals rear equals equals MAX QUEUE SIZE 1,2
3987,Keep the rear of the queue pointing to the tail of the linked list so the enqueue operation is done at the end of the list and keep the front of the queue pointing to the head of the linked list so the dequeue operation is done at the beginning of the list,theoretically you could do it two ways one of which uses more processing power and memory no larger than the queue is ever at when full and the other which uses almost infinite memory The more practical method would be two place the items in an array and remove the item in position one of the array after which you can shift the array and add another element if required The other option which can use infinite memory when used for long term queues such as job scheduling that goes nonstop for extended periods that is to implement an array and add the items read item one raise your counter value to two ecetera and continue adding more elements to the array the downside to this method is after you use element one it is still in memory or im crazy who knows,1
3988,Keep the rear of the queue pointing to the tail of the linked list so the enqueue operation is done at the end of the list and keep the front of the queue pointing to the head of the linked list so the dequeue operation is done at the beginning of the list,You can use list to represent the items in a queue,0
3989,Keep the rear of the queue pointing to the tail of the linked list so the enqueue operation is done at the end of the list and keep the front of the queue pointing to the head of the linked list so the dequeue operation is done at the beginning of the list,Have a pointer to the last element in the list and then use enqueue to insert items there Link the first and last elements together to dequeue the list,1
3990,Keep the rear of the queue pointing to the tail of the linked list so the enqueue operation is done at the end of the list and keep the front of the queue pointing to the head of the linked list so the dequeue operation is done at the beginning of the list,Utilizing a front pointer and a back pointer The front poiner and back pointer points to the first item into the queue As you add items the front remains the same but the back poiner next points to the new item and the new item is assigned to become the new back pointer,1
3991,Keep the rear of the queue pointing to the tail of the linked list so the enqueue operation is done at the end of the list and keep the front of the queue pointing to the head of the linked list so the dequeue operation is done at the beginning of the list,Implement a linked list that only allows nodes to be added to the tail and can only be retrieved from the head,1
3992,Keep the rear of the queue pointing to the tail of the linked list so the enqueue operation is done at the end of the list and keep the front of the queue pointing to the head of the linked list so the dequeue operation is done at the beginning of the list,Check if list is empty and add elements to the list,1
3993,Keep the rear of the queue pointing to the tail of the linked list so the enqueue operation is done at the end of the list and keep the front of the queue pointing to the head of the linked list so the dequeue operation is done at the beginning of the list,make a linked list and add on to the front and delete from the back keep track of both to do so,1
3994,Keep the rear of the queue pointing to the tail of the linked list so the enqueue operation is done at the end of the list and keep the front of the queue pointing to the head of the linked list so the dequeue operation is done at the beginning of the list,You create a list of nodes that had a head and a top pointer and the functions are basically the same substituting pop and push with enqueue and dequeue,1
3995,Keep the rear of the queue pointing to the tail of the linked list so the enqueue operation is done at the end of the list and keep the front of the queue pointing to the head of the linked list so the dequeue operation is done at the beginning of the list,fairly easy singly linked list with a pointer to the head and tail of hte list deque first item in que create temp pointer to next element delete head and then make head the temporary pointer enque new item use pointer to end of list add a new item to the next item of the tail and make the tail the next item of the current tail,1
3996,Keep the rear of the queue pointing to the tail of the linked list so the enqueue operation is done at the end of the list and keep the front of the queue pointing to the head of the linked list so the dequeue operation is done at the beginning of the list,Use a linked list with 2 pointers one to the front and one to the back As long as back ! equals front the queue is not empty,1
3997,Keep the rear of the queue pointing to the tail of the linked list so the enqueue operation is done at the end of the list and keep the front of the queue pointing to the head of the linked list so the dequeue operation is done at the beginning of the list,create a node with the input data continue to add to the list when dequeueing get the first elements data and set the next element in the list as the new first element,1
3998,Keep the rear of the queue pointing to the tail of the linked list so the enqueue operation is done at the end of the list and keep the front of the queue pointing to the head of the linked list so the dequeue operation is done at the beginning of the list,A linked list with Stack principles The Queue top element is the element that is always being removed first Must use nodes to contain each element with a pointer to the top element which also could be called the head pointer,1
3999,Keep the rear of the queue pointing to the tail of the linked list so the enqueue operation is done at the end of the list and keep the front of the queue pointing to the head of the linked list so the dequeue operation is done at the beginning of the list,linked list checking for front and rear Keep enqueueing elements until front equal to rear 1,1
4000,Keep the rear of the queue pointing to the tail of the linked list so the enqueue operation is done at the end of the list and keep the front of the queue pointing to the head of the linked list so the dequeue operation is done at the beginning of the list,a queue can be implemented in a list by keeping track of two pointers a head and a tail,1
4001,Keep the rear of the queue pointing to the tail of the linked list so the enqueue operation is done at the end of the list and keep the front of the queue pointing to the head of the linked list so the dequeue operation is done at the beginning of the list,Implement the operation dequeue as the list operation remove 1 and the operation getFront queueFront as the list operation retrieve 1 queueFront,1
4002,Keep the rear of the queue pointing to the tail of the linked list so the enqueue operation is done at the end of the list and keep the front of the queue pointing to the head of the linked list so the dequeue operation is done at the beginning of the list,remove the first element and reference the second element as the new head of the list,1
4003,Keep the rear of the queue pointing to the tail of the linked list so the enqueue operation is done at the end of the list and keep the front of the queue pointing to the head of the linked list so the dequeue operation is done at the beginning of the list,your queue storage class has a list and for enqueue you add the item to the end of the list and for dequeue you return the first item in the list,1
4004,Keep the rear of the queue pointing to the tail of the linked list so the enqueue operation is done at the end of the list and keep the front of the queue pointing to the head of the linked list so the dequeue operation is done at the beginning of the list,temp implies next equals NULL; if front rear implies next equals temp; else front equals temp; rear equals temp;,1
4005,A list can have unlimited elements in it You can push a node onto the end of the list and pop the one in the front,A list can have unlimited elements in it You can push a node onto the end of the list and pop the one in the front,2
4006,A list can have unlimited elements in it You can push a node onto the end of the list and pop the one in the front,By implementing a list in which a tail pointer points to the item most recently inserted onto the back of the list and a head pointer which points to the item least recently inserted onto the list Also items can only be removed from the front of the list and can only be added to the back of the list,2
4007,A list can have unlimited elements in it You can push a node onto the end of the list and pop the one in the front,Enqueue to the end of the linked list dequeue items from the beginning head of the list,2
4008,A list can have unlimited elements in it You can push a node onto the end of the list and pop the one in the front,you use the first element in the list as the remove point for the queue and insert items at the end of the list,2
4009,A list can have unlimited elements in it You can push a node onto the end of the list and pop the one in the front,each element of a queue can be allocated in the nodes of an linked list New elements should be added to the head of the list with each dequeued element coming off the tail,2
4010,A list can have unlimited elements in it You can push a node onto the end of the list and pop the one in the front,By creating and adding nodes at the end of the list and removing the nodes from the beginning of the list,2
4011,List based because they are dynamic no size constraints,List based Because it is on the run time order of N also it does not have a limited size like an array does,1
4012,List based because they are dynamic no size constraints,A list based implementation would be preferred The array is slightly more complicated where you would need to keep track of both front and rear,1
4013,List based because they are dynamic no size constraints,List based Array based queues have a way to complicate things to an extent,1
4014,List based because they are dynamic no size constraints,array based is preferred because all you have to keep track of is the array itself and the count,0
4015,List based because they are dynamic no size constraints,List based because when you enqueue or dequeue depending upon your implementation you would need to shift all elements to another space with an array causing a horrid time complexity for large data sets where as you can just modify the pointers in a list for a constant time complexity,1
4016,List based because they are dynamic no size constraints,list based its much simpler and the run time is better,1
4017,List based because they are dynamic no size constraints,I think array based is batter because of fixed size but on other had list base is more flaxible You do not have to worry about the size,1
4018,List based because they are dynamic no size constraints,list based because you dont need to shift the elements like you do in array based queues,1
4019,linked list based because it does not store the items linearly in memory but instead as individual blocks,linked list based because it does not store the items linearly in memory but instead as individual blocks,2
4020,linked list based because it does not store the items linearly in memory but instead as individual blocks,List based is preferred because there are no size restrictions,2
4021,linked list based because it does not store the items linearly in memory but instead as individual blocks,List based Less code and no size limitation or declaration which means it is also more efficient and versatile,2
4022,linked list based because it does not store the items linearly in memory but instead as individual blocks,list based is prefered because it does not have a set size and insertion and deletion can be done very quickly of you keep pointers to first element and last,2
4023,linked list based because it does not store the items linearly in memory but instead as individual blocks,List based is preferred because there are space issues with array based due to rightward drift The fix for rightward drift requires constant shifting of the queue data,2
4024,linked list based because it does not store the items linearly in memory but instead as individual blocks,Similar to stacks linked lists are preferable for queues because the size can be adjusted,2
4025,linked list based because it does not store the items linearly in memory but instead as individual blocks,list because its size is not defined,2
4026,linked list based because it does not store the items linearly in memory but instead as individual blocks,queue are best with lists especially if the tail is kept track of as the list can be dynamically grown without losing track of the head or tail,2
4027,linked list based because it does not store the items linearly in memory but instead as individual blocks,list based because of the lessened memory usage initially and the increased limits on how large the que can become,2
4028,linked list based because it does not store the items linearly in memory but instead as individual blocks,List based because it is not fixed size,2
4029,linked list based because it does not store the items linearly in memory but instead as individual blocks,list its dynamic and no size needs to be declared,2
4030,linked list based because it does not store the items linearly in memory but instead as individual blocks,list bases implementatoin is best because you use pointers to keep track of the front and back pointers Easier to maintain but uses more memory,2
4031,linked list based because it does not store the items linearly in memory but instead as individual blocks,list based It can dynamically grow and has fewer restrictions,2
4032,linked list based because it does not store the items linearly in memory but instead as individual blocks,list based is preferred because memory allocation is not an issue,2
4033,linked list based because it does not store the items linearly in memory but instead as individual blocks,List based solutions are preferred because they allow for queues of any size,2
4034,linked list based because it does not store the items linearly in memory but instead as individual blocks,List based because memory is not constricted,2
4035,linked list based because it does not store the items linearly in memory but instead as individual blocks,list based because the array based has to have a fixed size it cannot be added to or removed from as easily,2
4036,linked list based because it does not store the items linearly in memory but instead as individual blocks,list based array is easier and more scalable,2
4037,linked list based because it does not store the items linearly in memory but instead as individual blocks,list based becuase an arrary based has to have an arrary size and needs to be pre defined and cannot be changed dynamically,2
4038,push,The stack operation is almost the opposite of the enqueue operation,1
4039,push,push equals enqueue pop equals dequeue,1
4040,push,FIFO : First in First out,0
4041,Push,push which inserts something at the top of the stack,2
4042,Push,The stack operation corresponding to enqueue in queues is the push operation,2
4043,Push,Push in a stack operation corresponds to the enqueue operation in queues These operations insert a new item into one end the top and back respectively of the ADT,2
4044,Push,Not sure what this question means You can use the stack push operation and the enqueue operation to detect palindromes,2
4045,Push,Enqueue is the queue equivalent of push and dequeue is the queue equivalent to pop,2
4046,Push,Push operation,2
4047,Push,that would be the push operation if it put the item at the end of the list,2
4048,Push,the Push method in the stack operations,2
4049,Push,Push corresponds with enqueue both very similarly place new elements into their stack or queue,2
4050,a queue otherwise some things would never be printed,A stack some printing jobs might have a higher priority than others and they can be easily inserted at the front of the list or anywhere between,0
4051,a queue otherwise some things would never be printed,a queue otherwise some things would never be printed,2
4052,a queue otherwise some things would never be printed,A queue is more appropriate for scheduling printing jobs because queues have first in first out behavior,2
4053,a queue otherwise some things would never be printed,Queue its better to be FIFO than LIFO stack,2
4054,a queue otherwise some things would never be printed,Queue of course !,2
4055,a queue otherwise some things would never be printed,Queue the person who wanted to print first should be first served,2
4056,a queue otherwise some things would never be printed,queue because it guarantees that job are executed in the order they come in,2
4057,a queue otherwise some things would never be printed,Queues would be preferable to stacks for use as scheduling print jobs because it would print jobs in the order that they were sent to the printer,2
4058,a queue otherwise some things would never be printed,Queue are more appropriate as printers are usually first come first serve,2
4059,a queue otherwise some things would never be printed,queue because of the first in first out principles and if it was a stack it would be last in last out because it could possibly not let the first item that was added get removed in a timely manner,2
4060,a queue otherwise some things would never be printed,Queue,2
4061,a queue otherwise some things would never be printed,A Queue data structure is more appropriate for scheduling printing jobs at a printer The first job sent to the printer is the first job printed,2
4062,a queue otherwise some things would never be printed,a queue It would not be unfair for the first job to finish last,2
4063,a queue otherwise some things would never be printed,a queue because it takes the job that has waited the longest,2
4064,a queue otherwise some things would never be printed,A queue is more appropriate because the clients which have waited the longest should be the first served,2
4065,a queue otherwise some things would never be printed,a queue,2
4066,a queue otherwise some things would never be printed,i would say that a queue is better because the first thing you try to print should be the first one to come out of the printer FIFO,2
4067,a queue otherwise some things would never be printed,a queue because you want the jobs to execute in the order that they are received,2
4068,a queue otherwise some things would never be printed,queue,2
4069,"Label the data with positive and negative (+/-) labels, initialize the weights randomly, apply (simplified) update rule: Dw = eta*x(n) if <w,x> <= 0, repeat on all epochs till the weights don’t change much. The algorithm will converge as the data is linearly separable.  ","Define a bias in order to be able to trigger to which class data points will be classefied to. Assign initial randomly chosen weights, use a squashing function for example McCullon Pits, start training proccess and stop when error of output and desired output has reached desired percentage.",0
4070,"Label the data with positive and negative (+/-) labels, initialize the weights randomly, apply (simplified) update rule: Dw = eta*x(n) if <w,x> <= 0, repeat on all epochs till the weights don’t change much. The algorithm will converge as the data is linearly separable.  ",no answer,0
4071,"Label the data with positive and negative (+/-) labels, initialize the weights randomly, apply (simplified) update rule: Dw = eta*x(n) if <w,x> <= 0, repeat on all epochs till the weights don’t change much. The algorithm will converge as the data is linearly separable.  ",We use threshold function as activation function. if w.x + b >= 1 label class 1. else label class 0.,0
4072,"Label the data with positive and negative (+/-) labels, initialize the weights randomly, apply (simplified) update rule: Dw = eta*x(n) if <w,x> <= 0, repeat on all epochs till the weights don’t change much. The algorithm will converge as the data is linearly separable.  ",1. Compute the initial weights for all input vector 2. Apply matrix multiplication from input to weight vector 3. Apply linear combiner 4. Apply activation function to produce the output 5. Compute the error 6. Update weights,0
4073,"Arrange the weights in the required topology according to the problem. Initialize the weights randomly such that all the weights are different. Sample the input from the input space. Similarity matching: match the input to a neuron in the topological lattice which becomes the winning neuron. Update the weights of the winning neuron and its neighbours determined by the neighbourhood function. Reduce the neighbourhood and decay the learning rate and share radius. If ordering and convergence are complete, stop. Else continue sampling from the input space.",no answer,0
4074,"Arrange the weights in the required topology according to the problem. Initialize the weights randomly such that all the weights are different. Sample the input from the input space. Similarity matching: match the input to a neuron in the topological lattice which becomes the winning neuron. Update the weights of the winning neuron and its neighbours determined by the neighbourhood function. Reduce the neighbourhood and decay the learning rate and share radius. If ordering and convergence are complete, stop. Else continue sampling from the input space.","Has three parts in it - Competition, Cooperation, Adaptation get input variable and choose amount of neurons to be more than amount of variables then run competition, where from the input neurons will be compiting to each other on choosing which fits the most after finding winning neuron change weight of neighbouring neuron only in cooperation weights of neighbouring neurons are adjusted to clusters in adaptation neurons are pulled to input variables to establish the classification",0
4075,"Arrange the weights in the required topology according to the problem. Initialize the weights randomly such that all the weights are different. Sample the input from the input space. Similarity matching: match the input to a neuron in the topological lattice which becomes the winning neuron. Update the weights of the winning neuron and its neighbours determined by the neighbourhood function. Reduce the neighbourhood and decay the learning rate and share radius. If ordering and convergence are complete, stop. Else continue sampling from the input space.",- Find the winning neuron - Find the neighbors of the winning neuron.,0
4076,SVMs are linear learnable machines in the simplest case. It uses a decision boundary with maximum margin to classify the data into different classes. The data points which are near the decision boundary are called support vectors and the margin is determined based on these points. Kernels are used to separate non-linearly separable data and the algorithm is solved by using Quadratic Programming. ,Support vector machines are a type of neural network that build a desicion boundary around classes such that the margin of separation between classes is maximized.,0
4077,"For all 2^N possible binary labeling of every data, if a hypothesis h splits the positive data from the negative data with no error, then it means that the hypothesis h shatters the dataset A.",no answer,0
4078,"For all 2^N possible binary labeling of every data, if a hypothesis h splits the positive data from the negative data with no error, then it means that the hypothesis h shatters the dataset A.",there exists an arrangement of these points in A sucht that for each possible combination of labels to these points the hypothesis h has zero training error,0
4079,"For all 2^N possible binary labeling of every data, if a hypothesis h splits the positive data from the negative data with no error, then it means that the hypothesis h shatters the dataset A.",A hypothesis $h \in H$ shatters a dataset $A \subseteq X \Leftrightarrow$ at least on possible combination of dataset $A$ can be classified by the hypothesis $h \in H$ with zero training error.,0
4080,"For all 2^N possible binary labeling of every data, if a hypothesis h splits the positive data from the negative data with no error, then it means that the hypothesis h shatters the dataset A.","A hypothesis h is model that separates a dataset consisting of {(xi , yi)} samples into positive and negative samples. h is said to shatter a given subset of a dataset if it can successfully separate at least one configuration of the subset of dataset.",0
4081,"For all 2^N possible binary labeling of every data, if a hypothesis h splits the positive data from the negative data with no error, then it means that the hypothesis h shatters the dataset A.",", if there exists a configuration of $X$, so that $h$ gets zero training error on any dichotomy of the datapoints.",0
4082,"For all 2^N possible binary labeling of every data, if a hypothesis h splits the positive data from the negative data with no error, then it means that the hypothesis h shatters the dataset A.","there exist w weights, which produce a perfect classification.",0
4083,"For all 2^N possible binary labeling of every data, if a hypothesis h splits the positive data from the negative data with no error, then it means that the hypothesis h shatters the dataset A.",If there exist atleast one configuration of A for which training error of h is zero. i.e. it successfully classifies all oints in A.,0
4084,"For all 2^N possible binary labeling of every data, if a hypothesis h splits the positive data from the negative data with no error, then it means that the hypothesis h shatters the dataset A.","We say that a hypothesis h shatters a dataset A, iff the h produces a zero training error for certain data set A. In other words, we say that a hypothesis h shatters a dataset A, when h separates data A in two classes without erorr.",0
4085,The adjustment made to a synaptic weight of a neuron is proportional to the product of the error signal and the input signal of the synapse in question. The rule is derived from the steepest descent method.,no answer,0
4086,The adjustment made to a synaptic weight of a neuron is proportional to the product of the error signal and the input signal of the synapse in question. The rule is derived from the steepest descent method.,"Windrow-Hoff rule is $$W{new}=x{input}*W{old}*(d{output}-y{output})*eta*a $$ where $W{new}=new weight,W{old}=old weight,d{output}=desired output,y{output}=actual output,x{input}=input, eta=learning rate, a=learning constant$",0
4087,The adjustment made to a synaptic weight of a neuron is proportional to the product of the error signal and the input signal of the synapse in question. The rule is derived from the steepest descent method.,This the basicly the calulating mean squared error (MSE) from the expected output and real output. Modifiying the weights for Minimizing MSE it .,0
4088,The reduced Boltzmann machine is a bi-parted graph which works by flipping the states of binary neurons based on a probability determined by the activation produced at the neuron. Neurons are arranged in a visible and a hidden layer in a recurrent fashion. There are two states involved called the clamped state in which the visible neuron is connected to the input and a free running state in which both layers run free.,no answer,0
4089,The reduced Boltzmann machine is a bi-parted graph which works by flipping the states of binary neurons based on a probability determined by the activation produced at the neuron. Neurons are arranged in a visible and a hidden layer in a recurrent fashion. There are two states involved called the clamped state in which the visible neuron is connected to the input and a free running state in which both layers run free.,It consists of only two layers: input and hidden layer. During training data is presented to the input. The hidden layer starts oscillating.,0
4090,The reduced Boltzmann machine is a bi-parted graph which works by flipping the states of binary neurons based on a probability determined by the activation produced at the neuron. Neurons are arranged in a visible and a hidden layer in a recurrent fashion. There are two states involved called the clamped state in which the visible neuron is connected to the input and a free running state in which both layers run free.,"They are neural network with only one hidden layer, neurons from input to hidden layer are fully connected, neurons from hidden layer to output layer are fully connected as well.",0
4091,The reduced Boltzmann machine is a bi-parted graph which works by flipping the states of binary neurons based on a probability determined by the activation produced at the neuron. Neurons are arranged in a visible and a hidden layer in a recurrent fashion. There are two states involved called the clamped state in which the visible neuron is connected to the input and a free running state in which both layers run free.,It uses an energy function to oversee the learning process,0
4092,The reduced Boltzmann machine is a bi-parted graph which works by flipping the states of binary neurons based on a probability determined by the activation produced at the neuron. Neurons are arranged in a visible and a hidden layer in a recurrent fashion. There are two states involved called the clamped state in which the visible neuron is connected to the input and a free running state in which both layers run free.,the binary state of each neuron is flipped by a given probability. Stochastical learning,0
4093,The reduced Boltzmann machine is a bi-parted graph which works by flipping the states of binary neurons based on a probability determined by the activation produced at the neuron. Neurons are arranged in a visible and a hidden layer in a recurrent fashion. There are two states involved called the clamped state in which the visible neuron is connected to the input and a free running state in which both layers run free.,Neurons have to states e.g. on or off. Each neuron has a probability to flip from one state to another.,0
4094,The reduced Boltzmann machine is a bi-parted graph which works by flipping the states of binary neurons based on a probability determined by the activation produced at the neuron. Neurons are arranged in a visible and a hidden layer in a recurrent fashion. There are two states involved called the clamped state in which the visible neuron is connected to the input and a free running state in which both layers run free.,the main idea of the RBM is compute the Least mean square error of the difference between expected output and real output.,0
4095,Echo State Network is a type of Recurrent Neural Network and has at least one cyclic (feedback) connection. Only the weights of the output layers are updated while learning. ESN consists of feedback connections while a FF NN does not. ESN can approximate dynamic systems while FF NN cannot.  ,The core of an ESN is an arbitrary network with recurrence.,0
4096,Echo State Network is a type of Recurrent Neural Network and has at least one cyclic (feedback) connection. Only the weights of the output layers are updated while learning. ESN consists of feedback connections while a FF NN does not. ESN can approximate dynamic systems while FF NN cannot.  ,ESN are the RNN recurrent neural network which has at least one feedback cyle. FF NN are normally forward moving networks where the input from one layer is fed into next layer and generated the output . but IN ESN the out put is again fed back as input . ESN is tend to have Resvoir where its randomly connected.,0
4097,Echo State Network is a type of Recurrent Neural Network and has at least one cyclic (feedback) connection. Only the weights of the output layers are updated while learning. ESN consists of feedback connections while a FF NN does not. ESN can approximate dynamic systems while FF NN cannot.  ,no answer,0
4098,"Convolutional Neural Network consists of many layers such as a convolutional layer that has kernels which convolve over the input image, an activation layer (ReLU activation), pooling layer (max or average pooling), and one or more fully connected layers followed by softmax layer.","In comparison to other NN, in CNN matrix multiplication is replaced with convolution. Everything else remains the same.",0
4099,"Convolutional Neural Network consists of many layers such as a convolutional layer that has kernels which convolve over the input image, an activation layer (ReLU activation), pooling layer (max or average pooling), and one or more fully connected layers followed by softmax layer.",no answer,0
4100,"Convolutional Neural Network consists of many layers such as a convolutional layer that has kernels which convolve over the input image, an activation layer (ReLU activation), pooling layer (max or average pooling), and one or more fully connected layers followed by softmax layer.",CNN is has multiple layers and they dont use multiplication matrix.,0
4101,"Three items to be learned are centers, weights, and biases. RBFN consists of a single hidden layer and a linear output layer. NN can have multiple hidden layers and a linear or non-linear output layer. Pros: RBFN is a universal approximator and it is easy to add more centers. Con: The bias is not unique.  ",The three items that must be learned in RBFs are: - The center of the kernel - The size(standard deviation) of the kernel,0
4102,"Three items to be learned are centers, weights, and biases. RBFN consists of a single hidden layer and a linear output layer. NN can have multiple hidden layers and a linear or non-linear output layer. Pros: RBFN is a universal approximator and it is easy to add more centers. Con: The bias is not unique.  ",no answer,0
4103,"Three items to be learned are centers, weights, and biases. RBFN consists of a single hidden layer and a linear output layer. NN can have multiple hidden layers and a linear or non-linear output layer. Pros: RBFN is a universal approximator and it is easy to add more centers. Con: The bias is not unique.  ","The mean of the k clusters, the",0
4104,"Three items to be learned are centers, weights, and biases. RBFN consists of a single hidden layer and a linear output layer. NN can have multiple hidden layers and a linear or non-linear output layer. Pros: RBFN is a universal approximator and it is easy to add more centers. Con: The bias is not unique.  ",In RBF first inputs are transformed to higer dimension using non linear transformation. This is based on unsupervised learning. Inputs are then learned using least square estimation which is an supervised learning. RBF is based on Covers theorem which states that there is higher probability that data will be linearly separable in higher dimension.,0
4105,"Three items to be learned are centers, weights, and biases. RBFN consists of a single hidden layer and a linear output layer. NN can have multiple hidden layers and a linear or non-linear output layer. Pros: RBFN is a universal approximator and it is easy to add more centers. Con: The bias is not unique.  ","HERE: - RBFs are only dependent on the radial distance i.e., distance from the center to the input",0
4106,"Three items to be learned are centers, weights, and biases. RBFN consists of a single hidden layer and a linear output layer. NN can have multiple hidden layers and a linear or non-linear output layer. Pros: RBFN is a universal approximator and it is easy to add more centers. Con: The bias is not unique.  ",In rbf the main advantage is that it follows cover's theorem and the complex pattern classification problem can be solved .,0
4107,"Three items to be learned are centers, weights, and biases. RBFN consists of a single hidden layer and a linear output layer. NN can have multiple hidden layers and a linear or non-linear output layer. Pros: RBFN is a universal approximator and it is easy to add more centers. Con: The bias is not unique.  ",-,0
4108,"Three items to be learned are centers, weights, and biases. RBFN consists of a single hidden layer and a linear output layer. NN can have multiple hidden layers and a linear or non-linear output layer. Pros: RBFN is a universal approximator and it is easy to add more centers. Con: The bias is not unique.  ","data varaince Features RBF uses suport vector machine which is classifier. it uses different kernels , it doesnot have feedback cycle. it also classifies non linear classification problem. it mainly works with 2 classes C1 ,C2. other NN is can also reggression and there can be feedback (RNN)",0
4109,"Add the new data to the members of colored or classified old data, construct a sphere with k nearest data points, find the class or color which has the maximum vote and assign the new data to the class which has the maximum vote in an unsupervised manner. ","i. First we initialize the random points, those points are considered as centroids of clusters ii. Then, for each new points, we compute euclidean distance, and points closest to centrodis are assigned their respective clusters iii. We again re-calculate the centroids of clusters iv. Repeat 2 and 3 untill convergence is achieved, by making sure, no centroids are moving and cost function is minmized",0
4110,"Add the new data to the members of colored or classified old data, construct a sphere with k nearest data points, find the class or color which has the maximum vote and assign the new data to the class which has the maximum vote in an unsupervised manner. ",k-nearest neighbor wants to determine encoder $\C which assigns N inputs to K clusters based on a rule to be defined.,0
4111,"Add the new data to the members of colored or classified old data, construct a sphere with k nearest data points, find the class or color which has the maximum vote and assign the new data to the class which has the maximum vote in an unsupervised manner. ",no answer,0
4112,"Add the new data to the members of colored or classified old data, construct a sphere with k nearest data points, find the class or color which has the maximum vote and assign the new data to the class which has the maximum vote in an unsupervised manner. ",$N$ number of clusters. Given sample data select $N$ different cluster centers by random. Assign all sample points to the closest cluster repeat until no further change: - recalucate the cluster centers - Assign all sample points to the closest cluster,0
4113,"Add the new data to the members of colored or classified old data, construct a sphere with k nearest data points, find the class or color which has the maximum vote and assign the new data to the class which has the maximum vote in an unsupervised manner. ","Define K centroids, random intialised assign each data point a class label while the is no change anymore for each k calculate the centroid of the datapoint beloging to that label for each datapoint determine the nearest centroid assign a new class label which belongs to the centroid.",0
4114,"Add the new data to the members of colored or classified old data, construct a sphere with k nearest data points, find the class or color which has the maximum vote and assign the new data to the class which has the maximum vote in an unsupervised manner. ","K-nearest neighbors can be seen as an unsupervised learning method, where for a defined number of groups k, the nearest neighbors will be calculated. 1: For a given input data 2: Define value k 3: Get the k points that are closer to the given points.",0
4115,"Add the new data to the members of colored or classified old data, construct a sphere with k nearest data points, find the class or color which has the maximum vote and assign the new data to the class which has the maximum vote in an unsupervised manner. ",1- randomly define a predefined number of cluster centers(CC) 2- calculate the distance of each datapoint from each CC 3- Each data point belongs to the cluster that has the least distance from its CC 4- Calculate a new CC by getting the average of all the points inside a cluster 5- Go to 2 and repeat this process untill we reach the termination condition,0
4116,"Add the new data to the members of colored or classified old data, construct a sphere with k nearest data points, find the class or color which has the maximum vote and assign the new data to the class which has the maximum vote in an unsupervised manner. ",Firstly identify nearest neighbouring weights then choose k amount of neighbors and adapt their weights,0
4117,"Add the new data to the members of colored or classified old data, construct a sphere with k nearest data points, find the class or color which has the maximum vote and assign the new data to the class which has the maximum vote in an unsupervised manner. ","** Pseudo Code ** 1. Initiate weights randomly 2. Assign labels to k-inputs that are map neuron is closest to. 3. append all inputs to map neurons using 2. 4. Find centroid of the cluster and move the map neuron to the centroid. 5. Do 2, and 4 until some convergence criteria is reached, e.g. maximum iterations is reached or no updates are performed or net distance is below some specified distance.",0
4118,"Add the new data to the members of colored or classified old data, construct a sphere with k nearest data points, find the class or color which has the maximum vote and assign the new data to the class which has the maximum vote in an unsupervised manner. ","Parameters: k -number of clusters, x datapoints , c classes 1) Initialize randomly k centroid of the custers 2) select a data point and compute the set of nearest neighbours of the point using euclidean distances. 3) Find the class that maximum number of neighbours belong to and assign the class to the datapoint. 4) Once the class is assigned, compute the centroid of each cluster or class, considering all the class members. 5) Iterate over all the datapoints and repeat over all points (from step 2) until no update in centroids is required.",0
4119,"Add the new data to the members of colored or classified old data, construct a sphere with k nearest data points, find the class or color which has the maximum vote and assign the new data to the class which has the maximum vote in an unsupervised manner. ","$ L = {x1,x2...xn} $ $L = L0$ $x' = {}$ for the input (x,d) : do { xtest }",0
4120,"Add the new data to the members of colored or classified old data, construct a sphere with k nearest data points, find the class or color which has the maximum vote and assign the new data to the class which has the maximum vote in an unsupervised manner. ",1. Define the number of cluster (K) 2. Generate random weights 3. Find the center of each k (mean) 4. Cluster the other outputs by determining the closest neighbor 5. Update the weights,0
4121,"Add the new data to the members of colored or classified old data, construct a sphere with k nearest data points, find the class or color which has the maximum vote and assign the new data to the class which has the maximum vote in an unsupervised manner. ","Step1: We randomly place the n neurons. Step2: For each data point whichever neuron is closer to it, the datapoint is assigned to that neuron. Step3: Once all the datapoints are assigned, the mean of the datapoints attached to each neuron is calculated and the neuron is shifted to the mean value. Step4: Step 2 and 3 are done until there is no more shift in the neurons position. In this way the neurons are adjusted.",0
4122,"Add the new data to the members of colored or classified old data, construct a sphere with k nearest data points, find the class or color which has the maximum vote and assign the new data to the class which has the maximum vote in an unsupervised manner. ",Step1 : Randomly select the k centers Step2 : Cluster the datapoints based on the centers Step3 : the centroid of the cluster becomes the new mean Step4 : repeat step 2 and 3 until there is no more evidential cahnge in the network,0
4123,"Add the new data to the members of colored or classified old data, construct a sphere with k nearest data points, find the class or color which has the maximum vote and assign the new data to the class which has the maximum vote in an unsupervised manner. ",trainingset := training data define #clusters select #clusters datapoints as centroids randomly for datapoint in trainingset: calculate distance to centroid lable dataPoint according to closest centroid end for iterate over clusters: calculate centroid,0
4124,"Add the new data to the members of colored or classified old data, construct a sphere with k nearest data points, find the class or color which has the maximum vote and assign the new data to the class which has the maximum vote in an unsupervised manner. ",K-nearest neighbors basically works as follows 1) the they define randomly the cluster points . 2) clacluate the mean of the equlidian distance between the data points. here the points from the previous step acts as centrioids. 3) check the variance of the clusters. 4) repeat 1-2-3 till you get the proper clusters.,0
4125,"Add the new data to the members of colored or classified old data, construct a sphere with k nearest data points, find the class or color which has the maximum vote and assign the new data to the class which has the maximum vote in an unsupervised manner. ",1. Slect random number of neghbourhood initially 2. Find out the input which is nearest to the weight vector using competitive learning 3. Change only the input which wins 4. decrease the size of neighbourhood 5. Repeat,0
4126,"Bias-variance dilemma is a principle supervised learning problem. The dilemma arises due to the variance of data and bias of model. When there is high bias, the model fits the training data perfectly but suffers from high variance, when the bias is low the variance reduces but the model doesn’t fit the data well. This dilemma makes the generalizability difficult to achieve.",no answer,0
4127,"Bias-variance dilemma is a principle supervised learning problem. The dilemma arises due to the variance of data and bias of model. When there is high bias, the model fits the training data perfectly but suffers from high variance, when the bias is low the variance reduces but the model doesn’t fit the data well. This dilemma makes the generalizability difficult to achieve.",- Bias: the bias is the differnce between the predicted value and the desired value in the generalization run - Variance: is the inadequity in the produced value in the regression and the desired value that we expect from the network,0
4128,"Bias-variance dilemma is a principle supervised learning problem. The dilemma arises due to the variance of data and bias of model. When there is high bias, the model fits the training data perfectly but suffers from high variance, when the bias is low the variance reduces but the model doesn’t fit the data well. This dilemma makes the generalizability difficult to achieve.",Bias Variance dilemma is coming from the fact that you can not have both at the same time. Your network can not be equally great at outputing with extremely high accuracy extremely hight amount of variables. Therefore you need to find balance between the two that suits needs of your neural network.,0
4129,"Bias-variance dilemma is a principle supervised learning problem. The dilemma arises due to the variance of data and bias of model. When there is high bias, the model fits the training data perfectly but suffers from high variance, when the bias is low the variance reduces but the model doesn’t fit the data well. This dilemma makes the generalizability difficult to achieve.",+ One cannot optimize simultaneously the learning algorithm both for learning maximum variance in the data and learning localization which can be termed as bias.,0
4130,"Bias-variance dilemma is a principle supervised learning problem. The dilemma arises due to the variance of data and bias of model. When there is high bias, the model fits the training data perfectly but suffers from high variance, when the bias is low the variance reduces but the model doesn’t fit the data well. This dilemma makes the generalizability difficult to achieve.",High value of bias means netowrk is unable to learn the data whereas higher variance means its difficult to learn the training data successfully.,0
4131,"Bias-variance dilemma is a principle supervised learning problem. The dilemma arises due to the variance of data and bias of model. When there is high bias, the model fits the training data perfectly but suffers from high variance, when the bias is low the variance reduces but the model doesn’t fit the data well. This dilemma makes the generalizability difficult to achieve.",Bias variance dilemma is a process of simultaneously decreasing two sources of error that prevents supervised learning algorithm from generalizing beyond the trained data.,0
4132,"Bias-variance dilemma is a principle supervised learning problem. The dilemma arises due to the variance of data and bias of model. When there is high bias, the model fits the training data perfectly but suffers from high variance, when the bias is low the variance reduces but the model doesn’t fit the data well. This dilemma makes the generalizability difficult to achieve.",Bias is used to affine transform of $u$. It helps to shift the classifier line. $$v=u+b$$,0
4133,"Bias-variance dilemma is a principle supervised learning problem. The dilemma arises due to the variance of data and bias of model. When there is high bias, the model fits the training data perfectly but suffers from high variance, when the bias is low the variance reduces but the model doesn’t fit the data well. This dilemma makes the generalizability difficult to achieve.",Bias is an proides an affine transformation. and it is treated a extra inputs. which noramll taken as +1,0
4134,"A neural network is a massively parallel distributed processor which is made up of simple processing units. It has a natural propensity for storing experiential knowledge. Neural networks resemble the brain in two aspects; knowledge is acquired by the network from its environment through a learning process, interneuron connection strength known as synaptic weights are used to store the acquired knowledge.",An artificial neural network is a massive distributed processor. It consists of several information processing units which are able to acquire and store knowledge.,1
4135,"A neural network is a massively parallel distributed processor which is made up of simple processing units. It has a natural propensity for storing experiential knowledge. Neural networks resemble the brain in two aspects; knowledge is acquired by the network from its environment through a learning process, interneuron connection strength known as synaptic weights are used to store the acquired knowledge.","An articial neural network consists of neurons. Each neuron can have several weighted inputs, an activation function and output. Usually several neurons are connected together. Often in layers. The network then calculates the output given an input to the network. The human brain works in a similar way. It also consits of neurons that are connected in several ways.",1
4136,"A neural network is a massively parallel distributed processor which is made up of simple processing units. It has a natural propensity for storing experiential knowledge. Neural networks resemble the brain in two aspects; knowledge is acquired by the network from its environment through a learning process, interneuron connection strength known as synaptic weights are used to store the acquired knowledge.","Artificial neural network is highly parralel processing. It has a mathematical model similar to human brain, which it was inspired from, as human brain does computation in an extremely parallel manner. Similarities also lay in terminology, ANN is using neurons that are smallest computing unit of a network, similarly to human brain.",1
4137,"A neural network is a massively parallel distributed processor which is made up of simple processing units. It has a natural propensity for storing experiential knowledge. Neural networks resemble the brain in two aspects; knowledge is acquired by the network from its environment through a learning process, interneuron connection strength known as synaptic weights are used to store the acquired knowledge.",Artificial neural network is a massively parallel distributed processor that is made up of simple processing units called neuron. It can replicate human brain by storing information in their weights,1
4138,"A neural network is a massively parallel distributed processor which is made up of simple processing units. It has a natural propensity for storing experiential knowledge. Neural networks resemble the brain in two aspects; knowledge is acquired by the network from its environment through a learning process, interneuron connection strength known as synaptic weights are used to store the acquired knowledge.","Artificial neural network are the network of the units that learn data from the environment and store them using synaptic weights. The structure of the artificial neural network is similar to human brain. It has neurons, ie., the store units and the axoms called synapses which link the stored data.",1
4139,"A neural network is a massively parallel distributed processor which is made up of simple processing units. It has a natural propensity for storing experiential knowledge. Neural networks resemble the brain in two aspects; knowledge is acquired by the network from its environment through a learning process, interneuron connection strength known as synaptic weights are used to store the acquired knowledge.","An artificial neural network is a highly distributed processor which consists of several simple processing units. It resembles the human brain, because the processing units are neurons, which are connected with weights. The human brain also consists of neurons.",1
4140,"A neural network is a massively parallel distributed processor which is made up of simple processing units. It has a natural propensity for storing experiential knowledge. Neural networks resemble the brain in two aspects; knowledge is acquired by the network from its environment through a learning process, interneuron connection strength known as synaptic weights are used to store the acquired knowledge.","A massively distributed processor, consisting of single processing units that have a natural prospensity of storing experimental knowledge and making it available for use.",1
4141,"A neural network is a massively parallel distributed processor which is made up of simple processing units. It has a natural propensity for storing experiential knowledge. Neural networks resemble the brain in two aspects; knowledge is acquired by the network from its environment through a learning process, interneuron connection strength known as synaptic weights are used to store the acquired knowledge.",An artificial neural network is a highly parallel computation model with learning and memory capacities. Similar to the brain it learns from the environment by strengthening the synapses between neurons. Once a task is learned it can be quickly used by reactivating those learned synapses.,1
4142,"A neural network is a massively parallel distributed processor which is made up of simple processing units. It has a natural propensity for storing experiential knowledge. Neural networks resemble the brain in two aspects; knowledge is acquired by the network from its environment through a learning process, interneuron connection strength known as synaptic weights are used to store the acquired knowledge.","An artificial neural network is a highly parallel working machine which consists of simple processing units (neurons) wich are connected to each other in layers. they are function approximators the brain is resembled in the architecure, the processing units and thge weights and how the learning process takes place and the properties of the brain: fault tolerance, parallel computing, ...",1
4143,"A neural network is a massively parallel distributed processor which is made up of simple processing units. It has a natural propensity for storing experiential knowledge. Neural networks resemble the brain in two aspects; knowledge is acquired by the network from its environment through a learning process, interneuron connection strength known as synaptic weights are used to store the acquired knowledge.",An ANN is a massivly parrallel distributed learing machine made up of small computational units. Computational units are connected via synapses defined by a weight. It resembles the human brain in two aspectes:,1
4144,"A neural network is a massively parallel distributed processor which is made up of simple processing units. It has a natural propensity for storing experiential knowledge. Neural networks resemble the brain in two aspects; knowledge is acquired by the network from its environment through a learning process, interneuron connection strength known as synaptic weights are used to store the acquired knowledge.","ANN is huge parallel distributed processor , consist of simple processing units and which has propensity of storing experintial knowlegde and making it available for use.",1
4145,"Mathematical model of a neuron consists of a set of synapses or connecting links where each link is characterized by a weight, an adder function (linear combiner), which computes the weighted sum (local field) of the inputs plus some bias and an activation function (squashing function) for limiting the amplitude of a neuron’s output.","A neuron is an information processing unit. It consits of: inputs associated with weights, sum of inputs and an acitvation function",1
4146,"Mathematical model of a neuron consists of a set of synapses or connecting links where each link is characterized by a weight, an adder function (linear combiner), which computes the weighted sum (local field) of the inputs plus some bias and an activation function (squashing function) for limiting the amplitude of a neuron’s output.",Input vector $x$ Weight matrix $w$ Net input $net=\sum x^Tw$ Net output $o=\phi(net)$,1
4147,"Mathematical model of a neuron consists of a set of synapses or connecting links where each link is characterized by a weight, an adder function (linear combiner), which computes the weighted sum (local field) of the inputs plus some bias and an activation function (squashing function) for limiting the amplitude of a neuron’s output.","Neuron is a simplest computation unit of a neural network that consists of input variables, weights, bias, summation term (combiner), activation function and output variables.",1
4148,"Mathematical model of a neuron consists of a set of synapses or connecting links where each link is characterized by a weight, an adder function (linear combiner), which computes the weighted sum (local field) of the inputs plus some bias and an activation function (squashing function) for limiting the amplitude of a neuron’s output.","A neuron consists of a synapse connecting link, an adder function or linear combiner and an activation function. $$v = \Sigma wi \cdot x{i} + b$$, where $xi$ is the input, $wi$ is the weight and $b$ is bias.",1
4149,"Mathematical model of a neuron consists of a set of synapses or connecting links where each link is characterized by a weight, an adder function (linear combiner), which computes the weighted sum (local field) of the inputs plus some bias and an activation function (squashing function) for limiting the amplitude of a neuron’s output.",A neuron consists of one or multiple inputs which are gathered by a summation function. The hereby induced local field of the neuron is processed by a squashing function and generates the output of the neuron.,1
4150,"Mathematical model of a neuron consists of a set of synapses or connecting links where each link is characterized by a weight, an adder function (linear combiner), which computes the weighted sum (local field) of the inputs plus some bias and an activation function (squashing function) for limiting the amplitude of a neuron’s output.",1) Neuron is consist of sysnaptic links which measured in terms of weights. neuron is given with inputs.\ 2)it has adder funtion or combiner which adds all the inputs mulitplied by the weights and bias is extra input to the neuron as well. 3) it has a activation link which limit the amplitude of the output of the neuron.,1
4151,"Label the data with positive and negative (+/-) labels, initialize the weights randomly, apply (simplified) update rule: Dw = eta*x(n) if <w,x> <= 0, repeat on all epochs till the weights don’t change much. The algorithm will converge as the data is linearly separable.  ","HERE: y denotes the actual result, d denotes the desired result positive train error: y = 0, d=1 $w{new} = w{old} + x $ negative train error: y = 1, d = 0 $w{new} = w{old} - x$",1
4152,"Label the data with positive and negative (+/-) labels, initialize the weights randomly, apply (simplified) update rule: Dw = eta*x(n) if <w,x> <= 0, repeat on all epochs till the weights don’t change much. The algorithm will converge as the data is linearly separable.  ","For this case, the parameters that need to be learned are the slope of the line and the intercept. These are the parameters for the weight vector. 1. Initialize random small values for weight vector. 2. For inputdata $xi$ in Training Data: - Apply the input to the weight vector. - e = the difference between the local field and the desired output $(di-yi)$ - Update weight: w(n+1) = w(n) + $\eta e xi$",1
4153,"Label the data with positive and negative (+/-) labels, initialize the weights randomly, apply (simplified) update rule: Dw = eta*x(n) if <w,x> <= 0, repeat on all epochs till the weights don’t change much. The algorithm will converge as the data is linearly separable.  ","weights # a weight vector phi = activation function eta = learning rate for each datapoint (xi,yi) do: weights[i] = weights[i] + eta * (xi[i]-yi)*weights[i]",1
4154,"Label the data with positive and negative (+/-) labels, initialize the weights randomly, apply (simplified) update rule: Dw = eta*x(n) if <w,x> <= 0, repeat on all epochs till the weights don’t change much. The algorithm will converge as the data is linearly separable.  ",The learning process consists of three main steps: 1- Positive error: - calculate the error of all the data sets in the learning set - change the w(weight): w(n+1) = w(n)+positive error - seperate the data points based on the new w 2- Negative error: - calculate the error of all the data sets in the learning set - change the w(weight): w(n+1) = w(n)+negative error - seperate the data points based on the new w 3- No error: - when we have no error this is the end of the training,1
4155,"Label the data with positive and negative (+/-) labels, initialize the weights randomly, apply (simplified) update rule: Dw = eta*x(n) if <w,x> <= 0, repeat on all epochs till the weights don’t change much. The algorithm will converge as the data is linearly separable.  ","Initialize the perceptron with each weight equal to 0: $w(0) = 0$. Present the labeled examples $(xi, di)$ to the perceptron. > for each example $(xi, di)$ >> Compute actual output $yi$ and error signal >> Update weight based on the dlelta rule: $w(n+1) = w(n) + \eta (d(n) - y(n)) x(n)$",1
4156,"Label the data with positive and negative (+/-) labels, initialize the weights randomly, apply (simplified) update rule: Dw = eta*x(n) if <w,x> <= 0, repeat on all epochs till the weights don’t change much. The algorithm will converge as the data is linearly separable.  ",1. Initialize the weights at random or as 0. 2. Activate the Perceptron by giving an example. 3. Compute the actual output of the neuron. 4. Adjust the parameters of there perceptron. 5. Continue until convergence is achieved. w = rand y = sum($\Phi$(w*x)) for wi in w: wi = wi+$\eta$*e*y,1
4157,"Label the data with positive and negative (+/-) labels, initialize the weights randomly, apply (simplified) update rule: Dw = eta*x(n) if <w,x> <= 0, repeat on all epochs till the weights don’t change much. The algorithm will converge as the data is linearly separable.  ",pick random decision boundary while one of data points is in wrong class turn decision boundary by using vector of wrong data point (negative rule or positive),1
4158,Classification is a task of mapping data to discrete labels while regression is a task which maps data to a continuous function or real values. Error in classification is the number of misclassifications while in regression is the summed distance between the true and predicted values. ,"Classification: In classification, the output produced by the NN is a discrete value which indicates which class the input belongs to. Regression: In regression, the output produced by the NN is a continuous variable. This could be used for instance, to approximate a continuous function.",1
4159,Classification is a task of mapping data to discrete labels while regression is a task which maps data to a continuous function or real values. Error in classification is the number of misclassifications while in regression is the summed distance between the true and predicted values. ,"In classification, output values are always discrete. In regression, output values are continuous",1
4160,Classification is a task of mapping data to discrete labels while regression is a task which maps data to a continuous function or real values. Error in classification is the number of misclassifications while in regression is the summed distance between the true and predicted values. ,"A hyerplane is given by y = w*x + b . Regression wants to determine w Classification wants to assign a class to a set of observations. Regression wants to determine separating hyerplane, classification wants to label data points with a class",1
4161,Classification is a task of mapping data to discrete labels while regression is a task which maps data to a continuous function or real values. Error in classification is the number of misclassifications while in regression is the summed distance between the true and predicted values. ,"In classification tasks, we assign discrete labels to data points of our training dataset, either being assigned a specific label or not (binary). For supervised learning, these datapoints are labeled with a label vector ground truth. In regression, we try to model a function which fits the data points of the training data, and thus model a function with continous values.",1
4162,Classification is a task of mapping data to discrete labels while regression is a task which maps data to a continuous function or real values. Error in classification is the number of misclassifications while in regression is the summed distance between the true and predicted values. ,"Classification: - It refers to classifying given data into discrete classes. - The output is discrete values. - Use for activity like pattern recognition, etc. Regression: - It refers to estimating the value of some continuous function given an input. - The output is continuous value. - used for activities like motor control, etc.",1
4163,Classification is a task of mapping data to discrete labels while regression is a task which maps data to a continuous function or real values. Error in classification is the number of misclassifications while in regression is the summed distance between the true and predicted values. ,In classification we try to assign classes to input data. Regression we want the network to behave like a given system/formala. This can also be a time series of input and output data.,1
4164,Classification is a task of mapping data to discrete labels while regression is a task which maps data to a continuous function or real values. Error in classification is the number of misclassifications while in regression is the summed distance between the true and predicted values. ,"In classification the goal is to saperates points into different classes. The outcome is a class lable. Regression trys to fit a hyperplante to a point cloud best, so that future data is representet by that hyperplane best (LMS). It trys to minimize the distance to all data points. The outcome is a countinius variable.",1
4165,Classification is a task of mapping data to discrete labels while regression is a task which maps data to a continuous function or real values. Error in classification is the number of misclassifications while in regression is the summed distance between the true and predicted values. ,"Both are learning tasks of a ANN. In classification the goal is to assign a class label to new datapoints. In regression the goal is to eastimate a unkown function. The only difference between both is that classification uses discrete class labels, while in regression a continuous output is used",1
4166,Classification is a task of mapping data to discrete labels while regression is a task which maps data to a continuous function or real values. Error in classification is the number of misclassifications while in regression is the summed distance between the true and predicted values. ,"The approach of classification is to classify sets of input data into their correct classes (for example, used in pattern recognition). The approach of regression is to approximize to a defined function f by calculating the error between this function and the result of an algorithm. THe difference is that, the classification approach is applied to a discret data (the samples are the different points of the input space), and regression is an analogic approach where the whole function must be approximize (for any input given).",1
4167,Classification is a task of mapping data to discrete labels while regression is a task which maps data to a continuous function or real values. Error in classification is the number of misclassifications while in regression is the summed distance between the true and predicted values. ,- Classification: In classification problems we have different groups of data that have some common properties and after training we want that our model can detect the class of the new sample correctly - Regression: In regression we have a series of values and we want to use the previuos values in this series and predict the next value,1
4168,Classification is a task of mapping data to discrete labels while regression is a task which maps data to a continuous function or real values. Error in classification is the number of misclassifications while in regression is the summed distance between the true and predicted values. ,"Classification is a problem of destinguishing to which discrete classes input variables are to be assigned to, regression is estimation of the output, by figuring out the continuous trend of the whole dataset.",1
4169,Classification is a task of mapping data to discrete labels while regression is a task which maps data to a continuous function or real values. Error in classification is the number of misclassifications while in regression is the summed distance between the true and predicted values. ,"Classification if to assign a class or category to the data, while regression is when you fit the data to a function.",1
4170,Classification is a task of mapping data to discrete labels while regression is a task which maps data to a continuous function or real values. Error in classification is the number of misclassifications while in regression is the summed distance between the true and predicted values. ,+ Regression: learns model/function that can predict other unseen data well. Target/output is real spaced. + Classification: learns a model that classifies/maps input to a discrete target label. Targetlabel/output is binary/discrete.,1
4171,Classification is a task of mapping data to discrete labels while regression is a task which maps data to a continuous function or real values. Error in classification is the number of misclassifications while in regression is the summed distance between the true and predicted values. ,"Classification describes the application, in which a sample is assigned to one specific pattern of the problem. In comparison to regression is the output deterministic an not continiously. In regression the output is continuous describing",1
4172,Classification is a task of mapping data to discrete labels while regression is a task which maps data to a continuous function or real values. Error in classification is the number of misclassifications while in regression is the summed distance between the true and predicted values. ,"Classification is the task of classifying the input signals into a finite number of groups, so the output is a number that indicates a certain class. Regression is the task of approximating a function by estimating the values given the input signals, so the output can be any real number.",1
4173,Classification is a task of mapping data to discrete labels while regression is a task which maps data to a continuous function or real values. Error in classification is the number of misclassifications while in regression is the summed distance between the true and predicted values. ,Classification: We need to predict the output data discretely. That is the output space is a discrete space. Regression: We need to predict the output data continuously. That is the output space is continuous space The main difference is the discreteness and contionousness.,1
4174,Classification is a task of mapping data to discrete labels while regression is a task which maps data to a continuous function or real values. Error in classification is the number of misclassifications while in regression is the summed distance between the true and predicted values. ,Classification is a problem of assigning a particular class to each data point in a given dataset. <br> Regression is a problem of fitting the given dataset on a particular hyperplane which can be used for representing the given data. It finds the hyperplane which minimises the mean square error.,1
4175,Classification is a task of mapping data to discrete labels while regression is a task which maps data to a continuous function or real values. Error in classification is the number of misclassifications while in regression is the summed distance between the true and predicted values. ,HERE: - Classification is a problem of assigning labels or classes to the input. The output is a discrete variable. - Regression is a problem of assigning a continuous variable to the input.,1
4176,Classification is a task of mapping data to discrete labels while regression is a task which maps data to a continuous function or real values. Error in classification is the number of misclassifications while in regression is the summed distance between the true and predicted values. ,Classification is a problem of catergorization into discrete classes where as regression is a problem in a continuous space where the goal is to ether minimize or maximize a cost function. Classification is the process of dividing a set of discrete inputs into classes corresponding to similar patterns such as clustering. Regression could be finding a pattern of the distribution of the data such as ftting a line.,1
4177,Classification is a task of mapping data to discrete labels while regression is a task which maps data to a continuous function or real values. Error in classification is the number of misclassifications while in regression is the summed distance between the true and predicted values. ,"Classification in machine learning is used to find a decision surface in the form of a hyperplane that can separate a set of input examples (or set of patterns) into their respective classes. Regression on the other hand is used to find the parameters (i.e, the weight vector $w$ and the bias b) for the function thatcan best fit the given data points $\{xi,di\}$ . Thus classification deals with predicting the class label for discrete data points whereas regression deals with fitting a continuous real valued function.",1
4178,Classification is a task of mapping data to discrete labels while regression is a task which maps data to a continuous function or real values. Error in classification is the number of misclassifications while in regression is the summed distance between the true and predicted values. ,Classification is separating the data into classes and the output is a discontinuous variable. Regression is fitting a model and the output is a continuous variable.,1
4179,Classification is a task of mapping data to discrete labels while regression is a task which maps data to a continuous function or real values. Error in classification is the number of misclassifications while in regression is the summed distance between the true and predicted values. ,"Classification is about classifying the given data into different classes, where as regresssion is about finding the local/global minima.We use perceptrons to classify the data and we use unconstrained optimization techniques like newton's method to find regression.",1
4180,Classification is a task of mapping data to discrete labels while regression is a task which maps data to a continuous function or real values. Error in classification is the number of misclassifications while in regression is the summed distance between the true and predicted values. ,classification: assign a test data to a class that is prescribed regression: approximating an unknown function with minimization errors for input-output mapping.,1
4181,Classification is a task of mapping data to discrete labels while regression is a task which maps data to a continuous function or real values. Error in classification is the number of misclassifications while in regression is the summed distance between the true and predicted values. ,"Classsification: In classification, the output variable takes class labels or identifying group membership<br> Regression: In regression, the output variable takes continuous values or predicting a response",1
4182,Classification is a task of mapping data to discrete labels while regression is a task which maps data to a continuous function or real values. Error in classification is the number of misclassifications while in regression is the summed distance between the true and predicted values. ,Classifaction problem is used to classify set of data points into specific groups. Regression is used to predict time series data. Classification works on discreate set of values and regression works on continuous values.,1
4183,Classification is a task of mapping data to discrete labels while regression is a task which maps data to a continuous function or real values. Error in classification is the number of misclassifications while in regression is the summed distance between the true and predicted values. ,Classification: Classification is done between the classes. The machine determines to what class the data belongs to. Regression: Regression is a expecting output for an input. The machine learns from the given data and models a function and when new input is given it expects the output. Difference: Classification is discrete output where as Regression is a continuous output.,1
4184,Classification is a task of mapping data to discrete labels while regression is a task which maps data to a continuous function or real values. Error in classification is the number of misclassifications while in regression is the summed distance between the true and predicted values. ,Regression: Tries to fit a line are curve among the given points The have continuous output the output is a function Classification: Tries to classify the given points into two or more calsses They have a discrete output the output is a value representing the class,1
4185,Classification is a task of mapping data to discrete labels while regression is a task which maps data to a continuous function or real values. Error in classification is the number of misclassifications while in regression is the summed distance between the true and predicted values. ,"In classification a binary pattern has to be partitioned into the two classes. In regression a line has to be fitted closest to some datapoints. The difference is, that in Classification mthe output is a single class label, while in regression the output is continuous",1
4186,Classification is a task of mapping data to discrete labels while regression is a task which maps data to a continuous function or real values. Error in classification is the number of misclassifications while in regression is the summed distance between the true and predicted values. ,"In classification the input data is split in 2 or more classes. The goal of the neural network is to learn the input data and then be able to classify new input data into the classes. Based on the learned information the network then maps input data into one of the classes, which is discrete space. In regression the input data is learned aswell. But here the network tries to predict feature values, which are in continuous space. The network tries to predict close as possible to new input data only using the learned model.",1
4187,Classification is a task of mapping data to discrete labels while regression is a task which maps data to a continuous function or real values. Error in classification is the number of misclassifications while in regression is the summed distance between the true and predicted values. ,"Classification tries to label discrete data points with distinct classes, while regression tries to approximate a continuous function from discrete data points. Results of these methods are respectively a labeled data set or a continuous function.",1
4188,Classification is a task of mapping data to discrete labels while regression is a task which maps data to a continuous function or real values. Error in classification is the number of misclassifications while in regression is the summed distance between the true and predicted values. ,In classification the task is to give an discrete output value to an input. It assignes one of all defined classes to the current input. Regression try to approximate a function while minimizing error and produces a continous output value.,1
4189,Classification is a task of mapping data to discrete labels while regression is a task which maps data to a continuous function or real values. Error in classification is the number of misclassifications while in regression is the summed distance between the true and predicted values. ,"Classification means mapping inptut data a class label, for example 1 and -1. IN regression on the other hand a continuous function is learned in way that f(x) - F(x) is minimized, where f(x) is the function learned by a learning machine and F(x) is the original function.",1
4190,Classification is a task of mapping data to discrete labels while regression is a task which maps data to a continuous function or real values. Error in classification is the number of misclassifications while in regression is the summed distance between the true and predicted values. ,"classification is type of problem where algorithm needs to saperate the one data class from the another data class. If there is 2 classes C1 , C2 . algorithm classify the given data into these two classes. it is discreet process. Regression is the pridicting the next point depending on the previous points. it is continuous process.",1
4191,Classification is a task of mapping data to discrete labels while regression is a task which maps data to a continuous function or real values. Error in classification is the number of misclassifications while in regression is the summed distance between the true and predicted values. ,Classification is the problem where the input data has to be put in two or more classes distinctively different from each other. For example in case of binary classification on class can be -1 and the other +1 Regression on the other hand is data fitting. THe main aim is to find a hyperplane which can fit a given input pattern.,1
4192,Classification is a task of mapping data to discrete labels while regression is a task which maps data to a continuous function or real values. Error in classification is the number of misclassifications while in regression is the summed distance between the true and predicted values. ,Classification: Is a task to partition the given input into one of several classes. The calsses are descrete values. Regression: Regression is the tasks of predicting output in a continuous range. The prediction can be any value within a range.,1
4193,Classification is a task of mapping data to discrete labels while regression is a task which maps data to a continuous function or real values. Error in classification is the number of misclassifications while in regression is the summed distance between the true and predicted values. ,"In classification task the aim to separate data in different classes, such that output of NN gives value of class index for each input point. E.g in the task is to classify binary data, then the output of the NN will 0 or 1, and each value, represent on class. In case of regression task, the aim is to fit data, namely a function that perform input-ouput mapping. Output of NN in this case, will be error value, such that we know how close is out function fitted to data points.",1
4194,"Arrange the weights in the required topology according to the problem. Initialize the weights randomly such that all the weights are different. Sample the input from the input space. Similarity matching: match the input to a neuron in the topological lattice which becomes the winning neuron. Update the weights of the winning neuron and its neighbours determined by the neighbourhood function. Reduce the neighbourhood and decay the learning rate and share radius. If ordering and convergence are complete, stop. Else continue sampling from the input space.","i. First we initialize random weights for neurons ii. Then we choose random input from input space iii. We compute distance between input vector and each weight vector. iv. Neuron that have minimium euclidean distance with input vector is considered as winner neuron v. Then, we find the neighborhood neurons of the winning neuron vi. We adjust the weights of all neighborhood neurons vii. Reduce the learning parameter and neighborhood size viii. Continue until it converges.",1
4195,"Arrange the weights in the required topology according to the problem. Initialize the weights randomly such that all the weights are different. Sample the input from the input space. Similarity matching: match the input to a neuron in the topological lattice which becomes the winning neuron. Update the weights of the winning neuron and its neighbours determined by the neighbourhood function. Reduce the neighbourhood and decay the learning rate and share radius. If ordering and convergence are complete, stop. Else continue sampling from the input space.",for n iterations winner = competitionbetweenneurons() neighbourhood = cooperationwithneighbourhoodfunction(winner) updateweights(neighbourhood),1
4196,"Arrange the weights in the required topology according to the problem. Initialize the weights randomly such that all the weights are different. Sample the input from the input space. Similarity matching: match the input to a neuron in the topological lattice which becomes the winning neuron. Update the weights of the winning neuron and its neighbours determined by the neighbourhood function. Reduce the neighbourhood and decay the learning rate and share radius. If ordering and convergence are complete, stop. Else continue sampling from the input space.",randomly inilize the weights draw sample of inputs Increase the weights of the local neihburhood of winning neuron repeat the process above process till there is only one winning neuron,1
4197,SVMs are linear learnable machines in the simplest case. It uses a decision boundary with maximum margin to classify the data into different classes. The data points which are near the decision boundary are called support vectors and the margin is determined based on these points. Kernels are used to separate non-linearly separable data and the algorithm is solved by using Quadratic Programming. ,"A support vector machine is a maximum margin classifier in which the width of the boundary of separation is maximized. A margin is defined as the width of the boundary before hitting a point. This maximum margin intuitively feels safe, and is experimentally good.",1
4198,SVMs are linear learnable machines in the simplest case. It uses a decision boundary with maximum margin to classify the data into different classes. The data points which are near the decision boundary are called support vectors and the margin is determined based on these points. Kernels are used to separate non-linearly separable data and the algorithm is solved by using Quadratic Programming. ,"Basic idea of SVM is to best segregate the data into two classes with the help of decision boundary. This decision boundary is margin, we always try to maximize the margin to make sure data is classified correctly",1
4199,SVMs are linear learnable machines in the simplest case. It uses a decision boundary with maximum margin to classify the data into different classes. The data points which are near the decision boundary are called support vectors and the margin is determined based on these points. Kernels are used to separate non-linearly separable data and the algorithm is solved by using Quadratic Programming. ,Support Vector Machines goal is to maximize margin between closest data points of separating hyperplane. Separating hyperplane is given by: 0 = w(n)*x(n) + b. By maximizing margin probability of classification errors is reduced.,1
4200,SVMs are linear learnable machines in the simplest case. It uses a decision boundary with maximum margin to classify the data into different classes. The data points which are near the decision boundary are called support vectors and the margin is determined based on these points. Kernels are used to separate non-linearly separable data and the algorithm is solved by using Quadratic Programming. ,A SVM is a binary classifier with a maximum width boundary separating the two classes. This uses support vectors (vectors that pushes against the boundaries). The equations of the lines in an SVM are: - $wx+b>=1$:for class 1 - $wx+b<=-1$:for class -1 - M is the width between these boundaries.,1
4201,SVMs are linear learnable machines in the simplest case. It uses a decision boundary with maximum margin to classify the data into different classes. The data points which are near the decision boundary are called support vectors and the margin is determined based on these points. Kernels are used to separate non-linearly separable data and the algorithm is solved by using Quadratic Programming. ,Because SVMs are binary classifiers we can use a border to sperate the data. The border is typically placed where it has the largest possible distance to both classes. The vectors the border touches on both sides with its margin are the support vectors.,1
4202,SVMs are linear learnable machines in the simplest case. It uses a decision boundary with maximum margin to classify the data into different classes. The data points which are near the decision boundary are called support vectors and the margin is determined based on these points. Kernels are used to separate non-linearly separable data and the algorithm is solved by using Quadratic Programming. ,"A SVM is an ANN for supervised learning, whicht is able to saperate two classes of data-points by using a hyperlane found by quadratic programming, by finding the biggest margin. The goal is to classify future data in there two classes.",1
4203,SVMs are linear learnable machines in the simplest case. It uses a decision boundary with maximum margin to classify the data into different classes. The data points which are near the decision boundary are called support vectors and the margin is determined based on these points. Kernels are used to separate non-linearly separable data and the algorithm is solved by using Quadratic Programming. ,"Support vector machines are classifiers that are using support vectors, which are variables of the dataset. These variable are chosen during learning algorithm. Main advantage of SVMs is that it will not be overfitting by choosing correct margin. Activation functions can be both linear and nonlinear. Output of SVM is always TRUE or FALSE for given variable.",1
4204,SVMs are linear learnable machines in the simplest case. It uses a decision boundary with maximum margin to classify the data into different classes. The data points which are near the decision boundary are called support vectors and the margin is determined based on these points. Kernels are used to separate non-linearly separable data and the algorithm is solved by using Quadratic Programming. ,SVMs are binary classifier. They learn the classification by memorizing the marginal data points (called support vectors) that make up the decision boundaries (2 : positive and negative).,1
4205,SVMs are linear learnable machines in the simplest case. It uses a decision boundary with maximum margin to classify the data into different classes. The data points which are near the decision boundary are called support vectors and the margin is determined based on these points. Kernels are used to separate non-linearly separable data and the algorithm is solved by using Quadratic Programming. ,"An SVM, or support vector machine, is a feedforward network with a hidden layer to learn a task in a supervised learning manner. The network tries to construct a hyperplane that separates the data points of two different classes by maximizing the margin of separation, which is the distance from the hyperplane to the closest data points called support vectors.",1
4206,SVMs are linear learnable machines in the simplest case. It uses a decision boundary with maximum margin to classify the data into different classes. The data points which are near the decision boundary are called support vectors and the margin is determined based on these points. Kernels are used to separate non-linearly separable data and the algorithm is solved by using Quadratic Programming. ,"Given a dataset, support vector machines builds a hyperplane in a such a way that positive and negative samples are seperated to the maximum distance. Width of the margin should be maximum The vectors to which the margins(margin for positive and negative sample) are pushed on to it are called support vectors.",1
4207,SVMs are linear learnable machines in the simplest case. It uses a decision boundary with maximum margin to classify the data into different classes. The data points which are near the decision boundary are called support vectors and the margin is determined based on these points. Kernels are used to separate non-linearly separable data and the algorithm is solved by using Quadratic Programming. ,SVM stands for Support Vector Machine. It creates a hyperplane such that margin of separation between positive and negative classes is maximised.,1
4208,SVMs are linear learnable machines in the simplest case. It uses a decision boundary with maximum margin to classify the data into different classes. The data points which are near the decision boundary are called support vectors and the margin is determined based on these points. Kernels are used to separate non-linearly separable data and the algorithm is solved by using Quadratic Programming. ,HERE: SVM is a linear machine whose goal is to construct a optimal hyperplane such that the marginal separation is the maximum between the decision boundaries. The decision boundaries are drawn parallel to the hyperplane which just push the datapoints closest to the hyperplane. The datapoints closer to the hyperplane are called support vectors.,1
4209,SVMs are linear learnable machines in the simplest case. It uses a decision boundary with maximum margin to classify the data into different classes. The data points which are near the decision boundary are called support vectors and the margin is determined based on these points. Kernels are used to separate non-linearly separable data and the algorithm is solved by using Quadratic Programming. ,A SVM is a linear machine which is used in pattern classifcation problems to find a decision surface in the form of a hyperplane for linearly separable classes such that the margin of separation between the classes is as large as possible. SVM's are an approximate implementation of the induction principle of structural risk minimization which is based on the fact that the error rate in testing is bounded by a term that is dependent upon the sum of training error rate and the VC dimension of h.,1
4210,SVMs are linear learnable machines in the simplest case. It uses a decision boundary with maximum margin to classify the data into different classes. The data points which are near the decision boundary are called support vectors and the margin is determined based on these points. Kernels are used to separate non-linearly separable data and the algorithm is solved by using Quadratic Programming. ,"SVM refers to support vector machines.In terms of a linear classification problem svm can be defined as creating a hyper plane which is a decision surface and to maximize the width of decision boundary.In cases where the problem is complex svm can be used as it classifies the data by projecting the data in higher dimension.If the data is to be separated in 3 classes , they can use 3 svm's for three different classes.",1
4211,SVMs are linear learnable machines in the simplest case. It uses a decision boundary with maximum margin to classify the data into different classes. The data points which are near the decision boundary are called support vectors and the margin is determined based on these points. Kernels are used to separate non-linearly separable data and the algorithm is solved by using Quadratic Programming. ,basic idea of SVM is to construct a hyperplane as the decision surface in such a way that the margin of separation between negative examples and positive examples is maximized.,1
4212,SVMs are linear learnable machines in the simplest case. It uses a decision boundary with maximum margin to classify the data into different classes. The data points which are near the decision boundary are called support vectors and the margin is determined based on these points. Kernels are used to separate non-linearly separable data and the algorithm is solved by using Quadratic Programming. ,The idea of SVM is to construct a hyperplane as a decision surface such that the margin separation between positive and negative examples is maximized.,1
4213,SVMs are linear learnable machines in the simplest case. It uses a decision boundary with maximum margin to classify the data into different classes. The data points which are near the decision boundary are called support vectors and the margin is determined based on these points. Kernels are used to separate non-linearly separable data and the algorithm is solved by using Quadratic Programming. ,"SVM is used for linearly separable data. A hyperplane is used to separate the data, but there could be so many hyperplanes that separate the data. The best hyperplane is choosen which separates data with a bigger margin. So in SVM we find the hyperplane which has a bigger margin between the hyperplane and both the positive and negative data lines.",1
4214,SVMs are linear learnable machines in the simplest case. It uses a decision boundary with maximum margin to classify the data into different classes. The data points which are near the decision boundary are called support vectors and the margin is determined based on these points. Kernels are used to separate non-linearly separable data and the algorithm is solved by using Quadratic Programming. ,"support vector machines are the finding classfiers, draw the dision boundary which push against the support vectors.",1
4215,SVMs are linear learnable machines in the simplest case. It uses a decision boundary with maximum margin to classify the data into different classes. The data points which are near the decision boundary are called support vectors and the margin is determined based on these points. Kernels are used to separate non-linearly separable data and the algorithm is solved by using Quadratic Programming. ,The basic idea of Support Vector Machine (SVM) is to find the width of a line or hyperplane which which divides the input data into two classes. The points lying on the edge of the defined width are called support vectors.,1
4216,SVMs are linear learnable machines in the simplest case. It uses a decision boundary with maximum margin to classify the data into different classes. The data points which are near the decision boundary are called support vectors and the margin is determined based on these points. Kernels are used to separate non-linearly separable data and the algorithm is solved by using Quadratic Programming. ,SVM is a classifier that classifies a set of points in a way that maximizes the margin between the points of two classes. The classification can be linear or non linear.,1
4217,Steepest descent is used to update the weights in a NN during the learning phase. It helps to navigate the cost function and find the parameters for which the cost is minimum. The weights are updated in the direction of the steepest descent which is in a direction opposite to the gradient vector. This method could suffer from local minima and may become unstable.,"Steepest descent is method of optimizing the algorithm by minimizing the error. Weights are adjusted in the direction of steeping descent, opposite to the direction of the gradient.",1
4218,Steepest descent is used to update the weights in a NN during the learning phase. It helps to navigate the cost function and find the parameters for which the cost is minimum. The weights are updated in the direction of the steepest descent which is in a direction opposite to the gradient vector. This method could suffer from local minima and may become unstable.,"- Steepeset descent is used for error minimization when updating weights. - According to this, we update the weights along a direction which minimizes the error; which is calculated by finiding the slope at the point.",1
4219,Steepest descent is used to update the weights in a NN during the learning phase. It helps to navigate the cost function and find the parameters for which the cost is minimum. The weights are updated in the direction of the steepest descent which is in a direction opposite to the gradient vector. This method could suffer from local minima and may become unstable.,Steepest descent is a method of weight adaptation. It is using first order derivative to approximate the function. Therefore is rather slow.,1
4220,Steepest descent is used to update the weights in a NN during the learning phase. It helps to navigate the cost function and find the parameters for which the cost is minimum. The weights are updated in the direction of the steepest descent which is in a direction opposite to the gradient vector. This method could suffer from local minima and may become unstable.,The steepest descent is an unconstrained optimization method that seeks to minimize an error function. This function is iteratively changed in direction oposite to the gradient vector.,1
4221,Steepest descent is used to update the weights in a NN during the learning phase. It helps to navigate the cost function and find the parameters for which the cost is minimum. The weights are updated in the direction of the steepest descent which is in a direction opposite to the gradient vector. This method could suffer from local minima and may become unstable.,Method of steepest descent updates the weights in the direction where the error is minimum.,1
4222,Steepest descent is used to update the weights in a NN during the learning phase. It helps to navigate the cost function and find the parameters for which the cost is minimum. The weights are updated in the direction of the steepest descent which is in a direction opposite to the gradient vector. This method could suffer from local minima and may become unstable.,When learning a network the steepest descent algorithm updates the weights in such a way that the error decreases in every iteration.,1
4223,Steepest descent is used to update the weights in a NN during the learning phase. It helps to navigate the cost function and find the parameters for which the cost is minimum. The weights are updated in the direction of the steepest descent which is in a direction opposite to the gradient vector. This method could suffer from local minima and may become unstable.,The steepest descent can be used to optimize the weights of a network. In steepest descent the error function is a function of the weights. So we determine the direction of the steepest descent on the error surface and go into that direction to minimize the error of the weights on optimize them.,1
4224,Steepest descent is used to update the weights in a NN during the learning phase. It helps to navigate the cost function and find the parameters for which the cost is minimum. The weights are updated in the direction of the steepest descent which is in a direction opposite to the gradient vector. This method could suffer from local minima and may become unstable.,the error function is computet. to adapt the weights (learn the network) the error function is followed in small steps in direction of steepest descent to decrease the error. using iterations the error is decreased in each step and end in a (local) minimum used in back-propagation,1
4225,Steepest descent is used to update the weights in a NN during the learning phase. It helps to navigate the cost function and find the parameters for which the cost is minimum. The weights are updated in the direction of the steepest descent which is in a direction opposite to the gradient vector. This method could suffer from local minima and may become unstable.,Steepest descent adjust the parameters (weights and bias) of the NN to minimize the error. It does so by adjustinmg the weights in the direction of steepest descent of the error function.,1
4226,Steepest descent is used to update the weights in a NN during the learning phase. It helps to navigate the cost function and find the parameters for which the cost is minimum. The weights are updated in the direction of the steepest descent which is in a direction opposite to the gradient vector. This method could suffer from local minima and may become unstable.,Steepest decent while move in the direction of the max improvement ( in terms of decrasing) in the cost funtion or error. if the learning rate is large then the it follows the zizag motion. if the learning rate is too low then it takes time for converging .,1
4227,Steepest descent is used to update the weights in a NN during the learning phase. It helps to navigate the cost function and find the parameters for which the cost is minimum. The weights are updated in the direction of the steepest descent which is in a direction opposite to the gradient vector. This method could suffer from local minima and may become unstable.,Steepest decent method helps in making the adjustments of the weights in a neural network in a way that minimizes the average squared error. In each step it gives the direction towards which the maximum decrease of the average squared error can be achieved.,1
4228,"For all 2^N possible binary labeling of every data, if a hypothesis h splits the positive data from the negative data with no error, then it means that the hypothesis h shatters the dataset A.",A a hypothesis $h \in H$ shatters a dataset $A \subseteq X \Leftrightarrow \ldots$ if there exists a an $\alpha for every training set with zero training error,1
4229,"For all 2^N possible binary labeling of every data, if a hypothesis h splits the positive data from the negative data with no error, then it means that the hypothesis h shatters the dataset A.",when every possible combination of input and desired output can be classified using $h$,1
4230,"For all 2^N possible binary labeling of every data, if a hypothesis h splits the positive data from the negative data with no error, then it means that the hypothesis h shatters the dataset A.",HERE: a hypothesis $h \in H$ shatters a dataset $A \subseteq X \Leftrightarrow \ldots$ if the hypothesis can clearly distinguish the positive examples from the negative examples in A.,1
4231,"For all 2^N possible binary labeling of every data, if a hypothesis h splits the positive data from the negative data with no error, then it means that the hypothesis h shatters the dataset A.","A hypothesis space H shatters a dataset, if and only if there is a **possbile $\alpha$ (weight vector)** on hypothesis space that **seperates all the positvie data from negative data**.",1
4232,"For all 2^N possible binary labeling of every data, if a hypothesis h splits the positive data from the negative data with no error, then it means that the hypothesis h shatters the dataset A.",a hypothesis $h \in H$ shatters $A \subseteq X$ if and only if there exists a value of $\alpha$ for which the training error is zero,1
4233,The adjustment made to a synaptic weight of a neuron is proportional to the product of the error signal and the input signal of the synapse in question. The rule is derived from the steepest descent method.,Adaption of weight is proportional to product of input and error: $w{new} = w{old} + x*e$,1
4234,The adjustment made to a synaptic weight of a neuron is proportional to the product of the error signal and the input signal of the synapse in question. The rule is derived from the steepest descent method.,"Widrow-Hoff learning rule is also known as error correction rule is used to update the weights as: $\Delta w = \eta (di-yi)xi$ where, d is the desired output and y is the output the network generates and x is the input.",1
4235,The adjustment made to a synaptic weight of a neuron is proportional to the product of the error signal and the input signal of the synapse in question. The rule is derived from the steepest descent method.,$w(n+1) = w(n) + \mu (d(n) - y(n))x(n)$ The change of the weights is determined using the error ($d(n) - y(n)$) and the input that was given to the network. The learning rate can improve learing speed. The new weights are dependent on the old ones and the change calculated,1
4236,The adjustment made to a synaptic weight of a neuron is proportional to the product of the error signal and the input signal of the synapse in question. The rule is derived from the steepest descent method.,The Widrow-Holf or delta rule is a gradient descent learning rule used to adapt weight in a perceptron. $\Delta w(n) = - \eta(d(n) - y(n))x(n) $ $\Delta w(n) = - \eta e(n)x(n) $,1
4237,The adjustment made to a synaptic weight of a neuron is proportional to the product of the error signal and the input signal of the synapse in question. The rule is derived from the steepest descent method.,"The widrow-Hoff (delta) learning rule is given by $$ w(n+1) = w(n) - \eta x(n) e(n)$$ where $e(n)$ is the error vector, $\eta$ is learning parameter, $x(n)$ is input vector.",1
4238,The adjustment made to a synaptic weight of a neuron is proportional to the product of the error signal and the input signal of the synapse in question. The rule is derived from the steepest descent method.,"The Widrow-Hoff Learning rule is also referred to as Delta, or Least Mean Square (LMS) Rule. It is used to minimize the cost function and is defined as follows: Delta wji(n) = eta (partial xi(n) / (partial wji(n)) where eta is the learning rate paramter, xi(n) is the total instantaneous error energy and w are the weights.",1
4239,The adjustment made to a synaptic weight of a neuron is proportional to the product of the error signal and the input signal of the synapse in question. The rule is derived from the steepest descent method.,Widrow hoff's learning rule states that the adjustment of the weight of a synapses are propotional to the product of the error function and the input which is given by the synapses based on the problem.,1
4240,The adjustment made to a synaptic weight of a neuron is proportional to the product of the error signal and the input signal of the synapse in question. The rule is derived from the steepest descent method.,"HERE: Widrow- Hoff rule: - $\Delta w$ = $\eta e(n) x(n)$ - Widrow-Hoff rule states that when an input x(n) produces an error e(n), then the change in the weight is directly proportional to the error signal and the input signal.",1
4241,The adjustment made to a synaptic weight of a neuron is proportional to the product of the error signal and the input signal of the synapse in question. The rule is derived from the steepest descent method.,The Widrow-Hoff learning rule is given by $$w(n + 1) = w(n) + \eta e(n) x(n)$$ where $w(n)$: Weight in iteration n $e(n) = d(n) - y(n)$: Error $d(n)$: Desired output $y(n)$: Actual output $x(n$: Input $\eta$: Learning rate,1
4242,The adjustment made to a synaptic weight of a neuron is proportional to the product of the error signal and the input signal of the synapse in question. The rule is derived from the steepest descent method.,Windrow-Hoff or error correction learning rule says that the adjustment of a weight is proportional to the product of the error signal and the input signal of the weight.,1
4243,The adjustment made to a synaptic weight of a neuron is proportional to the product of the error signal and the input signal of the synapse in question. The rule is derived from the steepest descent method.,Widrow-Hoff learning rule: The rules states that the weight update is directly proportional to the product of the input to the neuron and the error. $\Delta w{ij} = \eta e(n) \sum xi(n)$,1
4244,The adjustment made to a synaptic weight of a neuron is proportional to the product of the error signal and the input signal of the synapse in question. The rule is derived from the steepest descent method.,delta $ w{kj} = \eta ek . xj $ Widrow hoff rules states that the change in synaptic weight is proportional to the product of the error signal and the input signal,1
4245,The adjustment made to a synaptic weight of a neuron is proportional to the product of the error signal and the input signal of the synapse in question. The rule is derived from the steepest descent method.,The Widrow-Hoff rule is used in error-correction learning and uses the current error and output of the system to determine the new weights. $w(n+1) = w(n)+\eta \cdot e(n) \cdot y(n) $,1
4246,Backpropagation lowers the error of a MLP level by level recursively backwards. It back propagates an error from the last layer to the first layer by updating the weights. The updates are determined by the local gradient at each level which is computed by partial derivatives of the error and chain rule.,"In backpropagation, the gradient of the error produced at the output layer (by partially differentiating the cost function with respect to the weights) is propogated backwards one layer at a time back to the input layer. This propagated gradient is used to update the weights in the corresponding layer. Backpropagation is necessary because the desired output at every layer is not known and it is only possible to formulate the cost function at the output layer.",1
4247,Backpropagation lowers the error of a MLP level by level recursively backwards. It back propagates an error from the last layer to the first layer by updating the weights. The updates are determined by the local gradient at each level which is computed by partial derivatives of the error and chain rule.,"In back propagation, there are two phases: 1. Forward Phase: First we apply input to the network and compute the current output. 2. Backward Phase: We compute the error between current and desired output. Error is minimized by computing gradient of error with respect to weight. In return, weights are adjust. After adjusting weights in backward phase, we again go to forward phase and compute the current output, check whether error is minimized or not.",1
4248,Backpropagation lowers the error of a MLP level by level recursively backwards. It back propagates an error from the last layer to the first layer by updating the weights. The updates are determined by the local gradient at each level which is computed by partial derivatives of the error and chain rule.,Back propagation wants to minimize the error function E. E is given by: \( $ \frac{1}{2}\sum e(n)^{2}$ \). THe error function can be minimized by calculating the gradient starting from the output. Term for calculating the gradient differs. It depends on whether the neuron for which the gradient to be calculated is an output neuron or a hidden neuron.,1
4249,Backpropagation lowers the error of a MLP level by level recursively backwards. It back propagates an error from the last layer to the first layer by updating the weights. The updates are determined by the local gradient at each level which is computed by partial derivatives of the error and chain rule.,Back propagation is propagation of error from the output layer to the hidden layer in network with multiple layers. This is done by calculating the local gradient of each node and then using this (along with the weight) to determine how much of the error is to be propagated to the particular node,1
4250,Backpropagation lowers the error of a MLP level by level recursively backwards. It back propagates an error from the last layer to the first layer by updating the weights. The updates are determined by the local gradient at each level which is computed by partial derivatives of the error and chain rule.,"The back propagation algorithm is a learning algorithm for updating in the weights in a multi-layer neural network. For updating the weights of all the layers, the error of each neuron must be calculated. In the back propagation algorithm, two phases will be defined: - Forward phase: the output of the neural network will be calculated and also the error of the neurons in the output layer. - Backward phase: the gradient of each neuron will be calculated, by using the calculated error on the output layer and the defined connections between the hidden layer and the output layer. If multiple hidden layers are defined, the error will be iteratevely will be given backwards and the weights at each neuron will be updated.",1
4251,Backpropagation lowers the error of a MLP level by level recursively backwards. It back propagates an error from the last layer to the first layer by updating the weights. The updates are determined by the local gradient at each level which is computed by partial derivatives of the error and chain rule.,"Back propagation consists of two steps: 1. forward pass - data is passed through the network and weights are atapted 2. backward pass - by using local field of each neuron error signal is propagated backward by using local field of each neuron from end to beginning and stacking them up. Local field is partial derivative of the output signal of a a neuron, for output neuron it is simplest to calculate as it has only desired output and actual output to deal with.",1
4252,Backpropagation lowers the error of a MLP level by level recursively backwards. It back propagates an error from the last layer to the first layer by updating the weights. The updates are determined by the local gradient at each level which is computed by partial derivatives of the error and chain rule.,"Backpropagation is a learning algorithm in multi layer networks that consists of two phases, a forward pass and a backward pass. In the forward pass, the output is calculated by passing activations layer through layer starting from the input, then through hidden layer and finally output. Then the error is calculated in the output layer and propagated backward through the network. In the forward pass, the weight do not change. In the backward pass, the weights change in proportion to the local gradient.",1
4253,Backpropagation lowers the error of a MLP level by level recursively backwards. It back propagates an error from the last layer to the first layer by updating the weights. The updates are determined by the local gradient at each level which is computed by partial derivatives of the error and chain rule.,"Backpropagation is a neural network based learning algorithm where the network learns by propagating the error through the network. BP consists of two stages: + Forward pass: where the error is computed by feeding the input to the network. + Backward pass: where error is propagated through the network for doing the weight updates locally. Since BP has vanishing gradient problem, it is useful to use activation functions which are infinitely differentiable such as sigmoid function.",1
4254,Backpropagation lowers the error of a MLP level by level recursively backwards. It back propagates an error from the last layer to the first layer by updating the weights. The updates are determined by the local gradient at each level which is computed by partial derivatives of the error and chain rule.,"Back propogation usually occurs in a multi layer perceptron. It uses a non linear activation function. Basic elements: 1. Functional signals: These are the input signals, which passes through the network from left to right. As the name denotes it performs a usefull function at the output of the neuron and another reason for the name is that the functional signals are calculated based on the parameters and the activation function. 2. Error signals: Error signals propogate usually in the reverse direction which contains the error based on the desired output. It consists of 2 phases: 1. Forward phase: In the forward phase the signals propogate from left to right. Weights are fixed and passes through all the layers of the network, that is undergo all the activation. 2. Reverse phase: In the reverse phase, the local gradients are calcualted and are propogated through in the backward direction. Here weights change.",1
4255,Backpropagation lowers the error of a MLP level by level recursively backwards. It back propagates an error from the last layer to the first layer by updating the weights. The updates are determined by the local gradient at each level which is computed by partial derivatives of the error and chain rule.,Backpropogation is used for training multi layer networks. It constitutes of forward pass and backward pass. In forward pass network computes the output. Based on this the errors are calculated based on difference between network output and desired output. These errors are the backpropogated to network during backward pass and used for adjusting the synaptic weights.,1
4256,Backpropagation lowers the error of a MLP level by level recursively backwards. It back propagates an error from the last layer to the first layer by updating the weights. The updates are determined by the local gradient at each level which is computed by partial derivatives of the error and chain rule.,Back propagation is moving the error backwards recursively through the network by calculating the local field of every neuron to update the weights. It is based on the chaining rule of derivatives.,1
4257,Backpropagation lowers the error of a MLP level by level recursively backwards. It back propagates an error from the last layer to the first layer by updating the weights. The updates are determined by the local gradient at each level which is computed by partial derivatives of the error and chain rule.,Back-propagation algorithm consists of two passes:<br> 1. Forward pass: the input vector is applied to the network layer by layer 2. Backward pass: the weight is adjusted based on error correction learning rule. <br> <br> Back propagation uses error correction learning rule and the objective is to minimize the average of squared error.,1
4258,Backpropagation lowers the error of a MLP level by level recursively backwards. It back propagates an error from the last layer to the first layer by updating the weights. The updates are determined by the local gradient at each level which is computed by partial derivatives of the error and chain rule.,"Backpropogation has 2 steps. Forward pass: In forward pass the data is run through the network and the error is calculated. Backward pass: In Backward pass the weight is adjusted using local gradient of error such that the error is minimized. There are many ways for weight adjustment like, steepest descent, Newtons method, Gauss newton method.",1
4259,Backpropagation lowers the error of a MLP level by level recursively backwards. It back propagates an error from the last layer to the first layer by updating the weights. The updates are determined by the local gradient at each level which is computed by partial derivatives of the error and chain rule.,The back propagation is a learning method in neural networks. Back propagation enables the feed forward netwowrk to represent XOR gate. It has two phases: forward pass: the initial weights are used to calculate the value of the output neuron backward pass: starts from the output layer and travels backward. During this phase the weights are changed based on the local gradients of each neuron|,1
4260,Backpropagation lowers the error of a MLP level by level recursively backwards. It back propagates an error from the last layer to the first layer by updating the weights. The updates are determined by the local gradient at each level which is computed by partial derivatives of the error and chain rule.,"Backpropagation is used in Multilayer Perceptrons to give a method of adapting the weights. First the forward phase is run like in a regular feedforward network. Then after the output and thus the error is determined the error is backpropagated from ouput layer through the network. Since we have multiple layers, there is only a desired output of the network for the last layer. To counteract this problem a gradient is calculated for every neuron during the backward pass. The gradient is giving a measure of the contribution of this neuron to the final error. The gradient is then used to update the neurons weights. If the neuron is not part of the output layer, the previous gradients are used to calculate the new gradient instead of using the error.",1
4261,Backpropagation lowers the error of a MLP level by level recursively backwards. It back propagates an error from the last layer to the first layer by updating the weights. The updates are determined by the local gradient at each level which is computed by partial derivatives of the error and chain rule.,back propagation is used in multilayer feedforward networks. first the forward pass is computed. The given error at the output nodes is used to compute the weight changes using widrow-hoff learning rule. then the error is given back layer by layer in the backward pass to compute the error and weight changing for each layer recursivly. The learning can be done in sequential (online) or batch mode (offline),1
4262,Backpropagation lowers the error of a MLP level by level recursively backwards. It back propagates an error from the last layer to the first layer by updating the weights. The updates are determined by the local gradient at each level which is computed by partial derivatives of the error and chain rule.,In steepest gradient weights are adjusted in decreasing direction of error function. But for hidden neurons there is no labels available to calculate the error. Hence final ouput error is backpropogated through the layers inside the hidden layers of NN. This is possible with continuous activation function and chain rule on its derivatives. Final error is differentiated with respect to hidden weights. Chain rule is applied to find local error on hidden neurons.,1
4263,Backpropagation lowers the error of a MLP level by level recursively backwards. It back propagates an error from the last layer to the first layer by updating the weights. The updates are determined by the local gradient at each level which is computed by partial derivatives of the error and chain rule.,the back propagation algorithm it consist of forward pass and backward pass computes the output of the neuron then it propagates in backward direction while recursively compute local gradient of the neuron weights are adjusted accordingle.,1
4264,Backpropagation lowers the error of a MLP level by level recursively backwards. It back propagates an error from the last layer to the first layer by updating the weights. The updates are determined by the local gradient at each level which is computed by partial derivatives of the error and chain rule.,"Back Propagation is the process of learning in Multi Layer Perceptron in which the error from, the output of the network is fed back into the network to adjust the weights in the hidden layer. That is the error back prpagates into the network to enable the network to learn by adjusting the synaptic weights based on it.",1
4265,Backpropagation lowers the error of a MLP level by level recursively backwards. It back propagates an error from the last layer to the first layer by updating the weights. The updates are determined by the local gradient at each level which is computed by partial derivatives of the error and chain rule.,* Back propagation is a process to make adjustment to the weights of a neural network in a way that minimizes the average squared error of the training data. * It uses steepest decent method. In each step it moves towards the direction that gives maximum decrease of the error. * In back propagation the error is propaged backward from the last layer towards the earlier layers. The adjustments made to the weights is proportional to the partial derivative of the error with respect to the weight. * The partial derivative is calculated using repeated application of the chain rule.,1
4266,"Learning rate controls the speed of the convergence. When the learning rate is low, the convergence is overdamped and slow. When the learning rate is high, the convergence is underdamped and follows a zigzagging path. When the learning rate exceeds a critical value learning becomes unstable. ","If learning rate is very smaller, then transition are over-damping, trajectory of weight vector follows the smooth path. If learning rate is large, then transition are under-damping, trajectory of weight vector exhibits the zigzagging(or oscillatory) behavior If learning gets higher than some threshold, then learning algorithm gets unstable or diverges",1
4267,"Learning rate controls the speed of the convergence. When the learning rate is low, the convergence is overdamped and slow. When the learning rate is high, the convergence is underdamped and follows a zigzagging path. When the learning rate exceeds a critical value learning becomes unstable. ",Learning rate n determines stride of delta of weight. If learning rate is too large weights starts to ziggerate.,1
4268,"Learning rate controls the speed of the convergence. When the learning rate is low, the convergence is overdamped and slow. When the learning rate is high, the convergence is underdamped and follows a zigzagging path. When the learning rate exceeds a critical value learning becomes unstable. ",The learning rate defines the speed of the weight change. A learning rate too high can lead to oscillation around the optimal weight such that its never reached. A learning rate to low results in very slow learning and slow convergence.,1
4269,"Learning rate controls the speed of the convergence. When the learning rate is low, the convergence is overdamped and slow. When the learning rate is high, the convergence is underdamped and follows a zigzagging path. When the learning rate exceeds a critical value learning becomes unstable. ","If learning rate is to large, then proccess will oscillate a lot and might not converge. If learning rate is to small, then convergance will happen very slowly",1
4270,The reduced Boltzmann machine is a bi-parted graph which works by flipping the states of binary neurons based on a probability determined by the activation produced at the neuron. Neurons are arranged in a visible and a hidden layer in a recurrent fashion. There are two states involved called the clamped state in which the visible neuron is connected to the input and a free running state in which both layers run free.,"The main idea of an RBM can be defined as follows: - Two layers will be defined, where each neuron will be connected to every neuron of the other layer. - The input will be passed from the first layer to the second one, and the state of each neuron of the second layer will be calculated. - The neurons with active states will pass again its values to the input layer. - The values given from the second layer will be compared with the input values, and with the two states, the weights will be adjusted.",1
4271,The reduced Boltzmann machine is a bi-parted graph which works by flipping the states of binary neurons based on a probability determined by the activation produced at the neuron. Neurons are arranged in a visible and a hidden layer in a recurrent fashion. There are two states involved called the clamped state in which the visible neuron is connected to the input and a free running state in which both layers run free.,"The Reduced boltzman machine works by flipping neurons. It can operate in clamped or free running state. - If two connected neurons are activated at the same time, the weight is increased. - If any of the two neurons are fired asynchronously, then the weight is reduced or removed.",1
4272,The reduced Boltzmann machine is a bi-parted graph which works by flipping the states of binary neurons based on a probability determined by the activation produced at the neuron. Neurons are arranged in a visible and a hidden layer in a recurrent fashion. There are two states involved called the clamped state in which the visible neuron is connected to the input and a free running state in which both layers run free.,+ Reduced Boltzman Machines (reduced because inputs do not share information via synapses) are one of the initial NNs which consists of input layer and hidden layer. The system adapts its internal weights and tries to reproduce the inputs.,1
4273,The reduced Boltzmann machine is a bi-parted graph which works by flipping the states of binary neurons based on a probability determined by the activation produced at the neuron. Neurons are arranged in a visible and a hidden layer in a recurrent fashion. There are two states involved called the clamped state in which the visible neuron is connected to the input and a free running state in which both layers run free.,"A RBM is a shallow two layer network containing a visible and a hidden layer. Each noden in the visible layer is connected to each node of the hidden layer. It is considered as restricted, because no two nodes of one layer share a connection. A RBM is the mathematical equivalent of a two way translator. In the forward pass a RBM takes the inputs and translates them to a set of numbers that encode the inputs. In the backward pass it takes the set of numbers and translates them back to form the reconstructed inputs. A well trained RBM will be able to perform the backward translation with a higher degree of accuracy. Three steps are repeated over and over through the training process: 1) Forward pass. 2) Backward pass. 3) Evaluate quality of reconstruction as visible layer (often solved with KL divergece)",1
4274,The reduced Boltzmann machine is a bi-parted graph which works by flipping the states of binary neurons based on a probability determined by the activation produced at the neuron. Neurons are arranged in a visible and a hidden layer in a recurrent fashion. There are two states involved called the clamped state in which the visible neuron is connected to the input and a free running state in which both layers run free.,"RBMs work on the principle of binary states, free-running or clamped. The weight update is done based on the Botlzmann's formula using the pseudotemperature, which gives the proobability of error.",1
4275,The reduced Boltzmann machine is a bi-parted graph which works by flipping the states of binary neurons based on a probability determined by the activation produced at the neuron. Neurons are arranged in a visible and a hidden layer in a recurrent fashion. There are two states involved called the clamped state in which the visible neuron is connected to the input and a free running state in which both layers run free.,Boltzmann machines is a neural network having recurrent structure.It is in two states either on which is +1 or off which is -1.The energy function is given by $E = 1/(1+exp(-delta E/Temperature))$ The state of the input x is turned from +1 to -1 based on the change of the energy deltaE and the pseudo temeperature T.,1
4276,The reduced Boltzmann machine is a bi-parted graph which works by flipping the states of binary neurons based on a probability determined by the activation produced at the neuron. Neurons are arranged in a visible and a hidden layer in a recurrent fashion. There are two states involved called the clamped state in which the visible neuron is connected to the input and a free running state in which both layers run free.,"The neurons operate in a binary states, ""on"" or ""off"". In clamped condition, all visible neurons are clamped into specific states by the environment; in free running condition, all neurons including visible and hidden neurons operate freely.",1
4277,The reduced Boltzmann machine is a bi-parted graph which works by flipping the states of binary neurons based on a probability determined by the activation produced at the neuron. Neurons are arranged in a visible and a hidden layer in a recurrent fashion. There are two states involved called the clamped state in which the visible neuron is connected to the input and a free running state in which both layers run free.,Reduced boltzman machine work based on **flipping operation** and calculating the probability invariances of clamped state and freely running state.,1
4278,The reduced Boltzmann machine is a bi-parted graph which works by flipping the states of binary neurons based on a probability determined by the activation produced at the neuron. Neurons are arranged in a visible and a hidden layer in a recurrent fashion. There are two states involved called the clamped state in which the visible neuron is connected to the input and a free running state in which both layers run free.,RBMs run on boltzmann learning rule. The neurons have 2 modes of operation clipped and free running. All the neurons are binary units. Their status can be changed by flipping. All the neurons that are in on position are clipped together.,1
4279,The reduced Boltzmann machine is a bi-parted graph which works by flipping the states of binary neurons based on a probability determined by the activation produced at the neuron. Neurons are arranged in a visible and a hidden layer in a recurrent fashion. There are two states involved called the clamped state in which the visible neuron is connected to the input and a free running state in which both layers run free.,It has the structure of recurrent neural network. It has two layers of neuron visible and hidden. the neuron can store only binary values they work based on flipping theere are modes free running and clamped the weights are changes based on the correlation of the neurons in the free running mode and clamped mode,1
4280,The reduced Boltzmann machine is a bi-parted graph which works by flipping the states of binary neurons based on a probability determined by the activation produced at the neuron. Neurons are arranged in a visible and a hidden layer in a recurrent fashion. There are two states involved called the clamped state in which the visible neuron is connected to the input and a free running state in which both layers run free.,"In a Reduced Boltzman Machine there are one visible and at least one hidden layer. The visible layer is the input and acts as output at the same time. For each input the neurons of the visible layer will be assigned with a value. With their weights, hidden neurons may either be activated or not. Once the input has been passed through the hidden layers, the values are passed all the way back to the visible layer. For this, different weights are used since the values move in the opposite direction.",1
4281,The reduced Boltzmann machine is a bi-parted graph which works by flipping the states of binary neurons based on a probability determined by the activation produced at the neuron. Neurons are arranged in a visible and a hidden layer in a recurrent fashion. There are two states involved called the clamped state in which the visible neuron is connected to the input and a free running state in which both layers run free.,"In RBMs there are two states, the free running and the clamped state. During the clamped state, the input neurons are clamped to the output neurons. While the network is clamped the probabilities of the Hidden states to be in a certain state are calculated to determine a probability of the output to be correct.",1
4282,The reduced Boltzmann machine is a bi-parted graph which works by flipping the states of binary neurons based on a probability determined by the activation produced at the neuron. Neurons are arranged in a visible and a hidden layer in a recurrent fashion. There are two states involved called the clamped state in which the visible neuron is connected to the input and a free running state in which both layers run free.,The Reduced Boltzman Machine hast an input layer and a hidden layer. Each neuron has a state and a probability to turn on. If the neuron turns on the data passes trough it and the weights are updated. The probability of turning on is calculated by the network.,1
4283,The reduced Boltzmann machine is a bi-parted graph which works by flipping the states of binary neurons based on a probability determined by the activation produced at the neuron. Neurons are arranged in a visible and a hidden layer in a recurrent fashion. There are two states involved called the clamped state in which the visible neuron is connected to the input and a free running state in which both layers run free.,"Two fully connected layers, one input and one hidden layer are used. The input layer is the only connection to the environment. The RBM has a specified energy level which can not be changed. However the distribution of this energy to the nodes can be changed. Based on the data input every node has a chance to flip based on its input connections.",1
4284,The reduced Boltzmann machine is a bi-parted graph which works by flipping the states of binary neurons based on a probability determined by the activation produced at the neuron. Neurons are arranged in a visible and a hidden layer in a recurrent fashion. There are two states involved called the clamped state in which the visible neuron is connected to the input and a free running state in which both layers run free.,"* It is a Recurrent neural netwokr * It uses two groups of neurons, hidden and visible * It process the training data by flipping the neurons",1
4285,Echo State Network is a type of Recurrent Neural Network and has at least one cyclic (feedback) connection. Only the weights of the output layers are updated while learning. ESN consists of feedback connections while a FF NN does not. ESN can approximate dynamic systems while FF NN cannot.  ,"The ESN is a type of neural network model that uses a recurrent neural network as a large, random, fixed dynamic reservoir that remains unchanged during training and only changes the weight of the reservoir to output layer.",1
4286,Echo State Network is a type of Recurrent Neural Network and has at least one cyclic (feedback) connection. Only the weights of the output layers are updated while learning. ESN consists of feedback connections while a FF NN does not. ESN can approximate dynamic systems while FF NN cannot.  ,"ESNs are a form of recurrent neural networks with a least one recurrent input. The ESNs are reservior computers which have memory and can be activated without the inputs. In ESNs, instead of training we evolve the network state by feeding it input sequence. ESNs are different from FF NNs because ESNs contains at least one recurrent connection (feedback).",1
4287,Echo State Network is a type of Recurrent Neural Network and has at least one cyclic (feedback) connection. Only the weights of the output layers are updated while learning. ESN consists of feedback connections while a FF NN does not. ESN can approximate dynamic systems while FF NN cannot.  ,"An Echo State Network (ESN) is a modified version of a recurrent network. It has a reservoir, which is a large number of hidden neurons with sparsely-connected random and fixed weights. To train an ESN, only the weights connecting the reservoire and the output layer are adjusted; therefore, the efficiency is better than a normal recurrent network.",1
4288,Echo State Network is a type of Recurrent Neural Network and has at least one cyclic (feedback) connection. Only the weights of the output layers are updated while learning. ESN consists of feedback connections while a FF NN does not. ESN can approximate dynamic systems while FF NN cannot.  ,"HERE: - Echo state networks are recurrent neural networks that have a large resorvoir of oscillator functions that are connected to the input layer. - In FF NNs, consideredthe outputs at the hidden layers are also considered but in ESNs, the ouputs from the reservoir to the final output layer are only considered.",1
4289,Echo State Network is a type of Recurrent Neural Network and has at least one cyclic (feedback) connection. Only the weights of the output layers are updated while learning. ESN consists of feedback connections while a FF NN does not. ESN can approximate dynamic systems while FF NN cannot.  ,"ESN are another implementation of RNNs where training method is completely different. They comprise of a dynamic reservoir with fixed hidden to hidden connections which makes up an RNN with sparse connetivity. Only the output weights which connect the dynamic units and the output of the reservoir are trained using error, unlike RNNs, where the hidden weights are also trained. ESNs are less compuationaly expensive since they can be easiliy trained with experimentation .However, RNNs use much less hidden units compared to ESN for a similar task.",1
4290,Echo State Network is a type of Recurrent Neural Network and has at least one cyclic (feedback) connection. Only the weights of the output layers are updated while learning. ESN consists of feedback connections while a FF NN does not. ESN can approximate dynamic systems while FF NN cannot.  ,ESN refers to echo state networks. Echo state networks are the recurrent neural networks where the hidden to hidden layer weights are selected randomly and are fixed and hidden to output layer weights are changed by the learning process.Since ESN is recurrent neural network hence the output echoes throgh the network even when there is no input where as in ff nets there is no feedback so there is no output if there is no input.,1
4291,Echo State Network is a type of Recurrent Neural Network and has at least one cyclic (feedback) connection. Only the weights of the output layers are updated while learning. ESN consists of feedback connections while a FF NN does not. ESN can approximate dynamic systems while FF NN cannot.  ,"ESN is a kind of Recurrent NN, which has a large, random , fixed RNN called dynamic reservior and only the weights connecting the reservior and output layer are trained. So ESN combine the desired system function and input/output history echo function.",1
4292,Echo State Network is a type of Recurrent Neural Network and has at least one cyclic (feedback) connection. Only the weights of the output layers are updated while learning. ESN consists of feedback connections while a FF NN does not. ESN can approximate dynamic systems while FF NN cannot.  ,"ESN provides an architetcure of supervised learning principle for RNNs. It is different from FF NNs, because it has a reservoir (based on RNNs) to find a non linear signal response and combine the desired output by a trainable linear combination of these response.",1
4293,Echo State Network is a type of Recurrent Neural Network and has at least one cyclic (feedback) connection. Only the weights of the output layers are updated while learning. ESN consists of feedback connections while a FF NN does not. ESN can approximate dynamic systems while FF NN cannot.  ,ESN is a type of RNN. It has a dynamic reservoir. All the neuron are connected to each other.,1
4294,Echo State Network is a type of Recurrent Neural Network and has at least one cyclic (feedback) connection. Only the weights of the output layers are updated while learning. ESN consists of feedback connections while a FF NN does not. ESN can approximate dynamic systems while FF NN cannot.  ,"An echo state network contains of an input layer which is connected to a reservoir, which is a big recurrent network. The output layer is connected to the neurons of the reservoir. While learning in an ESN, only the weights between the reservoir and the output layer are changed, no changes within the reservoir. Differences to feed forwared networks are, that the reservoir is recurrent and that during the training not all weights are changed, but only the ones between ouput layer and reservoir.",1
4295,Echo State Network is a type of Recurrent Neural Network and has at least one cyclic (feedback) connection. Only the weights of the output layers are updated while learning. ESN consists of feedback connections while a FF NN does not. ESN can approximate dynamic systems while FF NN cannot.  ,"In contrast to regular feedforward networks, ESN belongs to the group of Recurrent Neural Networks. It has a regular input layer like the FF, then comes a dynamic reservoir, which is a layer of neurons, where at least one full cycle of connections between the neurons is given. The connections inside this reservoir are not constrained and can thus be any possible connection. This reservoir is randomly initilaized and kept that way. Only the respective connections to the output layer are trained during the learning process.",1
4296,Echo State Network is a type of Recurrent Neural Network and has at least one cyclic (feedback) connection. Only the weights of the output layers are updated while learning. ESN consists of feedback connections while a FF NN does not. ESN can approximate dynamic systems while FF NN cannot.  ,"ESN have an input layer connected to a reservoir, which is a recurrent neural network. The reservoir is connected to the output layer. On the connections to the output layer are weights, which are updated by the network. The weights of the reservoir are chosen randomly and not updated at all.",1
4297,Echo State Network is a type of Recurrent Neural Network and has at least one cyclic (feedback) connection. Only the weights of the output layers are updated while learning. ESN consists of feedback connections while a FF NN does not. ESN can approximate dynamic systems while FF NN cannot.  ,"An ESN is a recurrent neural network, that consists of an input layer, a dynamical reservoir and an output layer. In the dynamical reservoir feedback loops are possible in contrast to a feedforward network. However, this dynamical reservoir is only randomily initialzed and not learned. Only the connections to the output from the reservoir are learned. Normally, in FF NNs all connections are trained.",1
4298,Echo State Network is a type of Recurrent Neural Network and has at least one cyclic (feedback) connection. Only the weights of the output layers are updated while learning. ESN consists of feedback connections while a FF NN does not. ESN can approximate dynamic systems while FF NN cannot.  ,"echo state networks have dynamical reservoir as hidden layer. The dynamical reservoir consists of recurrent non-linear neurons. Only the linear connections from dynamical reservoir to the output layer are trained. The difference to FF NN is, that the ESN is a recurrent network",1
4299,Echo State Network is a type of Recurrent Neural Network and has at least one cyclic (feedback) connection. Only the weights of the output layers are updated while learning. ESN consists of feedback connections while a FF NN does not. ESN can approximate dynamic systems while FF NN cannot.  ,Echo state networks have dynamic reservoir with echo state property which is a randomely initialized RNN. Hence it can maintain its own internal state. Which is not possible in FF NN. RNN have feedback connections which ecoes back the state of reservoir as well as previoulsly applied inputs. Hence it can model dynamic systems which not possible with FFNN.,1
4300,"Convolutional Neural Network consists of many layers such as a convolutional layer that has kernels which convolve over the input image, an activation layer (ReLU activation), pooling layer (max or average pooling), and one or more fully connected layers followed by softmax layer.","A Convolutional Neural Network has a kernel which is much smaller than the input. This is why it can operate much more efficient than a normal neural network. Normal Neural network O(n \times m), convolutional neural network O ( n $ \times $ k), k is much smaller than m. A convolutional Network operates no large images. The input is preproessed in many layers before it is given to a normal neural network. Preprocessing transforms input into a linear separable problem.",1
4301,"Convolutional Neural Network consists of many layers such as a convolutional layer that has kernels which convolve over the input image, an activation layer (ReLU activation), pooling layer (max or average pooling), and one or more fully connected layers followed by softmax layer.",A CNN uses convolution instead of matrix multiplication. After this there is a non linearity which may be a function like ReLU. There is also a pooling stage which is used to pool the important features. CNNs are translation invartiant.,1
4302,"Convolutional Neural Network consists of many layers such as a convolutional layer that has kernels which convolve over the input image, an activation layer (ReLU activation), pooling layer (max or average pooling), and one or more fully connected layers followed by softmax layer.","An Convalutional neuron network assumes the input is an image. Because of that it has a achitecture, so that there are (abwechselnt) covalution and subsampling layers. After the last subsampling layer there is a normal FF NN which classifys the input.",1
4303,"Convolutional Neural Network consists of many layers such as a convolutional layer that has kernels which convolve over the input image, an activation layer (ReLU activation), pooling layer (max or average pooling), and one or more fully connected layers followed by softmax layer.","A Convolutional Neural Networks has the following structure: - The input is defined in a grid, so any image or video sequence will be used. - A several number of convolutional layers, where also subsampling (pooling) can be used. - In the convolutional steps a filter will be used for each layer. - After applying multiple convolutional layers, a normal feed-forward networks can be applied, where for example a back propagation algorithm can be used for updating the weights in the numerous iterations.",1
4304,"Convolutional Neural Network consists of many layers such as a convolutional layer that has kernels which convolve over the input image, an activation layer (ReLU activation), pooling layer (max or average pooling), and one or more fully connected layers followed by softmax layer.",A CNN network consists of: - Input layer - conolution layer - Detection layer - Pooling layer - Next layer(because CNN consists of many layers this will be another block of layers similar to what described),1
4305,"Convolutional Neural Network consists of many layers such as a convolutional layer that has kernels which convolve over the input image, an activation layer (ReLU activation), pooling layer (max or average pooling), and one or more fully connected layers followed by softmax layer.","Convolutional neural networks are so that first layer is not fully connected but in a way that neuron connections overlap, leading to a grid type structure with overlapping circles. Another layer is connected only with nodes that are responsible for a particular feature (convolutions), then next layer is choosing wich of those convolutions from each ensemble is the most apropriate, after that next layer is fully connected to output neurons.",1
4306,"Convolutional Neural Network consists of many layers such as a convolutional layer that has kernels which convolve over the input image, an activation layer (ReLU activation), pooling layer (max or average pooling), and one or more fully connected layers followed by softmax layer.",- The CNN has an input layer - The input layer is connected to a convolution layer consisting of three phases: - convolution stage - Detector stage - pooling stage - The next layer (can be a traditional FFNN),1
4307,"Convolutional Neural Network consists of many layers such as a convolutional layer that has kernels which convolve over the input image, an activation layer (ReLU activation), pooling layer (max or average pooling), and one or more fully connected layers followed by softmax layer.",CNNs are feed forward neural networks which replaces matrix multiplication task with convolution operation which is much sparse. CNN contain followng stages: + Convolution (learns local features) + max pooling (coarse-graining to learn better abstraction of input image),1
4308,"Convolutional Neural Network consists of many layers such as a convolutional layer that has kernels which convolve over the input image, an activation layer (ReLU activation), pooling layer (max or average pooling), and one or more fully connected layers followed by softmax layer.","An CNN (covolutional neural network) contains a set of hidden layers for feature extration (convolutional layers, pooling layers), and fully-connected layers that classifies the features. The covolutional layers are used to carry out the covolution between the incoming signals with a set of filters, resulting in a set of feature maps. The pooling layers are used to reduce the dimensionality of the feature maps, and make the features invariant of rotation or displacement.",1
4309,"Convolutional Neural Network consists of many layers such as a convolutional layer that has kernels which convolve over the input image, an activation layer (ReLU activation), pooling layer (max or average pooling), and one or more fully connected layers followed by softmax layer.","A CNN 1. starts with a input, where we perform the convolution, which provides a piece of activation. 2. Next it is being sent through the activation layer otherwise known as the detection layer. 3. Then the final stage is the pooling.",1
4310,"Convolutional Neural Network consists of many layers such as a convolutional layer that has kernels which convolve over the input image, an activation layer (ReLU activation), pooling layer (max or average pooling), and one or more fully connected layers followed by softmax layer.","HERE: Convolutional neural networks have 4 main layers where input layer is connected to convolutional and subsampling layers followed by another set of convolutional and subsampling layers connected to the output layer. They are designed to specifically recognize 2-d shapes are invariant to skewing, rotation and the actual location of the object.",1
4311,"Convolutional Neural Network consists of many layers such as a convolutional layer that has kernels which convolve over the input image, an activation layer (ReLU activation), pooling layer (max or average pooling), and one or more fully connected layers followed by softmax layer.","CNN comprises of multile layers of neurons which perform specific tasks. The initia layer is the convolution layer which performs convolution of the input with the elements of a given kernel. Simpler tasks such as edge detectoíon are performed. Detector layer forms a seconf layer here the output of convolution layer if fed through an activation function such as ReLU. Further, the data is pooled in the pooling layers where downsamping is done to reduce dimensionaity. These layers are repeated to perform more complex feature extraction operations.",1
4312,"Convolutional Neural Network consists of many layers such as a convolutional layer that has kernels which convolve over the input image, an activation layer (ReLU activation), pooling layer (max or average pooling), and one or more fully connected layers followed by softmax layer.",A CNN is a neural network that replaces matrix multiplication with a mathematical operation called convolution in one or more layers. The main idea behind the structure of a CNN is to replace the activation of neuron with a flipped filter (Convolution layer) and then apply another function called pooling to adust the output further.,1
4313,"Convolutional Neural Network consists of many layers such as a convolutional layer that has kernels which convolve over the input image, an activation layer (ReLU activation), pooling layer (max or average pooling), and one or more fully connected layers followed by softmax layer.","The structure is as follows: -Convolution: In this layer convolution takes place instead of matrix multiplication -Deconvolution: In this layer deconvolution takes place , by matrix multiplication -Average weight layer: This is a max pooling layer",1
4314,"Convolutional Neural Network consists of many layers such as a convolutional layer that has kernels which convolve over the input image, an activation layer (ReLU activation), pooling layer (max or average pooling), and one or more fully connected layers followed by softmax layer.","1. first stage, the layer performs several convolution parallel to produce a set of linear activation 2. detector stage, each linear activation is run through a non-linear activation 3. third stage, use a pooling function to modify the output of layer.",1
4315,"Convolutional Neural Network consists of many layers such as a convolutional layer that has kernels which convolve over the input image, an activation layer (ReLU activation), pooling layer (max or average pooling), and one or more fully connected layers followed by softmax layer.",1. Convolution or matrix multiplication: it produces output to hidden layer 2. Deconvolution matrix multiplication by transpose matrix: apply back propagation error for output to input. 3. Weight update: apply back propagation error from output to weight.,1
4316,"Convolutional Neural Network consists of many layers such as a convolutional layer that has kernels which convolve over the input image, an activation layer (ReLU activation), pooling layer (max or average pooling), and one or more fully connected layers followed by softmax layer.",* Input layer * Convoluton layer (Affine transformation) * Filtering layer (Sampling) * Learning layer * Output layer,1
4317,"Convolutional Neural Network consists of many layers such as a convolutional layer that has kernels which convolve over the input image, an activation layer (ReLU activation), pooling layer (max or average pooling), and one or more fully connected layers followed by softmax layer.",THe CNN will have a input layer convolutional layer - Here the convolution and sub sampling of the feature maps take place Feed Forward - Neural Network layer Output layer,1
4318,"Convolutional Neural Network consists of many layers such as a convolutional layer that has kernels which convolve over the input image, an activation layer (ReLU activation), pooling layer (max or average pooling), and one or more fully connected layers followed by softmax layer.","A convolutional neural network uses the steps of convolution and subsampling alternating in the beginning. Using different kernels during convolution, many feature maps are created. The subsampling step merges the maps to reduce their amount. After some of these steps, a classical feed forward network is in the end to transform the different feature maps to one output layer.",1
4319,"Convolutional Neural Network consists of many layers such as a convolutional layer that has kernels which convolve over the input image, an activation layer (ReLU activation), pooling layer (max or average pooling), and one or more fully connected layers followed by softmax layer.","A Concolutional neural network has alternating layers of convolution and pooling. The convolutional layer is applying a filter to the input, while the pooling layer sub-samples the input. In some networks this is replaced by strided convolution, which combines these two steps into one. The structure at the end of a CNN is equal to that of a regular feedforward network.",1
4320,"Convolutional Neural Network consists of many layers such as a convolutional layer that has kernels which convolve over the input image, an activation layer (ReLU activation), pooling layer (max or average pooling), and one or more fully connected layers followed by softmax layer.",Convolutional Neural Network it has often images or video sequences as input. the input is computed by convolution (with different kernels) and downsampling in many steps to smaller but many more input matrices. In last step the matrices are connected to a classical FF NN.,1
4321,"Convolutional Neural Network consists of many layers such as a convolutional layer that has kernels which convolve over the input image, an activation layer (ReLU activation), pooling layer (max or average pooling), and one or more fully connected layers followed by softmax layer.",A CNN conists of one or more convolution layers as well as subsampling or pooling layers followed by a fully connected standard FFN. In the convolutution layer kernels are used to create feature maps. A kernel is smaller matrix that is apllied to all possible positions on the input matrix. In the pooling stage the dimension of the rfeature map is reduced. for example by max pooling.,1
4322,"Convolutional Neural Network consists of many layers such as a convolutional layer that has kernels which convolve over the input image, an activation layer (ReLU activation), pooling layer (max or average pooling), and one or more fully connected layers followed by softmax layer.",Convolutional Neural Network(CNN) has three main layers in them 1. Convolutional Layer 2. Pooling or Subsampling Layer 3. Output layer.,1
4323,"Three items to be learned are centers, weights, and biases. RBFN consists of a single hidden layer and a linear output layer. NN can have multiple hidden layers and a linear or non-linear output layer. Pros: RBFN is a universal approximator and it is easy to add more centers. Con: The bias is not unique.  ",RBF network need to learn center of activation function. Differenec to other NN is that there are as many activation functions as data points. One con of Radial Basis Funtion is that due to many activation function RBF networks have a huge computational effort.,1
4324,"Three items to be learned are centers, weights, and biases. RBFN consists of a single hidden layer and a linear output layer. NN can have multiple hidden layers and a linear or non-linear output layer. Pros: RBFN is a universal approximator and it is easy to add more centers. Con: The bias is not unique.  ","- Use distance to center as argument for computation of local fields. - Use radial basis functions as activations - RFBs are only global approximators, - splitted learning instead of global learning",1
4325,"Three items to be learned are centers, weights, and biases. RBFN consists of a single hidden layer and a linear output layer. NN can have multiple hidden layers and a linear or non-linear output layer. Pros: RBFN is a universal approximator and it is easy to add more centers. Con: The bias is not unique.  ",+ Kernels + Only neighbourhoods are computed based on distances. + Radius of neighbourhoods Pros + RBF are simple and easy to compute. Cons + They remember the data points,1
4326,"Three items to be learned are centers, weights, and biases. RBFN consists of a single hidden layer and a linear output layer. NN can have multiple hidden layers and a linear or non-linear output layer. Pros: RBFN is a universal approximator and it is easy to add more centers. Con: The bias is not unique.  ",Differences are: * RBFN has a single hidden layer. Nonlinear hidden layer. * Linear output layer. * Argument of hidden units: Euclidean norm. * Universal approximation property. Local approximators. * Splitted Learning.,1
4327,"Three items to be learned are centers, weights, and biases. RBFN consists of a single hidden layer and a linear output layer. NN can have multiple hidden layers and a linear or non-linear output layer. Pros: RBFN is a universal approximator and it is easy to add more centers. Con: The bias is not unique.  ","The three items that needs to be learnt are the centers, widths and depth. Compared to other NN they have a standard 3 layer structure. They can have just one hidden layer.",1
4328,"Three items to be learned are centers, weights, and biases. RBFN consists of a single hidden layer and a linear output layer. NN can have multiple hidden layers and a linear or non-linear output layer. Pros: RBFN is a universal approximator and it is easy to add more centers. Con: The bias is not unique.  ","The three parametrs to be learnedin Generalized RBF are 1) cluster centers of the basis functions 2) spread or the width of the basis functions $\sigma$ , and 3) weights of connecting the input and the hidden layers. RBF are differenent from NNs in different ways. 1) The kernels are localized functions where as NNs are gobablized 2) They use euclidean distance in their activation functions where as NNs use inner products 3) They have a single hidden layer and output is a linear combinaation but NNs compulsarily are not the same.",1
4329,"Three items to be learned are centers, weights, and biases. RBFN consists of a single hidden layer and a linear output layer. NN can have multiple hidden layers and a linear or non-linear output layer. Pros: RBFN is a universal approximator and it is easy to add more centers. Con: The bias is not unique.  ",The three open parameters of an RBF network are: 1. The centers $ci$ 2. The widths $\sigmai$ and 3. The weights $wi$ The number of centers $k$ has to be determined by trial and error.,1
4330,"Three items to be learned are centers, weights, and biases. RBFN consists of a single hidden layer and a linear output layer. NN can have multiple hidden layers and a linear or non-linear output layer. Pros: RBFN is a universal approximator and it is easy to add more centers. Con: The bias is not unique.  ",1. non-linear transformation function from input space to feature space 2. centers of input data that is used for each hidden neuron 3. synaptic weights connecting hidden layer and output layer,1
4331,"Three items to be learned are centers, weights, and biases. RBFN consists of a single hidden layer and a linear output layer. NN can have multiple hidden layers and a linear or non-linear output layer. Pros: RBFN is a universal approximator and it is easy to add more centers. Con: The bias is not unique.  ","Three items to be learned, * origin * center Pros: * It can transform data from n dimension to infinity dimension. * It can solve non linear problems easily. Cons: * It may overfit. * Learning is slow.",1
4332,"Three items to be learned are centers, weights, and biases. RBFN consists of a single hidden layer and a linear output layer. NN can have multiple hidden layers and a linear or non-linear output layer. Pros: RBFN is a universal approximator and it is easy to add more centers. Con: The bias is not unique.  ","Center of the hidden neurons, synaptic weights connecting the neurons and RBFs have only 1 hidden layer. There is a non0linear tranformation between the inputs and the hidden space and a linear tranformation between the hidden space and the output space. Pros: It can be used for non-linearly separable data.",1
4333,"Three items to be learned are centers, weights, and biases. RBFN consists of a single hidden layer and a linear output layer. NN can have multiple hidden layers and a linear or non-linear output layer. Pros: RBFN is a universal approximator and it is easy to add more centers. Con: The bias is not unique.  ",1. Weigths in the network 2. the center of the clusters 3. variation of the cluster ($\sigma$) Difference: RBF always have only three layers RBF can also trained in an unspervised method RBF can also approximate any continuous function,1
4334,"Three items to be learned are centers, weights, and biases. RBFN consists of a single hidden layer and a linear output layer. NN can have multiple hidden layers and a linear or non-linear output layer. Pros: RBFN is a universal approximator and it is easy to add more centers. Con: The bias is not unique.  ",- The centroids of the radial basis functions - The weights of the neurons - The amount of needed neurons A difference to other neural networks is that the centroids of the radial basis functions need to be there.,1
4335,"Three items to be learned are centers, weights, and biases. RBFN consists of a single hidden layer and a linear output layer. NN can have multiple hidden layers and a linear or non-linear output layer. Pros: RBFN is a universal approximator and it is easy to add more centers. Con: The bias is not unique.  ","The centers of the clusters, the widhts of the clusters and the weights. In contrast to other NNs the output only depends on the radial distance to the center of the clusters.",1
4336,"Three items to be learned are centers, weights, and biases. RBFN consists of a single hidden layer and a linear output layer. NN can have multiple hidden layers and a linear or non-linear output layer. Pros: RBFN is a universal approximator and it is easy to add more centers. Con: The bias is not unique.  ","The weights, the interpolation matrix have to be learned. The RBF maps the input space into a higher dimensional feature space nonlinearly. The feature space is mapped into the output space linearly. The output space is much smaller than the feature space. Pros: local learning Cons: feature space can be really large, curse of dimensionality",1
4337,"Three items to be learned are centers, weights, and biases. RBFN consists of a single hidden layer and a linear output layer. NN can have multiple hidden layers and a linear or non-linear output layer. Pros: RBFN is a universal approximator and it is easy to add more centers. Con: The bias is not unique.  ",Centers of the radial basis functions best model (rbf) distance of each input pair pros: non-linear functions application ease to compute using covers theorem cons: high-dimensional,1
4338,"Three items to be learned are centers, weights, and biases. RBFN consists of a single hidden layer and a linear output layer. NN can have multiple hidden layers and a linear or non-linear output layer. Pros: RBFN is a universal approximator and it is easy to add more centers. Con: The bias is not unique.  ","1. Input layer connecting RBF to environment. 2. Hidden layer: nonolinear tranformation of input space to hidden space 3. Output layer: linear tranformation of hidden space to output space. It is different than other NNs because for learning patterns, it nonlinearly tranforms the input space to higher dimmensional space. Other NNs do not tranform input. As it tranforms input patterns to high dimmensional nonlinear space, patterns which are not separable in lower dimmensions have greater chance to be separated. But if we select basis functions equal to datapoints, problem is ill-formulated. Processing is computationallly heavy. Regualation becomes problem specific. Hence, unsupervied learning is employed to clusters data initially.",1
4339,"Three items to be learned are centers, weights, and biases. RBFN consists of a single hidden layer and a linear output layer. NN can have multiple hidden layers and a linear or non-linear output layer. Pros: RBFN is a universal approximator and it is easy to add more centers. Con: The bias is not unique.  ",The difference of RBF to other NNS are 1. RBF has only one hidden layer wheras their is no hard limitation on number of hidden layers on other NNs 2. The activation function used in RBF is non linear.,1
4340,"Add the new data to the members of colored or classified old data, construct a sphere with k nearest data points, find the class or color which has the maximum vote and assign the new data to the class which has the maximum vote in an unsupervised manner. ","Initialize kneighbors = {}, for every neuron find the nearest neighbor and add it to kneighbors Return nearest kneighbors",1
4341,"Bias-variance dilemma is a principle supervised learning problem. The dilemma arises due to the variance of data and bias of model. When there is high bias, the model fits the training data perfectly but suffers from high variance, when the bias is low the variance reduces but the model doesn’t fit the data well. This dilemma makes the generalizability difficult to achieve.","In machine learning, a choice always needs to be made for the tradeoff between bias and variance. Bias determines how close the result is to the true value and variance determines the sensitivity to flutuations in the training dataset. If bias is reduced variance increases and vice versa. So an optimum tradeoff needs to be chosen which presents a dilemma.",1
4342,"Bias-variance dilemma is a principle supervised learning problem. The dilemma arises due to the variance of data and bias of model. When there is high bias, the model fits the training data perfectly but suffers from high variance, when the bias is low the variance reduces but the model doesn’t fit the data well. This dilemma makes the generalizability difficult to achieve.","Bias Variance dilemma is used to analyse the generalization error of the algorithm. If the value of Bias is very high, then network does not learn relations between features and outputs correctly(overfitting) If the value of variance is very high, then network may model the random noise, and it does not learn intended ouputs(underfitting) We have to to tradeoff between Bias and Variance so that our model can generalize properly",1
4343,"Bias-variance dilemma is a principle supervised learning problem. The dilemma arises due to the variance of data and bias of model. When there is high bias, the model fits the training data perfectly but suffers from high variance, when the bias is low the variance reduces but the model doesn’t fit the data well. This dilemma makes the generalizability difficult to achieve.","Bias and variance are both undesirable to the learning. Bias defines how far the generated output differs from the true value. Variance defines how much the o/p change on changing the input dataset. However, in most cases, it is only possible to decrease one at the expesne of other. Thus, it is called Bias Variance Dilemma.",1
4344,"Bias-variance dilemma is a principle supervised learning problem. The dilemma arises due to the variance of data and bias of model. When there is high bias, the model fits the training data perfectly but suffers from high variance, when the bias is low the variance reduces but the model doesn’t fit the data well. This dilemma makes the generalizability difficult to achieve.",The bias is the error we make in the assumption by creating the learning machine (how much we we are away from the actual truth) the variance is how much the learning machine changes with different training data sets. if we have a high bias we habe a low variance and if we habe a low variance we habe a high bias,1
4345,"Bias-variance dilemma is a principle supervised learning problem. The dilemma arises due to the variance of data and bias of model. When there is high bias, the model fits the training data perfectly but suffers from high variance, when the bias is low the variance reduces but the model doesn’t fit the data well. This dilemma makes the generalizability difficult to achieve.",You have to to a tradeoff between high bias or high variance. You cannot have both. High vaiance means the model is overfitting the data and therefore the variance on input can be quit hight. High bias means the model is generalization is to unspecific.,1
4346,"Bias-variance dilemma is a principle supervised learning problem. The dilemma arises due to the variance of data and bias of model. When there is high bias, the model fits the training data perfectly but suffers from high variance, when the bias is low the variance reduces but the model doesn’t fit the data well. This dilemma makes the generalizability difficult to achieve.",The Bias Variance Dilemma tells us that the bias (the difference between the actual and desired output) and the variance (output difference between each trial) cannot be decreased at the same time. A complex model results in small variance and larger variance.,1
4347,"Bias-variance dilemma is a principle supervised learning problem. The dilemma arises due to the variance of data and bias of model. When there is high bias, the model fits the training data perfectly but suffers from high variance, when the bias is low the variance reduces but the model doesn’t fit the data well. This dilemma makes the generalizability difficult to achieve.",Bias: How close the estimate is to the true value. variance: How much does the estimate vary for different training sets. we always have either hugh variance low bias or low variance high bias.,1
4348,"Bias-variance dilemma is a principle supervised learning problem. The dilemma arises due to the variance of data and bias of model. When there is high bias, the model fits the training data perfectly but suffers from high variance, when the bias is low the variance reduces but the model doesn’t fit the data well. This dilemma makes the generalizability difficult to achieve.",Bias : differnce between the estmated output and the actual output Variance: The range of output of a network for different training set. Bias and Variance can't be decreased at the same time for many networks. ONly one at a time can be decreased,1
4349,"Bias-variance dilemma is a principle supervised learning problem. The dilemma arises due to the variance of data and bias of model. When there is high bias, the model fits the training data perfectly but suffers from high variance, when the bias is low the variance reduces but the model doesn’t fit the data well. This dilemma makes the generalizability difficult to achieve.","When adapting the parameters of a network we can either have a small bias or a small variance. If we have a small bias the approximation of the network is close to the real one, but the variance between trials is very high. If we have a low variance, the bias can't be minimized and the network has a bigger error between the apüproximation and the real value.",1
4350,"Bias-variance dilemma is a principle supervised learning problem. The dilemma arises due to the variance of data and bias of model. When there is high bias, the model fits the training data perfectly but suffers from high variance, when the bias is low the variance reduces but the model doesn’t fit the data well. This dilemma makes the generalizability difficult to achieve.","Ideally bias and variance would be 0 after learning a machine. However, bias and variance counteract eachother: when bias decreases, variance rises and respectively in the other direction. This leads to the dilemma that either one of the values has to be present.",1
4351,"Bias-variance dilemma is a principle supervised learning problem. The dilemma arises due to the variance of data and bias of model. When there is high bias, the model fits the training data perfectly but suffers from high variance, when the bias is low the variance reduces but the model doesn’t fit the data well. This dilemma makes the generalizability difficult to achieve.",High bias and variance is desirable in input. Bias Variance Dilemma is the property of input data where if the bias is increased the variance decreases and vice versa. It is difficult to find a tradeoff between them.,1
4352,"Bias-variance dilemma is a principle supervised learning problem. The dilemma arises due to the variance of data and bias of model. When there is high bias, the model fits the training data perfectly but suffers from high variance, when the bias is low the variance reduces but the model doesn’t fit the data well. This dilemma makes the generalizability difficult to achieve.",Bias: Bias means how much the prediction differs from the true value Variance: Variance means how much the prediction varies for different datasets The Dilemma is that both generally can not be reduced simultaneously. A learning machine can reduce one at the cost of other.,1
